# Host root
host=The root node of the host-level management model.
host.name=The name to use for this host's host controller. Must be unique across the domain. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
host.release-version=The version of the JBoss Application Server release this host controller is running.
host.release-codename=The codename of the JBoss Application Server release this host controller is running.
host.product-name=The name of the JBoss AS based product that is being run by this host controller.
host.product-version=The version of the JBoss AS based product release that is being run by this host controller.
host.management-major-version=The major version of the JBoss AS management interface that is provided by this host controller.
host.management-minor-version=The minor version of the JBoss AS management interface that is provided by this host controller.
host.management-micro-version=The micro version of the JBoss AS management interface that is provided by this host controller.
host.running-mode=The current running mode of the Host Controller. Either NORMAL (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.management=Configuration of the host's management system.
host.management.interface=Interface on which the host's socket for intra-domain management communication should be opened.
host.directory-grouping=Describes how the writable directories for servers managed by this host controller should be organized. The default value, 'by-server', indicates each server's writable directories should be grouped under the server's name in the domain/servers directory. The alternative, 'by-type' indicates each server's writable directories should be grouped based on their "type" (i.e. "data", "log", "tmp") with directories of a given type for all servers appearing in the domain level directory for that type, e.g. domain/data/servers/server-name.
host.management.port=Port on which the host's socket for intra-domain management communication should be opened.
host.domain-controller=Configuration of how the host should interact with the Domain Controller
host.domain-controller.local=Configure a local Domain Controller
host.domain-controller.local.add=Configures the host to act as the Domain Controller
host.domain-controller.remote=Remote Domain Controller connection configuration
host.domain-controller.remote.add=Adds a remote Domain Controller connection configuration
host.domain-controller.remote.host=The address used for the Domain Controller connection
host.domain-controller.remote.port=The port used for the Domain Controller connection
host.domain-controller.remote.username=The username to use for this host when it authenticates with the master Domain Controller. If undefined, the host's name will be used. Setting this attribute makes it possible to avoid setting up separate credentials for every host in a domain.
host.domain-controller.remote.security-realm=Name of the security realm from which the host's credentials for authenticating with the master Domain Controller should be obtained.
host.domain-controller.remote.remove=Removes a remote Domain Controller connection configuration
host.extension=A list of extension modules.
host.path=A list of named filesystem paths.
host.interface=A list of fully specified named network interfaces available for use on the host.
host.jvm=A list of Java Virtual Machine configurations that can be applied ot servers on the host. TODO children
host.system-properties=A list of system properties to set on all servers on the host.
host.system-property=A system property to set on all servers on the host.
host.core-services=Core services provided by the host's host controller.
host.server-config=Host-level configurations for the servers that can run on this host.
host.server=Servers currently running on the host
host.shutdown=Shuts down the host and its servers
host.shutdown.restart=If true, once shutdown the host controller will be restarted again
host.start-server=Start a server.
host.start-server.server=The name of the server.
host.start-server.blocking=Whether the operation should block and wait until the server is started.
host.start-server.reply=The status of the server following execution of this operation.
host.state=The current state of the host controller; either STARTING, RUNNING or RESTART_REQUIRED
host.restart-server=Restart a currently running server.
host.restart-server.server=The name of the server.
host.restart-server.blocking=Whether the operation should block and wait until the server is restarted.
host.restart-server.reply=The status of the server following execution of this operation.
host.stop-server=Stop a currently running server.
host.stop-server.server=The name of the server.
host.stop-server.blocking=Whether the operation should block and wait until the server is stopped.
host.stop-server.reply=The status of the server following execution of this operation.
host.master=Whether this host is master host for the domain; i.e. whether this process is acting as the Domain Controller.
host.resolve-expression-on-domain=Operation that accepts an expression as input (or a string that can be parsed into an expression) and resolves it against the local system properties and environment variables on all servers managed by this host controller.
host.resolve-expression-on-domain.expression=The expression to resolve.
host.resolve-expression-on-domain.reply=The resolved expression, or the string form of the original input value if it did not represent an expression.
host.env=The host controller environment.
host.env.process-controller-address=The address of the process controller this host controller is connected to.
host.env.process-controller-port=The port of the process controller this host controller is connected to.
host.env.host-controller-address=The address this host controller uses to listen on for communication from the servers.
host.env.host-controller-port=The port this host controller uses to listen on for communication from the servers.
host.env.home-dir=The home directory of this JBoss Application Server host controller.
host.env.modules-dir=The directory where the modules are found.
host.env.domain-base-dir=The base directory of the JBoss Application Server domain.
host.env.domain-config-dir=The configuration directory of the domain.
host.env.host-config-file=The configuration file for this host.
host.env.domain-config-file=The configuration file for this domain.
host.env.domain-content-dir=The directory where user content (e.g. deployments) that is managed by the server is stored.
host.env.domain-data-dir=The data directory.
host.env.domain-log-dir=The directory where log files are sent.
host.env.domain-servers-dir=The directory where this host's started servers store their runtime data.
host.env.domain-temp-dir=The temporary directory.
host.env.default-jvm=The default jvm.
host.env.is-restart=Whether this host was restarted by the process controller.
host.env.backup-domain-files=Whether this host controller should back up the domain content from the master domain controller. Can only be true on slave host controllers.
host.env.use-cached-dc=Whether this host controlller should use cached domain content (as obtained by starting with --backup) when starting the host. Can only be true on slave host controllers.
host.env.initial-running-mode=The current running mode of the host. Either LIVE (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
host.env.qualified-host-name=The fully qualified host name detected at startup.
host.env.host-name=The local host name detected at server startup.


host.reload=Reloads the Host Controller by shutting down all its services and starting again. The JVM itself is not restarted. Note however that this will lead to a full process restart for any server processes managed by this host controller.
host.reload.admin-only=Whether the Host Controller should start in running mode ADMIN_ONLY when it restarts. An ADMIN_ONLY Host Controller will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.reload.restart-servers=If true the servers will be reloaded, and if false the servers will be left running and reconnect to the Host Controller when started again.

server=Defines a server in the host-level management model.
server.add=Add a new server configuration.
server.remove=Remove an existing server configuration.
server.cpu-affinity=The server cpu affinity.
server.interface=A list of fully specified named network interfaces available for use on the server. TODO children
server.jvm=The named jvm. TODO children
server.name=The name of the server.
server.group=The name of a server group from the domain model.
server.path=A list of named filesystem paths.
server.priority=The server priority.
server.socket-binding-group=The socket binding group this server belongs to.
server.socket-binding-port-offset=An offset to be added to the port values given by the socket binding group for this server.
server.auto-start=Whether or not this server should be started when the Host Controller starts.
server.system-properties=A list of system properties to set on this server.
server.system-property=A system property to set on this server.

# Management
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.add=Adds the server's native management interface
core.management.native-interface.remove=Removes the server's native management interface
core.management.native-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.security-realm=The security realm to use for the native management interface.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.remove=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.http-interface.secure-port=Deprecated -- use 'secure-socket-binding'. The port on which the server's socket for HTTPS management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.security-realm=The security realm to use for the HTTP management interface.
core.management.http-interface.console-enabled=Flag that indicates admin console is enabled

# Ignored resource
ignored-resources=Names of direct child resources of the domain root resource requests for which this Host Controller should ignore. Only relevant on a slave Host Controller. Configuring such "ignored resources" may help allow a Host Controller from an earlier release to function as a slave to a master Host Controller running a later release, by letting the slave ignore portions of the configuration its version of the software cannot understand. This strategy can only be successful if the servers managed by the slave Host Controller do not reference any of the ignored configuration.
ignored-resource-type=Identifies a type of resource (e.g. 'profile' or 'socket-binding-group') certain instances of which should be ignored.
ignored-resource-type.add=Adds a type of resource certain instances of which should be ignored.
ignored-resource-type.remove=Removes a type of resource from the set of those for which certain instances should be ignored.
ignored-resource-type.names=A list of names of specific instances of this type of resource that should be ignored. Including '*' in the list means all resources of the type should be ignored.
ignored-resource-type.wildcard=A boolean that if 'true' indicates all resources of the type should be ignored.

# JVMs
jvm=The JVM configuration for managed processes / servers.
jvm.add=Add a new JVM configuration.
jvm.remove=Remove an existing JVM configuration.
jvm.name=The name of the JVM configuration.
jvm.heap-size=The initial heap size allocated by the JVM.
jvm.max-heap-size=The maximum heap size that can be allocated by the JVM.
jvm.permgen-size=The initial permanent generation size.
jvm.max-permgen-size=The maximum size of the permanent generation.
jvm.stack-size=The JVM stack size settings.
jvm.agent-lib=The JVM agent lib.
jvm.agent-path=The JVM agent path.
jvm.java-agent=The java agent.
jvm.option=A JVM option.
jvm.jvm-options=The JVM options.
jvm.option.add=Add a jvm option.
jvm.option.remove=Remove a jvm option.
jvm.environment-variables=The JVM environment variables.
#jvm.system.properties=The JVM system properties.
jvm.java-home=The java home
jvm.type=The JVM type can be either SUN or IBM
jvm.debug-enabled=Boolean value indicating whether debug is enabled.
jvm.debug-options=The debug options.
jvm.env-classpath-ignored=Ignore the environment classpath.
jvm.environment-variable.add=Add a jvm environment variable.
jvm.environment-variable.remove=Remove a jvm environment variable.
jvm.environment-variable.name=The name of the jvm environment variable.
jvm.environment-variable.value=The value of the jvm environment variable.
