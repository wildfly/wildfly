# Host root
host=The root node of the host-level management model.
host.name=The name to use for this host's host controller. Must be unique across the domain. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
host.release-version=The version of the JBoss Application Server release this host controller is running.
host.release-codename=The codename of the JBoss Application Server release this host controller is running.
host.product-name=The name of the JBoss AS based product that is being run by this host controller.
host.product-version=The version of the JBoss AS based product release that is being run by this host controller.
host.management-major-version=The major version of the JBoss AS management interface that is provided by this host controller.
host.management-minor-version=The minor version of the JBoss AS management interface that is provided by this host controller.
host.running-mode=The current running mode of the Host Controller. Either NORMAL (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.management=Configuration of the host's management system.
host.management.interface=Interface on which the host's socket for intra-domain management communication should be opened.
host.management.port=Port on which the host's socket for intra-domain management communication should be opened.
host.domain-controller=Configuration of how the host should interact with the Domain Controller
host.domain-controller.local=Configure a local Domain Controller
host.domain-controller.local.add=Configures the host to act as the Domain Controller
host.domain-controller.remote=Remote Domain Controller connection configuration
host.domain-controller.remote.add=Adds a remote Domain Controller connection configuration
host.domain-controller.remote.host=The address used for the Domain Controller connection
host.domain-controller.remote.port=The port used for the Domain Controller connection
host.extension=A list of extension modules.
host.path=A list of named filesystem paths.
host.interface=A list of fully specified named network interfaces available for use on the host.
host.jvm=A list of Java Virtual Machine configurations that can be applied ot servers on the host. TODO children
host.system-properties=A list of system properties to set on all servers on the host.
host.system-property=A system property to set on all servers on the host.
host.core-services=Core services provided by the host's host controller.
host.server-config=Host-level configurations for the servers that can run on this host.
host.server=Servers currently running on the host
host.shutdown=Shuts down the host and its servers
host.shutdown.restart=If true, once shutdown the host controller will be restarted again
host.start-server=Start a server.
host.start-server.server=The name of the server.
host.start-server.reply=The status of the server following execution of this operation.
host.state=The current state of the host controller; either STARTING, RUNNING or RESTART_REQUIRED
host.restart-server=Restart a currently running server.
host.restart-server.server=The name of the server.
host.restart-server.reply=The status of the server following execution of this operation.
host.stop-server=Stop a currently running server.
host.stop-server.server=The name of the server.
host.stop-server.reply=The status of the server following execution of this operation.
host.master=Whether this host is master host for the domain; i.e. whether this process is acting as the Domain Controller.
host.resolve-expression-on-domain=Operation that accepts an expression as input (or a string that can be parsed into an expression) and resolves it against the local system properties and environment variables on all servers managed by this host controller.
host.resolve-expression-on-domain.expression=The expression to resolve.
host.resolve-expression-on-domain.reply=The resolved expression, or the string form of the original input value if it did not represent an expression.

host.reload=Reloads the Host Controller by shutting down all its services and starting again. The JVM itself is not restarted. Note however that this will lead to a full process restart for any server processes managed by this host controller.
host.reload.admin-only=Whether the Host Controller should start in running mode ADMIN_ONLY when it restarts. An ADMIN_ONLY Host Controller will start any configured management interfaces and accept management requests, but will not start servers or, if this host controller is the master for the domain, accept incoming connections from slave host controllers.
host.reload.restart-servers=If true the servers will be reloaded, and if false the servers will be left running and reconnect to the Host Controller when started again.

server=Defines a server in the host-level management model.
server.add=Add a new server configuration.
server.remove=Remove an existing server configuration.
server.cpu-affinity=The server cpu affinity.
server.interface=A list of fully specified named network interfaces available for use on the server. TODO children
server.jvm=The named jvm. TODO children
server.name=The name of the server.
server.group=The name of a server group from the domain model.
server.path=A list of named filesystem paths.
server.priority=The server priority.
server.socket-binding-group=The socket binding group this server belongs to.
server.socket-binding-port-offset=An offset to be added to the port values given by the socket binding group for this server.
server.auto-start=Whether or not this server should be started when the Host Controller starts.
server.system-properties=A list of system properties to set on this server.
server.system-property=A system property to set on this server.

# Management
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.add=Adds the server's native management interface
core.management.native-interface.remove=Removes the server's native management interface
core.management.native-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.security-realm=The security realm to use for the native management interface.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.remove=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.http-interface.secure-port=Deprecated -- use 'secure-socket-binding'. The port on which the server's socket for HTTPS management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.security-realm=The security realm to use for the HTTP management interface.

