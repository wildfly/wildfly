host=Der Root-Knoten des Management-Modells auf der Host-Ebene.
host.name=Der Name f\u00FCr den Host-Controller dieses Hosts. Falls nicht festgelegt, wird standardm\u00E4\u00DFig der Laufzeitwert von InetAddress.getLocalHost().getHostName() verwendet.
host.release-version=Die Version der JBoss Application Server Release, die auf diesem Host-Controller l\u00E4uft.
host.release-codename=Der Codename der JBoss Application Server Release, die auf diesem Host-Controller l\u00E4uft.
host.product-name=Der Name des auf JBoss AS basierenden Produkts, das auf diesem Host-Controller ausgef\u00FChrt wird.
host.product-version=Die Version der auf JBoss AS basierenden Produkt-Release, die auf diesem Host-Controller ausgef\u00FChrt wird.
host.management-major-version=Die Hauptversion des JBoss AS Management-Interface, das auf diesem Host-Controller bereitgestellt wird.
host.management-minor-version=Die Nebenversion des JBoss AS Management-Interface, das auf diesem Host-Controller bereitgestellt wird.
host.running-mode=Der derzeitige Ausf\u00FChrungsmodus des Host-Controllers. Entweder NORMAL (normaler Betrieb) oder ADMIN_ONLY.  Ein ADMIN_ONLY Server startet s\u00E4mtliche konfigurierten Verwaltungsoberfl\u00E4chen und akzeptiert Verwaltungsanfragen, startet jedoch keine Server und, falls dieser Host-Controller der Master f\u00FCr die Domain ist, akzeptiert keine eingehenden Verbindungen von Slave-Host-Controllern.
host.management=Die Konfiguration des Managementsystems des Hosts.
host.management.interface=Interface, an dem das Socket des Host-Controllers f\u00FCr Intradomain-Management-Kommunikation ge\u00F6ffnet werden sollte. 
host.directory-grouping=Beschreibt, wie schreibbare Verzeichnisse f\u00FCr Server, die von diesem Host-Controller gesteuert werden, organisiert werden sollen. Der Standardwert 'by-server' zeigt an, dass die schreibbaren Verzeichnisse eines jeden Servers unter dem Namen des Servers in dem Domain-/Server-Verzeichnis gruppiert werden sollen. Die Alternative 'by-type' zeigt an, dass die schreibbaren Verzeichnisse eines jeden Servers nach deren Typ (z.B. "data", "log", "tmp") mit Verzeichnissen eines gegebenen Typs f\u00FCr alle Server gruppiert werden sollen, die im Domainlevel-Verzeichnis f\u00FCr diesen Typ erscheinen, z.B. domain/data/servers/server-name.
host.management.port=Port, an dem das Socket des Host-Controllers f\u00FCr Intradomain-Management-Kommunikation ge\u00F6ffnet werden sollte. 
host.domain-controller=Konfiguration der Weise, wie der Host mit dem Domain-Controller interagieren soll
host.domain-controller.local=Konfigurieren eines lokalen Domain-Controllers
host.domain-controller.local.add=Konfiguriert den Host, um als Domain-Controller zu fungieren
host.domain-controller.remote=Konfiguration der Remote Domain-Controller-Verbindung
host.domain-controller.remote.add=F\u00FCgt eine Konfiguration f\u00FCr eine Remote Domain-Controller-Verbindung hinzu
host.domain-controller.remote.host=Die f\u00FCr die Domain-Controller-Verbindung zu verwendende Adresse
host.domain-controller.remote.port=Der f\u00FCr die Domain-Controller-Verbindung zu verwendende Port
host.extension=Eine Liste von Erweiterungsmodulen.
host.path=Eine Liste benannter Dateisystempfade.
host.interface=Eine Liste der voll spezifizierten Netzwerk-Interfaces, die auf dem Host zur Verf\u00FCgung stehen.
host.jvm=Eine Liste von Java Virtual Machine Konfigurationen, die auf Server auf dem Host angewendet werden k\u00F6nnen. 
host.system-properties=Eine Liste der auf allen Servern auf dem Host einzustellenden Systemeigenschaften. 
host.system-property=Eine auf allen Servern am Host einzustellende Systemeigenschaft. 
host.core-services=Vom Host-Controller des Hosts bereitgestellte Kerndienste.
host.server-config=Konfigurationen auf Host-Ebene f\u00FCr die Server, die auf diesem Host laufen k\u00F6nnen.
host.server=Aktuell am Host laufende Server
host.shutdown=Beendet Host und dessen Server 
host.shutdown.restart=Falls 'true', wird der Host-Controller nach Beenden wieder neu gestartet
host.start-server=Start eines Servers.
host.start-server.server=Der Name des Servers.
host.start-server.reply=Der Status des Servers nach Ausf\u00FChrung dieser Operation.
host.state=Der derzeitige Status des Host-Controllers; entweder STARTING, RUNNING oder RESTART_REQUIRED
host.restart-server=Neustart eines aktuell laufenden Servers. 
host.restart-server.server=Der Name des Servers.
host.restart-server.reply=Der Status des Servers nach Ausf\u00FChrung dieser Operation.
host.stop-server=Stop eines aktuell laufenden Servers. 
host.stop-server.server=Der Name des Servers.
host.stop-server.reply=Der Status des Servers nach Ausf\u00FChrung dieser Operation.
host.master=Ob dieser Host der Master-Host f\u00FCr die Domain ist; d.h. ob dieser Prozess als Domain Controller agiert.
host.resolve-expression-on-domain=Operation, die einen Ausdruck als Eingabe akzeptiert (oder einen String, der in einen Ausdruck umgewandelt werden kann) und diesen anhand der lokalen Systemeigenschaften und Umgebungsvariablen auf allen von diesem Host-Controller verwalteten Servern aufl\u00F6st.
host.resolve-expression-on-domain.expression=Der aufzul\u00F6sende Ausdruck.
host.resolve-expression-on-domain.reply=Der aufgel\u00F6ste Ausdruck oder die String-Form des urspr\u00FCnglichen Eingabewerts, falls dieser keinen Ausdruck repr\u00E4sentierte. 
host.env=Die Host-Controller Umgebung.
host.env.process-controller-address=Die Adresse des Prozess-Controllers, mit dem dieser Host-Controller verbunden ist.
host.env.process-controller-port=Der Port des Prozess-Controllers, mit dem dieser Host-Controller verbunden ist.
host.env.host-controller-address=Die Adresse, auf der dieser Host-Controller auf Kommunikation von den Servern wartet.
host.env.host-controller-port=Der Port, auf dem dieser Host-Controller auf Kommunikation von den Servern wartet.
host.env.home-dir=Das Home-Verzeichnis dieses JBoss Application Server Host-Controllers.
host.env.modules-dir=Das Verzeichnis, in dem die Module zu finden sind.
host.env.domain-base-dir=Das Basis-Verzeichnis f\u00FCr die JBoss Application Server Domain.
host.env.domain-config-dir=Das Konfigurationsverzeichnis der Domain.
host.env.host-config-file=Die Konfigurationsdatei f\u00FCr diesen Host.
host.env.domain-config-file=Die Konfigurationsdatei f\u00FCr diese Domain.
host.env.domain-content-dir=Das Verzeichnis, in dem vom Server verwaltete Benutzerinhalte (z.B. Deployments) gespeichert werden.
host.env.domain-data-dir=Das Datenverzeichnis.
host.env.domain-log-dir=Das Verzeichnis, an das Protokolldateien geschickt werden.
host.env.domain-servers-dir=Das Verzeichnis, in dem die von diesem Host gestarteten Server ihre Laufzeitdaten speichern.
host.env.domain-temp-dir=Das tempor\u00E4re Verzeichnis.
host.env.default-jvm=Die Standard-jvm.
host.env.is-restart=Ob dieser Host vom Prozess-Controller neu gestartet wurde.
host.env.backup-domain-files=Ob dieser Host-Controller die Domain-Inhalte vom Master-Domain-Controller sichern sollte. Kann nur auf Slave-Host-Controllern 'true' sein.
host.env.use-cached-dc=Ob dieser Host-Controller beim Start des Hosts die gecachten Domain-Inhalte (zu erhalten durch Start mit --backup) verwenden soll. Kann nur auf Slave-Host-Controllern 'true' sein.
host.env.initial-running-mode=Der derzeitige Ausf\u00FChrungsmodus des Hosts. Entweder LIVE (normaler Betrieb) oder ADMIN_ONLY.  Ein ADMIN_ONLY Server startet s\u00E4mtliche konfigurierten Verwaltungsoberfl\u00E4chen und akzeptiert Verwaltungsanfragen, startet jedoch keine Dienste zur Handhabung von Endbenutzeranfragen.
host.env.qualified-host-name=Der beim Start festgestellte voll qualifizierte Hostname.
host.env.host-name=Der beim Start festgestellte lokale Hostname.
host.reload=L\u00E4dt den Host-Controller neu, indem alle seine Dienste beendet und neu gestartet werden. Die JVM selbst wird nicht neu gestartet. Beachten Sie jedoch, dass dies zu einem umfassenden Neustart von allen Server-Prozessen f\u00FChrt, die von diesem Host-Controller verwaltet werden.
host.reload.admin-only=Ob der Host-Controller beim Neustart in Ausf\u00FChrungsmodus ADMIN_ONLY gestartet werden soll. Ein ADMIN_ONLY Host startet s\u00E4mtliche konfigurierten Verwaltungsoberfl\u00E4chen und akzeptiert Verwaltungsanfragen, startet jedoch keine Server und, falls dieser Host-Controller der Master f\u00FCr die Domain ist, akzeptiert keine eingehenden Verbindungen von Slave-Host-Controllern.
host.reload.restart-servers=Falls 'true', werden die Server neu geladen, falls 'false', werden die Server weiter laufen gelassen und bei einem Neustart wieder mit dem Host-Controller verbunden.
server=Definiert einen Server im Management-Modell auf der Host-Ebene.
server.add=Hinzuf\u00FCgen einer neuen Serverkonfiguration.
server.remove=Entfernen einer bestehenden Serverkonfiguration.
server.cpu-affinity=Die Server cpu-Affinit\u00E4t.
server.interface=Eine Liste der voll spezifizierten Netzwerk-Interfaces, die auf dem Server zur Verf\u00FCgung stehen.
server.jvm=Die benannte JVM.
server.name=Der Name des Servers.
server.group=Der Name einer Servergruppe vom Domain-Modell.
server.path=Eine Liste benannter Dateisystempfade.
server.priority=Die Serverpriorit\u00E4t.
server.socket-binding-group=Die Socket-Binding-Gruppe, zu der dieser Server geh\u00F6rt.
server.socket-binding-port-offset=Ein Offset, der auf die Port-Werte aufgeschlagen wird, die von der Socket-Binding-Gruppe f\u00FCr diesen Server angegeben sind.
server.auto-start=Ob dieser Server gestartet werden soll, wenn der Host-Controller gestartet.
server.system-properties=Eine Liste von an diesem Server einzustellenden Systemeigenschaften. 
server.system-property=Eine an diesem Server einzustellende Systemeigenschaft. 
core.management.native-interface=Konfiguration des nativen Management-Interface des Servers
core.management.native-interface.add=F\u00FCgt das native Management-Interface des Servers hinzu
core.management.native-interface.remove=Entfernt das native Management-Interface des Servers
core.management.native-interface.interface=Veraltet -- nutzen Sie stattdessen 'socket-binding'. Netzwerk-Interface, an dem das Socket des Servers f\u00FCr native Management-Kommunikation ge\u00F6ffnet werden sollte. Muss 'undefined' sein, wenn das 'socket-binding'-Attribut eingestellt ist.
core.management.native-interface.port=Veraltet -- nutzen Sie stattdessen 'socket-binding'. Port, an dem das Socket des Servers f\u00FCr native Management-Kommunikation ge\u00F6ffnet werden sollte. Muss 'undefined' sein, wenn das 'socket-binding'-Attribut eingestellt ist.
core.management.native-interface.security-realm=Der f\u00FCr das native Management-Interface zu verwendende Sicherheitsbereich.
core.management.http-interface=Konfiguration des HTTP Management-Interface des Servers
core.management.http-interface.add=F\u00FCgt die Konfiguration des HTTP Management-Interface des Servers hinzu
core.management.http-interface.remove=F\u00FCgt die Konfiguration des HTTP Management-Interface des Servers hinzu
core.management.http-interface.interface=Veraltet -- nutzen Sie stattdessen 'socket-binding'. Netzwerk-Interface, an dem das Socket des Servers f\u00FCr HTTP-Management-Kommunikation ge\u00F6ffnet werden sollte. Muss 'undefined' sein, wenn das 'socket-binding'-Attribut oder das 'secure-socket-binding'-Attribut eingestellt ist.
core.management.http-interface.port=Veraltet -- nutzen Sie stattdessen 'socket-binding'. Port, an dem das Socket des Servers f\u00FCr HTTP-Management-Kommunikation ge\u00F6ffnet werden sollte. Muss 'undefined' sein, wenn das 'socket-binding'-Attribut eingestellt ist.
core.management.http-interface.secure-port=Veraltet -- nutzen Sie stattdessen 'secure-socket-binding'. Port, an dem das Socket des Servers f\u00FCr HTTPS-Management-Kommunikation ge\u00F6ffnet werden sollte. Muss 'undefined' sein, wenn das 'socket-binding'-Attribut oder das 'secure-socket-binding'-Attribut eingestellt ist.
core.management.http-interface.security-realm=Der f\u00FCr das HTTP-Management-Interface zu verwendende Sicherheitsbereich.
core.management.http-interface.console-enabled=Dieses Flag zeigt an, dass die Admin-Konsole aktiviert ist
ignored-resources=Namen direkt untergeordneter Ressourcen der Domain-Root-Ressource, f\u00FCr die dieser Host-Controller Anfragen ignorieren soll. Nur relevant auf einem Slave-Host-Controller. Die Konfiguration dieser ignorierten Ressourcen kann einem Host-Controller einer fr\u00FCheren Release dabei helfen, als Slave f\u00FCr einen Master-Host-Controller einer sp\u00E4teren Release zu dienen, indem dem Slave erm\u00F6glicht wird, diejenigen Teile der Konfiguration zu ignorieren, die seine Software-Version nicht verstehen kann. Diese Strategie kann nur dann erfolgreich sein, wenn die Server, die vom Slave-Host-Controller verwaltet werden, nicht die ignorierten Teile der Konfiguration referenzieren.
ignored-resource-type=Identifiziert einen Ressourcentyp (z.B. 'profile' oder 'socket-binding-group'), von denen bestimmte Instanzen ignoriert werden sollen.
ignored-resource-type.add=F\u00FCgt einen Ressourcentyp hinzu, von dem bestimmte Instanzen ignoriert werden sollen.
ignored-resource-type.remove=Entfernt einen Ressourcentyp aus der Gruppe jener, von denen bestimmte Instanzen ignoriert werden sollen.
ignored-resource-type.names=Eine Liste von Namen spezifischer Instanzen dieses Ressourcentyps, die ignoriert werden sollen. Die Angabe von '*' in der Liste bedeutet, dass alle Ressourcen dieses Typs ignoriert werden sollen.
ignored-resource-type.wildcard=Eine boolesche Variable; falls 'true', werden alle Ressourcen dieses Typs ignoriert.
