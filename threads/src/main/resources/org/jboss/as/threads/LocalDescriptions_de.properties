threads=Das Threading-Untersystem, das zur Deklaration von verwaltbaren Thread-Pools und Ressourcen verwendet wird.
threads.add=F\u00FCgt das Threading-Untersystem hinzu.
threads.remove=Entfernt das Threading-Untersystem.
threads.thread-factory=Ein Satz von Thread-Factories.
threads.blocking-bounded-queue-thread-pool=Ein Satz von Thread-Pools, bei denen Aufgaben in einer Warteschlange begrenzter Gr\u00F6\u00DFe gespeichert werden und Threads, die Aufgaben einreichen, sperren, bis in der Warteschlange Platz frei ist.
threads.blocking-queueless-thread-pool=Ein Satz von Thread-Pools, bei denen Aufgaben nicht in einer Warteschlange gespeichert werden und Threads, die Aufgaben einreichen, sperren, bis ein Pool-Thread zur Ausf\u00FChrung der Aufgabe verf\u00FCgbar ist.
threads.bounded-queue-thread-pool=Ein Satz von Thread-Pools, bei denen Aufgaben in einer Warteschlange begrenzter Gr\u00F6\u00DFe gespeichert werden und, falls kein Platz in der Warteschlange frei ist, Aufgaben entweder verworfen oder an einen anderen Executor zur Ausf\u00FChrung \u00FCbergeben werden.
threads.queueless-thread-pool=Ein Satz von Thread-Pools, bei denen Aufgaben nicht in einer Warteschlange gespeichert werden und, falls kein Pool-Thread zur Ausf\u00FChrung einer Aufgabe verf\u00FCgbar ist, diese Aufgaben entweder verworfen oder an einen anderen Executor zur Ausf\u00FChrung \u00FCbergeben werden.
threads.unbounded-queue-thread-pool=Ein Satz von Thread-Pools, bei denen Aufgaben in einer Warteschlange von unbegrenzter Gr\u00F6\u00DFe gespeichert werden.
threads.scheduled-thread-pool=Ein Satz terminierter Thread-Pools.
thread-factory=Eine Thread-Factory (implementiert java.util.concurrent.ThreadFactory).
thread-factory.add=F\u00FCgt eine Thread-Factory hinzu
thread-factory.name=Der Name der erstellten Thread-Factory.
thread-factory.group-name=Spezifiziert den Namen einer Thread-Gruppe, die f\u00FCr diese Thread-Factory zu erstellen ist.
thread-factory.thread-name-pattern=Vorlage zur Namensgebung f\u00FCr Threads. Die folgenden Muster k\u00F6nnen verwendet werden\:\n\t%% - Prozentzeichen ausgeben\n\t%t - Thread-Sequenznummer pro Factory ausgeben \n\t%g - Globale Thread-Sequenznummer ausgeben\n\t%f - Factory-Sequenznummer ausgeben\n\t%i - Thread-ID ausgeben.
thread-factory.priority=Kann zur Spezifizierung der Thread-Priorit\u00E4t der erstellten Threads verwendet werden.
thread-factory.remove=Entfernt eine Thread-Factory
threadpool.common.name=Der Name des Thread-Pools.
threadpool.common.thread-factory=Spezifiziert den Namen einer bestimmten Thread-Factory, die zur Erstellung der Worker-Threads verwendet werden soll. Falls nicht definiert, wird eine geeignete Standard-Thread-Factory verwendet.
threadpool.common.max-threads=Die maximale Thread-Pool-Gr\u00F6\u00DFe.
threadpool.common.core-threads=Die Kern-Threadpool-Gr\u00F6\u00DFe, die kleiner ist als die maximale Pool-Gr\u00F6\u00DFe. Falls nicht definiert, ist die Kern-Threadpool-Gr\u00F6\u00DFe dieselbe wie die maximale Threadpool-Gr\u00F6\u00DFe.
threadpool.common.keepalive-time=Spezifiziert die Zeitspanne, die Pool-Threads weiterlaufen sollten, wenn sie unt\u00E4tig sind. Falls nicht spezifiziert, werden Threads weiterlaufen, bis der Executor beendet wird.
threadpool.common.keepalive-time.time=Die Zeit
threadpool.common.keepalive-time.unit=Die Zeiteinheit
threadpool.common.allow-core-timeout=Ob Timeouts f\u00FCr Kern-Threads stattfinden
threadpool.common.handoff-executor=Ein Executor, an den Aufgaben delegiert werden, falls diese Aufgaben nicht akzeptiert werden k\u00F6nnen. Falls nicht spezifiziert, werden Aufgaben, die nicht akzeptiert werden k\u00F6nnen, kommentarlos verworfen.
threadpool.common.queue-length=Die L\u00E4nge der Warteschlange. 
threadpool.common.active-count=Die ungef\u00E4hre Anzahl von Threads, die aktiv Aufgaben ausf\u00FChren.
threadpool.common.completed-task-count=Die ungef\u00E4hre Gesamtanzahl von Aufgaben, deren Ausf\u00FChrung abgeschlossen wurde.
threadpool.common.current-thread-count=Die aktuelle Anzahl von Threads im Pool.
threadpool.common.largest-thread-count=Die h\u00F6chste Anzahl von Threads, die sich jemals gleichzeitig im Pool befanden.
threadpool.common.task-count=Die ungef\u00E4hre Gesamtanzahl von Aufgaben, deren Ausf\u00FChrung jemals eingeplant wurde.
blocking-bounded-queue-thread-pool=Ein Thread-Pool-Executor mit einer Warteschlange begrenzter Gr\u00F6\u00DFe, bei dem Threads, die Aufgaben einreichen, sperren k\u00F6nnen. Solch ein Thread-Pool hat eine Kern- und eine Maximalgr\u00F6\u00DFe sowie eine festgelegte Warteschlangenl\u00E4nge. Wenn eine Aufgabe eingereicht wird und die Anzahl laufender Threads kleiner ist als die Kerngr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird die Aufgabe in die Warteschlange eingereiht, sofern Platz in der Warteschlange frei ist. Ist dies nicht der Fall, die Anzahl laufender Threads ist jedoch kleiner als die Maximalgr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird der Aufrufer sperren, bis Platz in der Warteschlange frei wird.
blocking-bounded-queue-thread-pool.add=F\u00FCgt einen blockierenden, begrenzten Warteschlangen-Thread-Pool hinzu.
blocking-bounded-queue-thread-pool.remove=Entfernt einen blockierenden, begrenzten Warteschlangen-Thread-Pool.
blocking-bounded-queue-thread-pool.rejected-count=Die Anzahl der Aufgaben, die an den Ausweich-Executor (falls einer spezifiziert wurde) \u00FCbergeben oder verworfen wurden.
bounded-queue-thread-pool=Ein Thread-Pool-Executor mit einer Warteschlange begrenzter Gr\u00F6\u00DFe, bei dem Threads, die Aufgaben einreichen, nicht sperren k\u00F6nnen. Solch ein Thread-Pool hat eine Kern- und eine Maximalgr\u00F6\u00DFe sowie eine festgelegte Warteschlangenl\u00E4nge. Wenn eine Aufgabe eingereicht wird und die Anzahl laufender Threads kleiner ist als die Kerngr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird die Aufgabe in die Warteschlange eingereiht, sofern Platz in der Warteschlange frei ist. Ist dies nicht der Fall, die Anzahl laufender Threads ist jedoch kleiner als die Maximalgr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird die Aufgabe an den Ausweich-Executor \u00FCbergeben, sofern einer spezifiziert wurde. Ist dies nicht der Fall, wird die Aufgabe verworfen.
bounded-queue-thread-pool.add=F\u00FCgt einen begrenzten Warteschlangen-Thread-Pool hinzu.
bounded-queue-thread-pool.remove=Entfernt einen begrenzten Warteschlangen-Thread-Pool.
bounded-queue-thread-pool.rejected-count=Die Anzahl der Aufgaben, die an den Ausweich-Executor (falls einer spezifiziert wurde) \u00FCbergeben oder verworfen wurden.
blocking-queueless-thread-pool=Ein Thread-Pool-Executor ohne Warteschlange, bei dem Threads, die Aufgaben einreichen, sperren k\u00F6nnen. Wenn eine Aufgabe eingereicht wird und die Anzahl laufender Threads kleiner ist als die Maximalgr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird der Aufrufer sperren, bis ein anderer Thread seine Aufgabe abschlie\u00DFt und diese neue Aufgabe akzeptiert.
blocking-queueless-thread-pool.add=F\u00FCgt einen blockierenden, warteschlangenlosen Thread-Pool hinzu.
blocking-queueless-thread-pool.remove=Entfernt einen blockierenden, warteschlangenlosen Thread-Pool.
blocking-queueless-thread-pool.rejected-count=Die Anzahl der Aufgaben, die an den Ausweich-Executor (falls einer spezifiziert wurde) \u00FCbergeben oder verworfen wurden.
queueless-thread-pool=Ein Thread-Pool-Executor ohne Warteschlange, bei dem Threads, die Aufgaben einreichen, nicht sperren k\u00F6nnen. Wenn eine Aufgabe eingereicht wird und die Anzahl laufender Threads kleiner ist als die Maximalgr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird die Aufgabe an den Ausweich-Executor \u00FCbergeben, sofern einer spezifiziert wurde. Ist dies nicht der Fall, wird die Aufgabe verworfen.
queueless-thread-pool.add=F\u00FCgt einen warteschlangenlosen Thread-Pool hinzu.
queueless-thread-pool.remove=Entfernt einen warteschlangenlosen Thread-Pool.
queueless-thread-pool.rejected-count=Die Anzahl der Aufgaben, die an den Ausweich-Executor (falls einer spezifiziert wurde) \u00FCbergeben oder verworfen wurden.
scheduled-thread-pool=Ein terminierter Thread-Pool-Executor.
scheduled-thread-pool.add=F\u00FCgt einen warteschlangenlosen Thread-Pool hinzu.
scheduled-thread-pool.remove=Entfernt einen warteschlangenlosen Thread-Pool.
unbounded-queue-thread-pool=Ein Thread-Pool-Executor mit einer ungegrenzten Warteschlange. Ein solcher Thread-Pool hat eine Kerngr\u00F6\u00DFe und eine Warteschlange ohne obere Grenze. Wenn eine Aufgabe eingereicht wird und die Anzahl laufender Threads kleiner ist als die Kerngr\u00F6\u00DFe, dann wird ein neuer Thread erstellt. Andernfalls wird die Aufgabe in die Warteschlange eingereiht. Falls zu viele Aufgabe bei diesem Executor-Typ eingereicht werden, kann eine Out-Of-Memory-Situation (ungen\u00FCgender Speicher) entstehen.
unbounded-queue-thread-pool.add=F\u00FCgt einen unbegrenzten Warteschlangen-Thread-Pool hinzu.
unbounded-queue-thread-pool.remove=Entfernt einen unbegrenzten Warteschlangen-Thread-Pool.
unbounded-queue-thread-pool.rejected-count=Die Anzahl der Aufgaben, die abgelehnt wurden.
