threads=The threading subsystem, used to declare manageable thread pools and resources.
threads.add=Adds the threading subsystem.

threadfactories=A set of thread factories.

threadfactory=A thread factory (implementing java.util.concurrent.ThreadFactory).
threadfactory.add=Adds a thread factory
threadfactory.name=The bean name of the created thread factory.
threadfactory.group-name=Specifies the name of a the thread group to create for this thread factory.
threadfactory.thread-name-pattern=The template used to create names for threads.  The following patterns may be used:\n\t%% - emit a percent sign\n\t%t - emit the per-factory thread sequence number\n\t%g - emit the global thread sequence number\n\t%f - emit the factory sequence number\n\t%i - emit the thread ID.
threadfactory.priority=May be used to specify the thread priority of created threads.
threadfactory.properties=Extra properties for configuration. This is a map with string values indexed by the string property name. 
threadfactory.remove=Removes a thread factory

threadpool.common.name=The name of the thread pool.
threadpool.common.threadfactory=Specifies the bean name of a specific thread factory to use to create worker threads.
threadpool.common.properties=Extra properties for configuration. This is a map with string values indexed by the string property name.
threadpool.common.maxthreads=The maximum thread pool size. It is calculated by adding together count and percpu and rounding it off to an integer value.
threadpool.common.maxthreads.count=Specifies a flat quantity. 
threadpool.common.maxthreads.percpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors().
threadpool.common.keepalive=Used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
threadpool.common.keepalive.time=The time
threadpool.common.keepalive.unit=The time unit

threadpool.bounded=A set of bounded queue thread pools.
threadpool.bounded.add=Adds a bounded queue thread pool.
threadpool.bounded.description=A thread pool executor with a bounded queue.  Such a thread pool has a core and maximum size and a specified queue length.  When a task is submitted, if the number of running threads is less than the core size, a new thread is created.  Otherwise, if there is room in the queue, the task is enqueued. Otherwise, if the number of running threads is less than the maximum size, a new thread is created. Otherwise, if blocking is enabled, the caller blocks until room becomes available in the queue. Otherwise, the task is handed off to the designated handoff executor, if one is specified.  Otherwise, the task is rejected.
threadpool.bounded.allowcoretimeout=Whether core threads may time out.
threadpool.bounded.blocking=Whether the submitter thread will block if no space is available in this executor.
threadpool.bounded.corethreads=The core thread pool size which is smaller than the maximum pool size. It is calculated by adding together count and percpu and rounding it off to an integer value.
threadpool.bounded.corethreads.count=Specifies a flat quantity. 
threadpool.bounded.corethreads.percpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors().
threadpool.bounded.handoffexecutor=An executor to delegate tasks to in the event that a task cannot be accepted.
threadpool.bounded.queuelength=The queue length.  It is calculated by adding together count and percpu and rounding it off to an integer value. 
threadpool.bounded.queuelength.count=Specifies a flat quantity.
threadpool.bounded.queuelength.percpu=Specifies a quantity per available CPU, as determined by java.lang.Runtime#availableProcessors().
threadpool.bounded.remove=Removes a bounded queue thread pool.

threadpool.queueless=A set of queueless thread pools.
threadpool.queueless.add=Adds a queueless thread pool.
threadpool.queueless.description=A thread pool executor with no queue.  When a task is submitted, if the number of running threads is less than the maximum size, a new thread is created.  Otherwise, if blocking is enabled, the caller blocks until another thread completes its task and accepts the new one.  Otherwise, the task is handed off to the designated handoff executor, if one is specified.  Otherwise, the task is rejected.
threadpool.queueless.blocking=Whether the submitter thread will block if no space is available in this executor.
threadpool.queueless.handoffexecutor=An executor to delegate tasks to in the event that a task cannot be accepted.
threadpool.queueless.remove=Removes a queueless thread pool.

threadpool.scheduled=A set of scheduled thread pools
threadpool.scheduled.add=Adds a queueless thread pool.
threadpool.scheduled.description=A scheduled thread pool executor.
threadpool.scheduled.remove=Removes a queueless thread pool.

threadpool.unbounded=A set of unbounded queue thread pools
threadpool.unbounded.add=Adds an unbounded thread pool.
threadpool.unbounded.description=A thread pool executor with an unbounded queue.  Such a thread pool has a core size and a queue with no upper bound.  When a task is submitted, if the number of running threads is less than the core size, a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be submitted to this type of executor, an out of memory condition may occur.
threadpool.unbounded.remove=Removes an unbounded thread pool.

