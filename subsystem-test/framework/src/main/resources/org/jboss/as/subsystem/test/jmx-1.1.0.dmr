{
    "model-description" => {
        "description" => "The configuration of the JMX subsystem.",
        "attributes" => {"show-model" => {
            "type" => BOOLEAN,
            "description" => "Alias for the existence of the 'resolved' model controller jmx facade. When writing, if set to 'true' it will add the 'resolved' model controller jmx facade resource with the default domain name.  ",
            "expressions-allowed" => false,
            "nillable" => true
        }},
        "operations" => undefined,
        "children" => {
            "remoting-connector" => {
                "description" => "JBoss remoting connectors for the JMX subsystem.",
                "model-description" => undefined
            },
            "expose-model" => {
                "description" => "Expose the model controller in the MBeanServer. The recommended is the 'expression' child. ",
                "model-description" => undefined
            }
        }
    },
    "address" => [("subsystem" => "jmx")],
    "children" => [
        {
            "model-description" => {
                "description" => "A JBoss remoting connector for the JMX subsystem.",
                "attributes" => {"use-management-endpoint" => {
                    "type" => BOOLEAN,
                    "description" => "If true the connector will use the management endpoint, otherwise it will use the remoting subsystem one",
                    "expressions-allowed" => true,
                    "nillable" => true,
                    "default" => true
                }},
                "operations" => undefined,
                "children" => {}
            },
            "address" => [
                ("subsystem" => "jmx"),
                ("remoting-connector" => "jmx")
            ]
        },
        {
            "model-description" => {
                "description" => "The configuration for exposing the 'expression' model controller in the MBeanServer. This facade will expose all simple attributes and operation parameters as String. Reads return the unresolved expression. You may use expressions when writing attributes and setting operation parameters.",
                "attributes" => {"domain-name" => {
                    "type" => STRING,
                    "description" => "The domain name to use for the 'expression' model controller JMX facade in the MBeanServer.",
                    "expressions-allowed" => true,
                    "nillable" => true,
                    "default" => "jboss.as.expr",
                    "min-length" => 1L,
                    "max-length" => 2147483647L
                }},
                "operations" => undefined,
                "children" => {}
            },
            "address" => [
                ("subsystem" => "jmx"),
                ("expose-model" => "expression")
            ]
        },
        {
            "model-description" => {
                "description" => "The configuration for exposing the 'resolved' model controller in the MBeanServer. This facade will expose all simple attributes and operation parameters as their type in the underlying model. Reads return the resolved expression if used, or the raw value. You may not use expressions when writing attributes and setting operation parameters.",
                "attributes" => {
                    "domain-name" => {
                        "type" => STRING,
                        "description" => "The domain name to use for the 'resolved' model controller JMX facade in the MBeanServer.",
                        "expressions-allowed" => true,
                        "nillable" => true,
                        "default" => "jboss.as",
                        "min-length" => 1L,
                        "max-length" => 2147483647L
                    },
                    "proper-property-format" => {
                        "type" => BOOLEAN,
                        "description" => "If false, PROPERTY type attributes are represented as a DMR string, this is the legacy behaviour. If true, PROPERTY type attributes are represented by a composite type where the key is a string, and the value has the same type as the property in the underlying model.",
                        "expressions-allowed" => true,
                        "nillable" => true,
                        "default" => true
                    }
                },
                "operations" => undefined,
                "children" => {}
            },
            "address" => [
                ("subsystem" => "jmx"),
                ("expose-model" => "resolved")
            ]
        }
    ]
}