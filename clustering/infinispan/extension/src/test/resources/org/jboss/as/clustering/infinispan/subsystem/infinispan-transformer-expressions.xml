<!--
  ~
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright 2012, Red Hat, Inc., and individual contributors
  ~ as indicated by the @author tags. See the copyright.txt file in the
  ~ distribution for a full listing of individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  ~
  -->
<subsystem xmlns="urn:jboss:domain:infinispan:3.0">
    <cache-container name="minimal" default-cache="local" statistics-enabled="true">
        <local-cache name="local" statistics-enabled="true"/>
    </cache-container>
    <cache-container name="maximal" aliases="alias1 alias2" default-cache="local" eviction-executor="infinispan-eviction" jndi-name="${test.xxx:java:global/infinispan/maximal}" listener-executor="infinispan-listener" replication-queue-executor="infinispan-repl-queue" module="${test.xxx:org.infinispan}" start="${test.xxx:EAGER}" statistics-enabled="true">
        <transport channel="${test.xxx:maximal-cluster}" executor="transport-executor" lock-timeout="${test.xxx:120000}"/>
        <local-cache name="local" module="${test.xxx:org.infinispan}" statistics-enabled="true">
            <locking acquire-timeout="${test.xxx:30000}" concurrency-level="${test.xxx:2000}" isolation="${test.xxx:NONE}" striping="${test.xxx:true}"/>
            <transaction mode="FULL_XA" stop-timeout="${test.xxx:60000}" locking="${tst.xxx:OPTIMISTIC}"/>
            <eviction max-entries="${test.xxx:20000}" strategy="${test.xxx:LIRS}"/>
            <expiration interval="${test.xxx:10000}" lifespan="${test.xxx:10}" max-idle="${test.xxx:10}"/>
            <file-store fetch-state="${test.xxx:false}" passivation="${test.xxx:false}" path="${test.xxx:path}" preload="${test.xxx:true}" purge="${test.xxx:false}" relative-to="jboss.server.temp.dir" shared="${test.xxx:true}" singleton="${tst.xxx:false}">
                <write-behind flush-lock-timeout="${test.xxx:2}" modification-queue-size="${test.xxx:2048}" shutdown-timeout="${test.xxx:20000}" thread-pool-size="${test.xxx:1}"/>
            </file-store>
            <indexing index="${test.xxx:LOCAL}">
                <property name="hibernate.search.default.directory_provider">${test.xxx:infinispan}</property>
                <property name="hibernate.search.infinispan.cachemanager_jndiname">${test.xxx:java:jboss/infinispan/container/HibernateSearch}</property>
                <property name="hibernate.search.default.worker.backend">${test.xxx:jgroups}</property>
            </indexing>
        </local-cache>
        <invalidation-cache name="invalid" mode="ASYNC" queue-flush-interval="${test.xxx:10}" queue-size="${test.xxx:1000}" async-marshalling="${tst.xxx:true}" statistics-enabled="true">
            <locking acquire-timeout="${test.xxx:30000}" concurrency-level="${test.xxx:2000}" isolation="${test.xxx:READ_UNCOMMITTED}" striping="${test.xxx:true}"/>
            <transaction mode="NON_XA" stop-timeout="${test.xxx:60000}" locking="${test.xxx:OPTIMISTIC}"/>
            <eviction max-entries="${test.xxx:20000}" strategy="${test.xxx:LRU}"/>
            <expiration interval="${test.xxx:10000}" lifespan="${tst.xxx:10}" max-idle="${test.xxx:10}"/>
            <remote-store cache="${test.xxx:default}" socket-timeout="${test.xxx:60000}" tcp-no-delay="${test.xxx:true}" fetch-state="${test.xxx:false}" passivation="${test.xxx:false}" preload="${test.xxx:true}" purge="${test.xxx:false}" shared="${test.xxx:false}" singleton="${test.xxx:true}">
                <write-behind flush-lock-timeout="${test.xxx:2}" modification-queue-size="${test.xxx:2048}" shutdown-timeout="${test.xxx:20000}" thread-pool-size="${test.xxx:1}"/>
                <property name="valueSizeEstimate">${test.xxx:value}</property>
                <remote-server outbound-socket-binding="hotrod-server-1"/>
                <remote-server outbound-socket-binding="hotrod-server-2"/>
            </remote-store>
            <indexing index="${test.xxx:NONE}"/>
        </invalidation-cache>
        <replicated-cache name="repl" mode="ASYNC" queue-flush-interval="${test.xxx:10}" queue-size="${test.xxx:1000}" async-marshalling="${test.xxx:false}" statistics-enabled="true">
            <locking acquire-timeout="${test.xxx:30000}" concurrency-level="${test.xxx:2000}" isolation="${test.xxx:SERIALIZABLE}" striping="${test.xxx:true}"/>
            <transaction mode="NON_DURABLE_XA" stop-timeout="${test.xxx:60000}" locking="${test.xxx:OPTIMISTIC}"/>
            <eviction max-entries="${tst.xxx:20000}" strategy="${test.xxx:FIFO}"/>
            <expiration interval="${test.xxx:10000}" lifespan="${test.xxx:10}" max-idle="${test.xxx:10}"/>
            <state-transfer enabled="${test.xxx:true}" timeout="${test.xxx:60000}" chunk-size="${test.xxx:10000}"/>
            <store class="${test.xxx:org.infinispan.configuration.cache.SingleFileStoreConfigurationBuilder}" fetch-state="${test.xxx:true}" passivation="${test.xxx:true}" preload="${test.xxx:false}" purge="${test.xxx:true}" shared="${test.xxx:false}" singleton="${test.xxx:false}">
                <write-behind flush-lock-timeout="${test.xxx:2}" modification-queue-size="${test.xxx:2048}" shutdown-timeout="${test.xxx:20000}" thread-pool-size="${test.xxx:1}"/>
                <property name="location">${test.xxx:location}</property>
            </store>
            <indexing index="${test.xxx:NONE}"/>
        </replicated-cache>
        <distributed-cache name="dist" mode="SYNC" l1-lifespan="${test.xxx:1200000}" owners="${test.xxx:4}" remote-timeout="${test.xxx:35000}" segments="${test.xxx:2}" async-marshalling="${test.xxx:true}" statistics-enabled="true">
            <locking acquire-timeout="${test.xxx:30000}" concurrency-level="${test.xxx:2000}" isolation="${test.xxx:READ_COMMITTED}" striping="${test.xxx:true}"/>
            <transaction mode="FULL_XA" stop-timeout="${test.xxx:60000}" locking="${test.xxx:OPTIMISTIC}"/>
            <eviction max-entries="${test.xxx:20000}" strategy="${test.xxx:UNORDERED}"/>
            <expiration interval="${test.xxx:10000}" lifespan="${test.xxx:10}" max-idle="${test.xxx:10}"/>
            <state-transfer enabled="${test.xxx:true}" timeout="${test.xxx:60000}" chunk-size="${test.xxx:10000}"/>
            <mixed-keyed-jdbc-store datasource="${test.xxx:java:jboss/jdbc/store}" fetch-state="${test.xxx:false}" passivation="${test.xxx:false}" preload="${test.xxx:true}" purge="${test.xxx:false}" shared="${tst.xxx:true}" singleton="${test.xxx:true}">
                <write-behind flush-lock-timeout="${test.xxx:2}" modification-queue-size="${test.xxx:2048}" shutdown-timeout="${test.xxx:20000}" thread-pool-size="${test.xxx:1}"/>
                <string-keyed-table prefix="${test.xxx:ispn_bucket}" batch-size="${tst.xxx:100}" fetch-size="${test.xxx:100}">
                    <id-column name="${test.xxx:id}" type="${test.xxx:VARCHAR}"/>
                    <data-column name="${test.xxx:datum}" type="${test.xxx:BINARY}"/>
                    <timestamp-column name="${test.xxx:version}" type="${test.xxx:BIGINT}"/>
                </string-keyed-table>
                <binary-keyed-table prefix="${test.xxx:ispn_entry}" batch-size="${test.xxx:100}" fetch-size="${test.xxx:100}">
                    <id-column name="${test.xxx:id}" type="${test.xxx:VARCHAR}"/>
                    <data-column name="${test.xxx:datum}" type="${test.xxx:BINARY}"/>
                    <timestamp-column name="${test.xxx:version}" type="${test.xxx:BIGINT}"/>
                </binary-keyed-table>
            </mixed-keyed-jdbc-store>
            <indexing index="${test.xxx:ALL}"/>
        </distributed-cache>
    </cache-container>
</subsystem>
