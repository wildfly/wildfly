platform-mbeans=Provides the management interface for monitoring and management of the Java virtual machine as well as the operating system on which the Java virtual machine is running. Exposes the JDK-provided JMX MBeans in the java.lang, java.nio and java.util.logging JMX domains.
platform-mbeans.type=The platform MBeans, organized by the value of the 'type' property in the MBean's ObjectName.

object-name=String representation the object name of this platform managed object.

class-loading=The management interface for the class loading system of the Java virtual machine.
class-loading.verbose=Whether the verbose output for the class loading system is enabled.
class-loading.total-loaded-class-count=The total number of classes that have been loaded since the Java virtual machine has started execution.
class-loading.loaded-class-count=The number of classes that are currently loaded in the Java virtual machine.
class-loading.unloaded-class-count=The total number of classes unloaded since the Java virtual machine has started execution.

compilation=The management interface for the compilation system of the Java virtual machine
compilation.name=The name of the Just-in-time (JIT) compiler.
compilation.compilation-time-monitoring-supported=Whether the Java virtual machine supports the monitoring of compilation time.
compilation.total-compilation-time=The approximate accumlated elapsed time (in milliseconds) spent in compilation. A Java virtual machine implementation may not support compilation time monitoring. If "compilation-time-monitoring-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".

garbage-collectors=Parent resource for the resources providing the management interface for the garbage collection of the Java virtual machine.
garbage-collectors.name=The GarbageCollectorMXBean platform MBeans, organized by the value of the 'name' property in the MBean's ObjectName.
garbage-collector=The management interface for one of the garbage collectors in the Java virtual machine.
garbage-collector.name=The name representing this garbage collector.
garbage-collector.valid=Whether this this memory manager is valid in the Java virtual machine.
garbage-collector.memory-pool-names=The name of memory pools that this garbage collector manages.
garbage-collector.collection-count=The total number of collections that have occurred.
garbage-collector.collection-time=The approximate accumulated collection elapsed time in milliseconds.

memory=The management interface for the memory system of the Java virtual machine.
memory.verbose=Whether verbose output for the memory system is enabled.
memory.object-pending-finalization-count=The approximate number of objects for which finalization is pending.
memory.heap-memory-usage=The current memory usage of the heap that is used for object allocation.
memory.non-heap-memory-usage=The current memory usage of non-heap memory that is used by the Java virtual machine.
memory.gc=Runs the garbage collector.

memory.usage.init=The amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management.
memory.usage.used=The amount of used memory in bytes.
memory.usage.committed=The amount of memory in bytes that is committed for the Java virtual machine to use.
memory.usage.max=The maximum amount of memory in bytes that can be used for memory management.

memory-managers=Parent resource for the resources providing the management interface for the Java virtual machine's memory managers.
memory-managers.name=The MemoryManagerMXBean platform MBeans, organized by the value of the 'name' property in the MBean's ObjectName.
memory-manager=The management interface for a memory manager. A memory manager manages one or more memory pools of the Java virtual machine.
memory-manager.name=The name representing this memory manager.
memory-manager.valid=Whether this memory manager is valid in the Java virtual machine.
memory-manager.memory-pool-names=The names of the memory pools that this memory manager manages.

memory-pools=Parent resource for the resources providing the management interface for the Java virtual machine's memory pools.
memory-pools.name=The MemoryPoolMXBean platform MBeans, organized by the value of the 'name' property in the MBean's ObjectName.
memory-pool=The management interface for a memory pool. A memory pool represents the memory resource managed by the Java virtual machine and is managed by one or more memory managers.
memory-pool.name=The name representing this memory pool.
memory-pool.type=The type of this memory pool.
memory-pool.valid=Whether this memory pool is valid in the Java virtual machine. A memory pool becomes invalid once the Java virtual machine removes it from the memory system.
memory-pool.usage=An estimate of the memory usage of this memory pool. May be "undefined" if attribute "valid" is "false".
memory-pool.peak-usage=The peak memory usage of this memory pool since the Java virtual machine was started or since the peak was reset. May be "undefined" if attribute "valid" is "false".
memory-pool.memory-manager-names=The names of the memory managers that manage this memory pool.
memory-pool.usage-threshold=The usage threshold value of this memory pool in bytes. A memory pool may not support a usage threshold. If "usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.usage-threshold-exceeded=Whether the memory usage of this memory pool reaches or exceeds its usage threshold value.  A memory pool may not support a usage threshold. If "usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.usage-threshold-count=The number of times that the memory usage has crossed the usage threshold. A memory pool may not support a usage threshold. If "usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.usage-threshold-supported=Whether this memory pool supports usage threshold.
memory-pool.collection-usage-threshold=The collection usage threshold value of this memory pool in bytes. A memory pool may not support a collection usage threshold. If "collection-usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.collection-usage-threshold-exceeded=Whether the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold. A memory pool may not support a collection usage threshold. If "collection-usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.collection-usage-threshold-count=The number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold. A memory pool may not support a collection usage threshold. If "collection-usage-threshold-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
memory-pool.collection-usage=The memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool, or "undefined" if this attribute is not supported.
memory-pool.collection-usage-threshold-supported=Whether this memory pool supports a collection usage threshold.
memory-pool.reset-peak-usage=Resets the peak memory usage statistic of this memory pool to the current memory usage.

operating-system=The management interface for the operating system on which the Java virtual machine is running.
operating-system.name=The operating system name. If a security manager is installed and it does not allow access to system property "os.name", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
operating-system.arch=The operating system architecture. If a security manager is installed and it does not allow access to system property "os.arch", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
operating-system.version=The operating system version. If a security manager is installed and it does not allow access to system property "os.version", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
operating-system.available-processors=The number of processors available to the Java virtual machine.
operating-system.system-load-average=The system load average for the last minute. The load average may not be available on some platforms; if the load average is not available, a negative value is returned.

runtime=The management interface for the runtime system of the Java virtual machine.
runtime.name=The name representing the running Java virtual machine.
runtime.vm-name=The Java virtual machine implementation name. If a security manager is installed and it does not allow access to system property "java.vm.name", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.vm-vendor=The Java virtual machine implementation vendor. If a security manager is installed and it does not allow access to system property "java.vm.vendor", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.vm-version=The Java virtual machine implementation version. If a security manager is installed and it does not allow access to system property "java.vm.version", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.spec-name=The Java virtual machine specification name. If a security manager is installed and it does not allow access to system property "java.vm.specification.name", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.spec-vendor=The Java virtual machine specification vendor. If a security manager is installed and it does not allow access to system property "java.vm.specification.vendor", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.spec-version=The Java virtual machine specification version. If a security manager is installed and it does not allow access to system property "java.vm.specification.version", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.management-spec-version=The version of the specification for the management interface implemented by the running Java virtual machine.
runtime.class-path=The Java class path that is used by the system class loader to search for class files. If a security manager is installed and it does not allow access to system property "java.class.path", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.library-path=The Java library path. If a security manager is installed and it does not allow access to system property "java.library.path", then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.boot-class-path-supported=Whether the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files.
runtime.boot-class-path=The boot class path that is used by the bootstrap class loader to search for class files. If attribute "boot-class-path-supported" is "false" or if a security manager is installed and the caller does not have ManagementPermission("monitor"), then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.input-arguments=The input arguments passed to the Java virtual machine which does not include the arguments to the main method. If a security manager is installed and the caller does not have ManagementPermission("monitor"), then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
runtime.uptime=The uptime of the Java virtual machine in milliseconds.
runtime.start-time=The start time of the Java virtual machine in milliseconds.
runtime.system-properties=A map of names and values of all system properties. If a security manager is installed and its "checkPropertiesAccess" method does not allow access to system properties, then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".

threading=The management interface for the thread system of the Java virtual machine.
threading.thread-count=The current number of live threads including both daemon and non-daemon threads.
threading.peak-thread-count=The peak live thread count since the Java virtual machine started or peak was reset.
threading.total-started-thread-count=The total number of threads created and also started since the Java virtual machine started.
threading.daemon-thread-count=The current number of live daemon threads.
threading.all-thread-ids=All live thread IDs. If a security manager is installed and the caller does not have ManagementPermission("monitor"), then a "read-attribute" operation reading this attribute will fail, and the value for this attribute in the result for the "read-resource" operation will be "undefined".
threading.thread-contention-monitoring-supported=Whether the Java virtual machine supports thread contention monitoring.
threading.thread-contention-monitoring-enabled=Whether thread contention monitoring is enabled.
threading.current-thread-cpu-time=The total CPU time for the current thread in nanoseconds, or -1 if "thread-cpu-time-enabled" is "false". A Java virtual machine implementation may not support CPU time measurement. If "thread-cpu-time-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
threading.current-thread-user-time=The CPU time that the current thread has executed in user mode in nanoseconds, or -1 if "thread-cpu-time-enabled" is "false". A Java virtual machine implementation may not support CPU time measurement. If "thread-cpu-time-supported", is "false" trying to read this attribute via the "read-attribute" operation will result in failure, and the value of this attribute in the result of a "read-resource" operation will be "undefined".
threading.thread-cpu-time-supported=Whether the Java virtual machine implementation supports CPU time measurement for any thread.
threading.current-thread-cpu-time-supported=Whether the Java virtual machine supports CPU time measurement for the current thread.
threading.thread-cpu-time-enabled=Whether thread CPU time measurement is enabled.
threading.object-monitor-usage-supported=Whether the Java virtual machine supports monitoring of object monitor usage.
threading.synchronizer-usage-supported=Whether the Java virtual machine supports monitoring of ownable synchronizer usage.

threading.reset-peak-thread-count=Resets the peak thread count to the current number of live threads.
threading.find-deadlocked-threads=Finds cycles of threads that are in deadlock waiting to acquire object monitors or ownable synchronizers.
threading.find-monitor-deadlocked-threads=Finds cycles of threads that are in deadlock waiting to acquire object monitors.
threading.find-threads.reply=A list of thread ids of deadlocked threads, if any, or "undefined" otherwise.
threading.get-thread-info=Returns the thread info for a thread of the specified id. The stack trace, locked monitors, and locked synchronizers in the returned reply object will be empty.
threading.get-thread-info.reply=Detpyed representation of a java.lang.management.ThreadInfo object for the thread of the given ID; "undefined" if the thread of the given ID is not alive or it does not exist.
threading.get-thread-infos=Returns the thread info for each thread whose ID is in the input list.
threading.get-thread-infos.reply=A list of detyped representations of java.lang.management.ThreadInfo objects, each containing information about a thread whose ID is in the corresponding element of the input list of IDs. An element will be "undefined" if the thread of the given ID is not alive or it does not exist.
threading.get-thread-cpu-time=Returns the total CPU time for a thread of the specified ID in nanoseconds.
threading.get-thread-user-time=Returns the CPU time that a thread of the specified ID has executed in user mode in nanoseconds.
threading.dump-all-threads=Returns the thread info for all live threads with stack trace and synchronization information.
threading.dump-threads.reply=A list of detyped representations of java.lang.management.ThreadInfo objects.

threading.id=The thread ID of the thread. Must be positive.
threading.ids=A list of thread ids.
threading.max-depth=The maximum number of entries in the stack trace to be dumped. Integer.MAX_VALUE could be used to request the entire stack to be dumped.
threading.locked-monitors=Whether the result should include information on locked monitors.
threading.locked-synchronizers=Whether the result should include information on locked ownable synchronizers.

threading.stack.file-name=The name of the source file containing the execution point represented by this stack trace element.
threading.stack.line-number=The line number of the source line containing the execution point represented by this stack trace element.
threading.stack.class-name=The fully qualified name of the class containing the execution point represented by this stack trace element.
threading.stack.method-name=The name of the method containing the execution point represented by this stack trace element.
threading.stack.native-method=Whether the method containing the execution point represented by this stack trace element is a native method.

threading.lock.class-name=The fully qualified name of the class of the lock object.
threading.lock.identity-hash-code=The identity hash code of the lock object returned from the System.identityHashCode(java.lang.Object) method.

threading.monitor.locked-stack-depth=The depth in the stack trace where the object monitor was locked.
threading.monitor.locked-stack-frame=The stack frame that locked the object monitor.

threading.thread-info.thread-id=The ID of the thread.
threading.thread-info.thread-name=The name of the thread.
threading.thread-info.thread-state=The state of the thread.
threading.thread-info.blocked-time=The approximate accumulated elapsed time (in milliseconds) that the thread has blocked to enter or reenter a monitor since thread contention monitoring is enabled, or -1 if thread contention monitoring is not enabled. If the
threading.thread-info.blocked-count=The total number of times that the thread blocked to enter or reenter a monitor.
threading.thread-info.waited-time=The approximate accumulated elapsed time (in milliseconds) that the thread has waited for notification since thread contention monitoring was enabled.
threading.thread-info.waited-count=The total number of times that the thread has waited for notification.
threading.thread-info.lock-info=A detyped representation of the java.lang.management.LockInfo of an object for which the thread is blocked waiting.
threading.thread-info.lock-name=The string representation of an object for which the thread is blocked waiting.
threading.thread-info.lock-owner-id=The ID of the thread which owns the object for which the thread is blocked waiting.
threading.thread-info.lock-owner-name=The name of the thread which owns the object for which the thread is blocked waiting.
threading.thread-info.stack-trace=The stack trace of the thread.
threading.thread-info.suspended=Whether the thread is suspended.
threading.thread-info.in-native=Whether the thread associated is executing native code via the Java Native Interface (JNI).
threading.thread-info.locked-monitors=A list of detyped representations java.lang.management.MonitorInfo objects, each of which represents an object monitor currently locked by the thread.
threading.thread-info.locked-synchronizers=A list of detyped representations java.lang.management.LockInfo objects, each of which represents an ownable synchronizer currently locked by the thread.

buffer-pools=Parent resource for the resources providing the management interface for the Java virtual machine's buffer pools.
buffer-pools.name=The BufferPoolMXBean platform MBeans, organized by the value of the 'name' property in the MBean's ObjectName.
buffer-pool=The management interface for a buffer pool, for example a pool of direct or mapped buffers.
buffer-pool.count=An estimate of the number of buffers in the pool.
buffer-pool.memory-used=An estimate of the memory that the Java virtual machine is using for this buffer pool in bytes, or -1 if an estimate of the memory usage is not available.
buffer-pool.total-capacity=An estimate of the total capacity of the buffers in this pool. A buffer's capacity is the number of elements it contains and the value of this attribute is an estimate of the total capacity of buffers in the pool in bytes.
buffer-pool.name=The name representing this buffer pool.

logging=The management interface for the platform logging facility.
logging.logger-names=The list of the currently registered logger names.
logging.get-logger-level=Gets the name of the log level associated with the specified logger. If the specified logger does not exist, "undefined" is returned.
logging.set-logger-level=Sets the specified logger to the specified new level. If the level-name is not "undefined", the level of the specified logger is set to the parsed Level matching the level-name. If the level-name is "undefined", the level of the specified logger is set to null and the effective level of the logger is inherited from its nearest ancestor with a specific (non-null) level value.
logging.get-parent-logger-name=Returns the name of the parent for the specified logger. If the specified logger does not exist, "undefined" is returned. If the specified logger is the root Logger in the namespace, the result will be an empty string.
logging.logger-name=The name of a Logger.
logging.level-name=The name of the level to set on the specified logger, or "undefined" if setting the level to inherit from its nearest ancestor.
