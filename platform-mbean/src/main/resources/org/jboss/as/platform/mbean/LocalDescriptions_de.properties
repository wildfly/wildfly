platform-mbeans=Stellt das Management-Interface zur \u00DCberwachung und Verwaltung der Java Virtual Machine und des Betriebssystems, auf dem die Java Virtual Machine l\u00E4uft, bereit. Legt die von JDK bereitgestellten JMX MBeans in den java.lang, java.nio und java.util.logging JMX Domains offen.
platform-mbeans.type=Die Plattform-MBeans, geordnet nach dem Wert der 'type' Eigenschaft im ObjectName des MBeans.
object-name=String-Darstellung des Objektnamens dieses Platftorm-verwalteten Objekts.
class-loading=Das Management-Interface f\u00FCr das Klassenladesystem der Java Virtual Machine.
class-loading.verbose=Ob ausf\u00FChrliche Ausgabe f\u00FCr das Klassenladesystem aktiviert ist.
class-loading.total-loaded-class-count=Die gesamte Anzahl von Klassen, die geladen wurden, seit die Java Virtual Machine gestartet wurde.
class-loading.loaded-class-count=Die Anzahl von Klassen, die derzeit in der Java Virtual Machine geladen sind.
class-loading.unloaded-class-count=Die gesamte Anzahl von Klassen, die entladen wurden, seit die Java Virtual Machine gestartet wurde.
compilation=Das Management-Interface f\u00FCr das Kompilierungssystem der Java Virtual Machine
compilation.name=Der Name des Just-in-time (JIT) Compilers.
compilation.compilation-time-monitoring-supported=Ob die Java Virtual Machine die \u00DCberwachung der Kompilierungszeit unterst\u00FCtzt.
compilation.total-compilation-time=Die ungef\u00E4hre kumulierte Zeit (in Millisekunden), die zur Kompilierung aufgewendet wurde. Eine Java Virtual Machine Implementierung unterst\u00FCtzt ggf. nicht diese \u00DCberwachung der Kompilierungszeit. Falls "compilation-time-monitoring-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
garbage-collectors=\u00DCbergeordnete Ressource jener Ressourcen, die das Management-Interface f\u00FCr die Bereinigung der Java Virtual Machine bereitstellen.
garbage-collectors.name=Die GarbageCollectorMXBean Plattform-MBeans, geordnet nach dem Wert der 'name' Eigenschaft im ObjectName des MBeans.
garbage-collector=Das Management-Interface f\u00FCr einen der Garbage Collectors der Java Virtual Machine.
garbage-collector.name=Der Name, der diesen Garbage Collector repr\u00E4sentiert.
garbage-collector.valid=Ob dieser Speicher-Manager in der Java Virtual Machine g\u00FCltig ist.
garbage-collector.memory-pool-names=Der Name des Speicher-Pools, den dieser Garbage Collector verwaltet.
garbage-collector.collection-count=Die Gesamtanzahl vorgenommener Bereinigungen.
garbage-collector.collection-time=Die ungef\u00E4hre Gesamtzeit in Millisekunden, die zur Bereinigung aufgewendet wurde.
memory=Das Management-Interface f\u00FCr das Speichersystem der Java Virtual Machine.
memory.verbose=Ob ausf\u00FChrliche Ausgabe f\u00FCr das Speichersystem aktiviert ist.
memory.object-pending-finalization-count=Die ungef\u00E4hre Anzahl von Objekten, deren Finalisierung aussteht.
memory.heap-memory-usage=Der derzeitige Speicherverbrauch des Heap, der zur Objektzuweisung verwendet wird.
memory.non-heap-memory-usage=Der derzeitige Speicherverbrauch des nicht-Heap Speichers, der von der Java Virtual Machine verwendet wird.
memory.gc=F\u00FChrt den Garbage Collector aus.
memory.usage.init=Die Menge an Speicher in Bytes, den die Java Virtual Machine zu Beginn vom Betriebssystem zur Speicherverwaltung anfordert.
memory.usage.used=Die Menge an verbrauchtem Speicher in Bytes.
memory.usage.committed=Die Menge an Speicher in Bytes, die der Java Virtual Machine zur Verwendung zugewiesen ist.
memory.usage.max=Die maximale Menge an Speicher in Bytes, die zur Speicherverwaltung verwendet werden kann.
memory-managers=\u00DCbergeordnete Ressource jener Ressourcen, die das Management-Interface f\u00FCr die Speicher-Manager der Java Virtual Machine bereitstellen.
memory-managers.name=Die MemoryManagerMXBean Plattform-MBeans, geordnet nach dem Wert der 'name' Eigenschaft im ObjectName des MBeans.
memory-manager=Das Management-Interface f\u00FCr einen Speicher-Manager. Ein Speicher-Manager verwaltet einen oder mehrere Speicher-Pools der Java Virtual Machine.
memory-manager.name=Der Name, der diesen Speicher-Manager repr\u00E4sentiert.
memory-manager.valid=Ob dieser Speicher-Manager in der Java Virtual Machine g\u00FCltig ist.
memory-manager.memory-pool-names=Die Namen der Speicher-Pools, die dieser Speicher-Manager verwaltet.
memory-pools=\u00DCbergeordnete Ressource jener Ressourcen, die das Management-Interface f\u00FCr die Speicher-Pools der Java Virtual Machine bereitstellen.
memory-pools.name=Die MemoryPoolMXBean Plattform-MBeans, geordnet nach dem Wert der 'name' Eigenschaft im ObjectName des MBeans.
memory-pool=Das Management-Interface f\u00FCr einen Speicher-Pool. Ein Speicher-Pool repr\u00E4sentiert die Speicherressource, die von der Java Virtual Machine verwaltet wird, und wird von einem oder mehreren Speicher-Managern verwaltet.
memory-pool.name=Der Name, der diesen Speicher-Pool repr\u00E4sentiert.
memory-pool.type=Der Typ dieses Speicher-Pools.
memory-pool.valid=Ob dieser Speicher-Pool in der Java Virtual Machine g\u00FCltig ist. Ein Speicher-Pool wird ung\u00FCltig, sobald die Java Virtual Machine ihn von ihrem Speichersystem entfernt.
memory-pool.usage=Eine Sch\u00E4tzung des Speicherverbrauchs dieses Speicher-Pools. Kann "undefined" sein, falls das Attribut "valid" den Wert "false" hat.
memory-pool.peak-usage=Der h\u00F6chste Speicherverbrauch dieses Speicher-Pools, seit die Java Virtual Machine gestartet wurde oder seit die Statistiken zur\u00FCckgesetzt wurden. Kann "undefined" sein, falls das Attribut "valid" den Wert "false" hat.
memory-pool.memory-manager-names=Die Namen der Speicher-Manager, die diesen Speicher-Pool verwalten.
memory-pool.usage-threshold=Der Verbrauchsgrenzwert f\u00FCr diesen Speicher-Pool in Bytes. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Verbrauchsgrenzwert. Falls "usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.usage-threshold-exceeded=Ob der Speicherverbrauch dieses Speicher-Pools seinen Verbrauchsgrenzwert erreicht oder \u00FCberschreitet. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Verbrauchsgrenzwert. Falls "usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.usage-threshold-count=Wie oft der Speicherverbrauch den Verbrauchsgrenzwert \u00FCberschritten hat. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Verbrauchsgrenzwert. Falls "usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.usage-threshold-supported=Ob dieser Speicher-Pool einen Verbrauchsgrenzwert unterst\u00FCtzt.
memory-pool.collection-usage-threshold=Der Collection-Verbrauchsgrenzwert f\u00FCr diesen Speicher-Pool in Bytes. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Collection-Verbrauchsgrenzwert. Falls "collection-usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.collection-usage-threshold-exceeded=Ob der Speicherverbrauch dieses Speicher-Pools nach der j\u00FCngsten Collection, auf welche die Java Virtual Machine Rechenzeit verwendet hat, seinen Verbrauchsgrenzwert erreicht oder \u00FCberschritten hat. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Collection-Verbrauchsgrenzwert. Falls "collection-usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.collection-usage-threshold-count=Wie oft die Java Virtual Machine festgestellt hat, dass der Verbrauchsgrenzwert erreicht oder \u00FCberschritten hat. Ein Speicher-Pool unterst\u00FCtzt unter Umst\u00E4nden keinen Collection-Verbrauchsgrenzwert. Falls "collection-usage-threshold-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
memory-pool.collection-usage=Der Speicherverbrauch, nachdem die Java Virtual Machine k\u00FCrzlich Rechenzeit aufgewendet hat, um unbenutzte Objekte in diesem Speicher-Pool wiederzuverwenden, oder "undefined", falls dieses Attribut nicht unterst\u00FCtzt ist.
memory-pool.collection-usage-threshold-supported=Ob dieser Speicher-Pool einen Collection-Verbrauchsgrenzwert unterst\u00FCtzt.
memory-pool.reset-peak-usage=Setzt die Statistiken zum h\u00F6chsten Speicherverbrauch von diesem Speicher-Pool zur\u00FCck auf den derzeitigen Speicherverbrauch.
operating-system=Das Management-Interface f\u00FCr das Betriebssystem, auf dem die Java Virtual Machine l\u00E4uft.
operating-system.name=Der Betriebssystemname. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "os.name" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
operating-system.arch=Der Betriebssystemarchitektur. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "os.arch" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
operating-system.version=Die Betriebssystemversion. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "os.version" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
operating-system.available-processors=Die Anzahl von Prozessoren, die der Java Virtual Machine zur Verf\u00FCgung stehen.
operating-system.system-load-average=Die durchschnittliche Systemlast f\u00FCr die vergangene Minute. Die durchschnittliche Last steht unter Umst\u00E4nden auf einigen Plattformen nicht zur Verf\u00FCgung; falls die durchschnittliche Last nicht verf\u00FCgbar ist, wird ein negativer Wert ausgegeben.
runtime=Das Management-Interface f\u00FCr das Laufzeitsystem der Java Virtual Machine.
runtime.name=Der Name, der die laufende Java Virtual Machine repr\u00E4sentiert.
runtime.vm-name=Der Implementierungsname der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.name" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.vm-vendor=Der Implementierungsanbieter der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.vendor" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.vm-version=Die Implementierungsversion der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.version" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.spec-name=Der Spezifikationsname der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.specification.name" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.spec-vendor=Der Spezifikationsanbieter der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.specification.vendor" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.spec-version=Die Spezifikationsversion der Java Virtual Machine. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.vm.specification.version" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.management-spec-version=Die Version der Spezifikation f\u00FCr das Management-Interface, das von der laufenden Java Virtual Machine implementiert ist.
runtime.class-path=Der Java-Klassenpfad, der vom System-Klassenlader zur Suche nach Klassendateien verwendet wird. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.class.path" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.library-path=Der Java-Bibliotheksname. Falls ein Sicherheits-Manager installiert ist und dieser den Zugriff auf die Systemeigenschaft "java.library.path" verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.boot-class-path-supported=Ob die Java Virtual Machine den Boot-Klassenpfad-Mechanismus unterst\u00FCtzt, der vom Bootstrap-Klassenlader zur Suche von Klassendateien verwendet wird.
runtime.boot-class-path=Der Boot-Klassenpfad, der vom Bootstrap-Klassenlader zur Suche nach Klassendateien verwendet wird. Falls das Attribut "boot-class-path-supported" auf "false" gesetzt ist oder falls ein Sicherheits-Manager installiert ist und der Aufrufer nicht die Berechtigung ManagementPermission("monitor") hat, so wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.input-arguments=Die an die Java Virtual Machine \u00FCbergebenen Eingabeparameter,  zu denen jedoch nicht die Parameter der Hauptmethode geh\u00F6ren. Falls ein Sicherheits-Manager installiert ist und der Aufrufer nicht die Berechtigung ManagementPermission("monitor") hat, so wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
runtime.uptime=Die Betriebszeit der Java Virtual Machine in Millisekunden.
runtime.start-time=Die Startzeit der Java Virtual Machine in Millisekunden.
runtime.system-properties=Eine Zuordnung von Namen und Werten aller Systemeigenschaften. Falls ein Sicherheits-Manager installiert ist und seine "checkPropertiesAccess" Methode den Zugriff auf Systemeigenschaften verweigert, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
threading=Das Management-Interface f\u00FCr das Thread-System der Java Virtual Machine.
threading.thread-count=Die aktuelle Anzahl von aktiven Threads, einschlie\u00DFlich Daemon- und nicht-Daemon-Threads.
threading.peak-thread-count=Die h\u00F6chste Anzahl aktiver Threads, seit die Java Virtual Machine gestartet wurde oder seit die Statistiken zur\u00FCckgesetzt wurden.
threading.total-started-thread-count=Die gesamte Anzahl von Threads, die seit dem Start der Java Virtual Machine erstellt und auch gestartet wurden.
threading.daemon-thread-count=Die aktuelle Anzahl aktiver Daemon-Threads.
threading.all-thread-ids=Alle aktiven Thread-IDs. Falls ein Sicherheits-Manager installiert ist und der Aufrufer nicht die Berechtigung ManagementPermission("monitor") hat, dieser, wird eine "read-attribute" Operation auf diesem Attribut fehlschlagen und der Wert dieses Attributs im Ergebnis der "read-resource" Operation wird "undefined" sein.
threading.thread-contention-monitoring-supported=Ob die Java Virtual Machine die \u00DCberwachung von Thread-Konflikten unterst\u00FCtzt.
threading.thread-contention-monitoring-enabled=Ob die \u00DCberwachtung von Thread-Konflikten aktiviert ist.
threading.current-thread-cpu-time=Die gesamte CPU-Zeit f\u00FCr den aktuellen Thread in Nanosekunden, oder -1, falls "thread-cpu-time-enabled" auf "false" gesetzt ist. Eine Java Virtual Machine Implementierung unterst\u00FCtzt unter Umst\u00E4nden keine Messung der CPU-Zeit. Falls "thread-cpu-time-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
threading.current-thread-user-time=Die CPU-Zeit in Nanosekunden, die der aktuelle Thread im Benutzermodus ausgef\u00FChrt wurde, oder -1, falls "thread-cpu-time-enabled" auf "false" gesetzt ist. Eine Java Virtual Machine Implementierung unterst\u00FCtzt unter Umst\u00E4nden keine Messung der CPU-Zeit. Falls "thread-cpu-time-supported" auf "false" gesetzt ist, wird der Versuch, dieses Attribut mittels "read-attribute" Operation zu lesen, fehlschlagen, und der Wert dieses Attributs im Ergebnis einer "read-resource" Operation wird "undefined" sein.
threading.thread-cpu-time-supported=Ob die Java Virtual Machine Implementierung die Messung der CPU-Zeit f\u00FCr Threads unterst\u00FCtzt.
threading.current-thread-cpu-time-supported=Ob die Java Virtual Machine die Messung der CPU-Zeit f\u00FCr den aktuellen Threads unterst\u00FCtzt.
threading.thread-cpu-time-enabled=Ob die Messung der CPU-Zeit f\u00FCr Threads aktiviert ist.
threading.object-monitor-usage-supported=Ob die Java Virtual Machine die \u00DCberwachung des Objekt\u00FCberwachungsgebrauchs unterst\u00FCtzt.
threading.synchronizer-usage-supported=Ob die Java Virtual Machine die \u00DCberwachung eigenen Synchronizer-Gebrauchs unterst\u00FCtzt.
threading.reset-peak-thread-count=Setzt die Statistiken zur h\u00F6chsten Thread-Anzahl zur\u00FCck auf die derzeitige Anzahl aktiver Threads.
threading.find-deadlocked-threads=Findet Threadzyklen, die sich in einer Deadlock-Situation befinden und auf den Erhalt von Objekt\u00FCberwachungen oder eigenen Synchronizern warten.
threading.find-monitor-deadlocked-threads=Findet Threadzyklen, die sich in einer Deadlock-Situation befinden und auf den Erhalt von Objekt\u00FCberwachungen warten.
threading.find-threads.reply=Eine Liste von Thread-ids von Threads, die sich in einer Deadlock-Situation befinden oder andernfalls "undefiniert" sind.
threading.get-thread-info=Gibt die Thread-Info f\u00FCr einen Thread der festgelegten id wieder. Stack Trace, gesperrte Monitore und gesperrte Synchronizer im wiedergegebenen Antwortobjekt sind leer.
threading.get-thread-info.reply=Enttypisierte Darstellung eines java.lang.management.ThreadInfo Objekts des Threads der angegebenen ID; "undefined", falls der Thread der angegebenen ID nicht aktiv ist oder nicht existiert.
threading.get-thread-infos=Gibt die Thread-Informationen f\u00FCr jeden Thread aus, dessen ID in der Eingabeliste aufgef\u00FChrt ist.
threading.get-thread-infos.reply=Eine Liste mit enttypisierten Darstellungen von java.lang.management.ThreadInfo Objekten; von denen jede Informationen \u00FCber einen Thread enth\u00E4lt, dessen ID im entsprechenden Element der Eingabeliste mit IDs erscheint. Ein Element ist "undefined", falls der Thread der angegebenen ID nicht aktiv ist oder nicht existiert.
threading.get-thread-cpu-time=Gibt die gesamte CPU-Zeit f\u00FCr einen Thread mit angegebener ID in Nanosekunden aus.
threading.get-thread-user-time=Gibt die CPU-Zeit in Nanosekunden aus, die ein Thread mit angegebener ID in Benutzermodus ausgef\u00FChrt wurde.
threading.dump-all-threads=Gibt die Thread-Informationen f\u00FCr alle aktiven Threads mit Stack Trace und Synchronisationsinformationen aus.
threading.dump-threads.reply=Eine Liste von enttypisierten Darstellungen von java.lang.management.ThreadInfo Objekten.
threading.id=Die Thread-ID des Threads. Muss positiv sein.
threading.ids=Eine Liste von Thread-IDs.
threading.max-depth=Die maximale Anzahl auszulesender Eintr\u00E4ge im Stacktrace. Mithilfe von Integer.MAX_VALUE kann auch das Auslesen des gesamten Stacks angefordert werden.
threading.locked-monitors=Ob das Ergebnis Informationen zu gesperrten Monitoren enthalten soll.
threading.locked-synchronizers=Ob das Ergebnis Informationen zu gesperrten eigenen Synchronizern enthalten soll.
threading.stack.file-name=Der Name der Quelldatei, die den von diesem Stacktrace-Element repr\u00E4sentierten Ausf\u00FChrungspunkt enth\u00E4lt.
threading.stack.line-number=Die Zeilennummer der Quelldatei, die den von diesem Stacktrace-Element repr\u00E4sentierten Ausf\u00FChrungspunkt enth\u00E4lt.
threading.stack.class-name=Der vollqualifizierte Name der Klasse, die den von diesem Stacktrace-Element repr\u00E4sentierten Ausf\u00FChrungspunkt enth\u00E4lt.
threading.stack.method-name=Der Name der Methode, die den von diesem Stacktrace-Element repr\u00E4sentierten Ausf\u00FChrungspunkt enth\u00E4lt.
threading.stack.native-method=Ob die Methode, die den von diesem Stacktrace-Element repr\u00E4sentierten Ausf\u00FChrungspunkt enth\u00E4lt, eine native Methode ist.
threading.lock.class-name=Der vollqualifizierte Name der Klasse des Sperrobjekts.
threading.lock.identity-hash-code=Der Identit\u00E4ts-Hashcode des Sperrobjekts, das von der System.identityHashCode(java.lang.Object) Methode zur\u00FCckgegeben wurde.
threading.monitor.locked-stack-depth=Die Tiefe des Stacktrace, wo die Objekt\u00FCberwachung gesperrt wurde.
threading.monitor.locked-stack-frame=Der Stackframe, der die Objekt\u00FCberwachung gesperrt hat.
threading.thread-info.thread-id=Die ID des Threads.
threading.thread-info.thread-name=Der Name des Threads.
threading.thread-info.thread-state=Der Status des Threads.
threading.thread-info.blocked-time=Die ungef\u00E4hre Gesamtzeit (in Millisekunden), die der Thread eine \u00DCberwachung gesperrt hat, seit die \u00DCberwachung von Thread-Konflikten aktiviert wurde oder -1, falls die \u00DCberwachung von Thread-Konflikten nicht aktiviert wurde.
threading.thread-info.blocked-count=Wie oft der Thread insgesamt die \u00DCberwachung gesperrt hat.
threading.thread-info.waited-time=Die ungef\u00E4hre Gesamtzeit in Millisekunden, die der Thread auf Benachrichtigung gewartet hat, seit die \u00DCberwachung von Thread-Konflikten aktiviert wurde.
threading.thread-info.waited-count=Wie oft der Thread insgesamt auf  Benachrichtigung gewartet hat.
threading.thread-info.lock-info=Eine enttypisierte Darstellung eines java.lang.management.LockInfo Objekts eines Objekts, f\u00FCr das der Thread gesperrt ist, wartend.
threading.thread-info.lock-name=Die String-Darstellung eines Objekts, f\u00FCr das der Thread gesperrt ist, wartend.
threading.thread-info.lock-owner-id=Die ID des Threads, der Eigent\u00FCmer des Objekts ist, f\u00FCr das der Thread gesperrt ist, wartend.
threading.thread-info.lock-owner-name=Die Name des Threads, der Eigent\u00FCmer des Objekts ist, f\u00FCr das der Thread gesperrt ist, wartend.
threading.thread-info.stack-trace=Der Stacktrace des Threads.
threading.thread-info.suspended=Ob der Thread angehalten ist.
threading.thread-info.in-native=Ob der zugeh\u00F6rige Thread nativen Code mittels Java Native Interface (JNI) ausf\u00FChrt.
threading.thread-info.locked-monitors=Eine Liste enttypisierter Darstellungen eines java.lang.management.MonitorInfo Objekts, von denen jedes eineObjekt\u00FCberwachung repr\u00E4sentiert, die derzeit vom Thread gesperrt ist. 
threading.thread-info.locked-synchronizers=Eine Liste enttypisierter Darstellungen eines java.lang.management.LockInfo Objekts, von denen jedes einen eigenen Synchronizer repr\u00E4sentiert, der derzeit vom Thread gesperrt ist. 
buffer-pools=\u00DCbergeordnete Ressource jener Ressourcen, die das Management-Interface f\u00FCr die Puffer-Pools der Java Virtual Machine bereitstellen.
buffer-pools.name=Die BufferPoolMXBean Plattform-MBeans, geordnet nach dem Wert der 'name' Eigenschaft im ObjectName des MBeans.
buffer-pool=Das Management-Interface f\u00FCr einen Puffer-Pool, z.B. einen Pool mit direkten oder gemappten Puffern.
buffer-pool.count=Die gesch\u00E4tzte Anzahl von Puffern im Pool.
buffer-pool.memory-used=Der gesch\u00E4tzte Speicher, den die Java Virtual Machine f\u00FCr diesen Puffer-Pool verwendet in Bytes, oder -1, falls eine Sch\u00E4tzung des Speicherverbrauchs nicht verf\u00FCgbar ist.
buffer-pool.total-capacity=Die gesch\u00E4tzte gesamte Kapazit\u00E4t der Puffers in diesem Pool. Die Kapazit\u00E4t eines Puffers ist die Anzahl der Elemente, die er enth\u00E4lt, und der Wert dieses Attributs ist eine Sch\u00E4tzung der gesamten Kapazit\u00E4t der Puffer im Pool in Bytes.
buffer-pool.name=Der Name, der diesen Puffer-Pool repr\u00E4sentiert.
logging=Das Management-Interface f\u00FCr die Plattform-Protokollierungs-Facility.
logging.logger-names=Die Liste der derzeit registrierten Logger-Namen.
logging.get-logger-level=Ruft den Namen der Protokollierungsebene des spezifizierten Loggers ab. Falls der spezifizierte Logger nicht existiert, wird "undefined ausgegeben.
logging.set-logger-level=Setzt den spezifizierten Logger auf die spezifizierte neue Ebene. Falls der Ebenenname nicht "undefined" ist, wird die Ebene des spezifizierten Loggers auf die analysierte Ebene gesetzt, die dem Ebenennamen entspricht. Falls der Ebenenname "undefined" ist, wird die Ebene des spezifizierten Loggers auf null gesetzt und die effektive Ebene des Loggers wird vom n\u00E4chsten, \u00FCbergeordneten Logger mit einem nicht-null Ebenenwert geerbt.
logging.get-parent-logger-name=Gibt den Namen des \u00FCbergeordneten Loggers f\u00FCr den spezifizierten Logger aus. Falls der spezifizierte Logger nicht existiert, wird "undefined" ausgegeben. Falls der spezifizierte Logger der Root-Logger in dem Namensraum ist, ist das Ergebnis ein leerer String.
logging.logger-name=Der Name eines Loggers.
logging.level-name=Der Name der Ebene, auf die der spezifizierte Logger zu setzen ist, oder "undefined", falls die Ebene vom n\u00E4chsten, \u00FCbergeordneten Logger geerbt wird.
