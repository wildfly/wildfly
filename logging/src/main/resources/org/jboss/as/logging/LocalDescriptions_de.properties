logging=Die Konfiguration des Protokollierungs-Untersystems.
logging.add=F\u00FCgt das Protokollierungs-Untersystem hinzu.
logging.remove=Entfernt das Protokollierungs-Untersystem.
root.logger=Definiert den root-Logger f\u00FCr diesen Protokollkontext.
root.logger.set=Einstellung des root-Loggers.
root.logger.remove=Entfernung des root-Loggers.
root.logger.change-level=\u00C4nderung der root-Logger-Ebene.
root.logger.assign-handler=Dem root-Logger einen Handler zuordnen.
root.logger.unassign-handler=Die Zurodnung eines root-Logger zu einen Handler l\u00F6schen.
logger=Definiert eine Logger-Kategorie.
logger.add=Hinzuf\u00FCgung einer neuen Logger-Kategorie.
logger.remove=Entfernung einer bestehenden Logger-Kategorie.
logger.level=Eine Protokollebene, die festlegt, welche Nachrichtenebenen von diesem Logger protokolliert werden. Nachrichtenebenen unter diesem Wert werden verworfen.
logger.handler=Der Logging-Handler.
logger.handlers=Die mit diesem Logger assoziierten Handler. 
logger.use-parent-handlers=Legt fest, ob dieser Logger seine Ausgabe an den \u00FCbergeordneten Logger senden soll.
logger.category=Legt die Kategorie f\u00FCr den Logger fest.
logger.change-level=\u00C4nderung der Protokollierungsebene f\u00FCr eine Logger-Kategorie
logger.assign-handler=Dem Logger einen Handler zuordnen.
logger.unassign-handler=Die Zurodnung eines Loggers zu einen Handler l\u00F6schen.
handler=Der Logging-Handler.
handler.add=Hinzuf\u00FCgung eines neuen Logging-Handlers.
handler.remove=Entfernung eines bestehenden Logging-Handlers.
handler.autoflush=Automatische Bereinigung nach jedem Schreibvorgang.
handler.level=Eine Protokollebene, die festlegt, welche Nachrichtenebenen hiervon protokolliert werden. Nachrichtenebenen unter diesem Wert werden verworfen.
handler.encoding=Die von diesem Handler verwendete Zeichenverschl\u00FCsselung.
handler.filter=Definiert einen einfachen Filtertyp.
handler.filter.all=Ein Filter, der sich aus einer Kette mehrerer Filter zusammensetzt.  Falls einer der Filter die Protokollnachricht als nicht protokollierbar ansieht, so wird die Nachricht nicht protokolliert und nachfolgende Filter werden nicht gepr\u00FCft.
handler.filter.any=Ein Filter, der sich aus einer Kette mehrerer Filter zusammensetzt.  Falls einer der Filter die Protokollnachricht als  protokollierbar ansieht, so wird die Nachricht protokolliert und nachfolgende Filter werden gepr\u00FCft.
handler.filter.accept=Akzeptiert alle Protokollnachrichten.
handler.filter.change-level=Ein Filter, der den Protokolleintrag mit einer neuen Ebene bearbeitet, wenn der verschachtelte Filter 'true' f\u00FCr diesen Eintrag evaluiert.
handler.filter.deny=Verbietet alle Protokollnachrichten.
handler.filter.level=Ein Filter, der Nachrichten mit der der festgelegten Ebene ausschlie\u00DFt.
handler.filter.level-range=Ein Filter, der nur Nachrichten protokolliert, die in einen bestimmten Bereich fallen.
handler.filter.level-range.min-level=Die Mindestebene (am wenigsten streng), inklusive.
handler.filter.level-range.min-inclusive='True', wenn der min-level-Wert inklusive, 'false', wenn er exklusive ist.
handler.filter.level-range.max-level=Die H\u00F6chstebene (am strengsten), inklusive.
handler.filter.level-range.max-inclusive='True', wenn der max-level-Wert inklusive, 'false', wenn er exklusive ist.
handler.filter.match=Ein auf regul\u00E4ren Ausdr\u00FCcken basierender Filter. Verwendet zum Ausschluss von Protokolleintr\u00E4gen, die mit dem Ausdruck \u00FCbereinstimmen oder nicht \u00FCbereinstimmen. Der regul\u00E4re Ausdruckl wird gegen die rohe (unformattierte) Nachricht gepr\u00FCft.
handler.filter.not=Ein Filter, der den verschachtelten Filter invertiert.
handler.filter.replace=Ein Filter, der eine Textsubstitution an der Nachricht vornimmt, wenn der verschachtelte Filter \u00FCbereinstimmt.
handler.filter.replace.pattern=Das Muster zur \u00DCbereinstimmung
handler.filter.replace.replacement=Der String-Ersatz
handler.filter.replace.replace-all='True', wenn alle Instanzen ersetzt werden sollen; 'false', wenn es sich nur um die erste Instanz handelt
handler.formatter=Definiert einen Formattierer.
handler.name=Der Handler-Name.
handler.type=Der Handler-Typ.
handler.enable=Aktivierung eines Logging-Handlers.
handler.disable=Deaktivierung eines Logging-Handlers.
handler.change-level=\u00C4nderung der Protokollierungsebene f\u00FCr einen Handler.
handler.change-formatter=Den Formattierer f\u00FCr einen Handler \u00E4ndern.
handler.change-file=Die Datei f\u00FCr einen Handler \u00E4ndern.
handler.properties=Definiert die f\u00FCr den Logging-Handler verwendeten Properties. Alle Properties m\u00FCssen \u00FCber eine Setter-Methode zug\u00E4nglich sein.
handler.properties.name=Definiert den Namen der einzustellenden Property.
handler.properties.value=Definiert den Wert der Property.
async.handler=Definiert einen Handler, der in einem asynchronen Thread in die Unter-Handler  schreibt. Wird f\u00FCr Handler verwendet, die eine ma\u00DFgebliche Menge an Verz\u00F6gerung mit sich bringen.
async.queue-length=Die L\u00E4nge der Warteschlange vor der R\u00E4umung von Schreibvorg\u00E4ngen. 
async.overflow-action=Legen Sie fest, was bei einem \u00DCberlauf unternommen werden soll. Die g\u00FCltigen Optionen sind 'block' und 'discard'
async.handler.add=Hinzuf\u00FCgung eines neuen ASYNC-Handlers.
async.handler.update=Aktualisierung der Properties eines bestehenden ASYNC-Handlers.
async.handler.subhandlers=Die mit diesem ASYNC-Handler assoziierten Handler. 
async.handler.handler=Der mit diesem ASYNC-Handler assoziierte Sub-Handler. 
async.handler.assign-subhandler=Diesem ASYNC-Handler einen Sub-Handler zuordnen. 
async.handler.unassign-subhandler=Die Zurodnung eines Sub-Handler zu einem ASYNC-Handler l\u00F6schen.
console.handler=Definiert einen Handler, der in die Konsole schreibt.
console.handler.target=Definiert das Ziel des Konsolen-Handlers. Der Wert kann entweder SYSTEM_OUT oder SYSTEM_ERR sein.
console.handler.add=Hinzuf\u00FCgung eines neuen Konsolen-Handlers.
console.handler.update=Aktualisierung der Properties eines bestehenden Konsolen-Handlers.
file.handler=Definiert einen Handler, der in eine Datei schreibt. 
file.handler.file=Die Dateibeschreibung bestehend aus dem Pfad und optional relativ zum Pfad.
file.handler.path=Der Dateisystem-Pfad. 
file.handler.relative-to=Der Name eines anderen zuvor benannten Pfads oder eines der vom System bereitgestellten Standardpfade. Falls 'relative-to' geliefert wird, so wird der Wert des 'path'-Attributs als relativ zum von diesem Attribute festgelegten Pfad behandelt. Die vom System bereitgestellten Standardpfade beinhalten\:<ul><li>jboss.home - das root-Verzeichnis der JBoss AS Distribution</li><li>user.home - das Heimverzeichnis des Nutzers</li><li>user.dir - das aktuelle Arbeitsverzeichnis des Nutzers</li><li>java.home - java Installationsverzeichnis</li><li>jboss.server.base.dir - root-Verzeichnis f\u00FCr eine einzelne Serverinstanz</li><li>jboss.server.data.dir - Verzeichnis, das der Server als Dateispeicher persistenter Daten verwendet</li><li>jboss.server.log.dir - Verzeichnis, das der Server als Protokolldateispeicher verwendet</li><li>jboss.server.tmp.dir - Verzeichnis, das der Server als Speicher f\u00FCr tempor\u00E4re Dateien verwendet</li><li>jboss.domain.servers.dir - Verzeichnis unter dem ein Host-Controller den Arbeitsbereich f\u00FCr einzelne Serverinstanzen erstellt</li></ul>
file.handler.append=Legt fest, ob eine Anh\u00E4ngung an die Zieldatei erfolgen soll.
file.handler.add=Hinzuf\u00FCgung eines neuen Datei-Handlers.
file.handler.update=Aktualisierung der Properties eines bestehenden Datei-Handlers.
periodic.handler=Definiert einen Handler, der in eine Datei schreibt, wobei das Protokoll nach einer vom Suffix-String abgeleiteten Zeitdauer rotiert wird, einem Format, das vom  java.text.SimpleDateFormat verstanden werden sollte.
periodic.handler.suffix=Setzt den Suffix-String.  Der String ist in einem Format, das vom java.text.SimpleDateFormat verstanden werden kann. Der Zeitraum der Rotation wird basierend auf den Suffix automatisch kalkuliert.
periodic.handler.add=Hinzuf\u00FCgung eines neuen, periodisch rotierenden Datei-Handlers.
periodic.handler.update=Aktualisierung der Properties eines bestehenden, periodisch rotierenden Datei-Handlers.
size.periodic.handler=Definiert einen Handler, der in eine Datei schreibt, wobei das Protokoll rotiert wird, nachdem die Gr\u00F6\u00DFe der Datei einen bestimmten Punkt \u00FCberschreitet, wobei eine bestimmte Anzahl von Backups erhalten bleibt.
size.periodic.handler.max-backup-index=Die maximale Anzahl aufzubewahrender Backups.
size.periodic.handler.rotate-size=Die Gr\u00F6\u00DFe, bei der die Protokolldatei rotiert werden soll.
size.periodic.handler.add=Hinzuf\u00FCgung eines neuen, gr\u00F6\u00DFenrotierenden Datei-Handlers.
size.periodic.handler.update=Aktualisierung der Properties eines bestehenden, gr\u00F6\u00DFenrotierenden Datei-Handlers.
custom.handler=Definiert einen benutzerdefinierten Logging-Handler. Der benutzerdefinierte Handler muss den java.util.logging.Handler erweitern.
custom.handler.class=Die zu verwendende Logging-Handler-Klasse. 
custom.handler.module=Das Modul, von dem der Logging-Handler abh\u00E4ngt.
custom.handler.update=Aktualisierung der Properties eines bestehenden, benutzerdefinierten Logging-Handlers.
