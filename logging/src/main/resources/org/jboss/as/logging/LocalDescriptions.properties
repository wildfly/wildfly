logging=The configuration of the logging subsystem.
logging.add=Add the logging subsystem.

root.logger=Defines the root logger for this log context.
root.logger.set=Set the root logger.
root.logger.remove=Remove the root logger.
root.logger.change-level=Change the root logger level.
root.logger.assign-handler=Assign a Handler to the root logger.
root.logger.unassign-handler=Unassign a Handler from the root logger.

logger=Defines a logger category.
logger.add=Add a new logger category.
logger.remove=Remove an existing logger category.
logger.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logger.handlers=The Handlers associated with this Logger.
logger.use.parent.handlers=Specifies whether or not this logger should send its output to it's parent Logger.
logger.change-level=Change the logging level for a logger category.
logger.assign-handler=Assign a Handler to a Logger.
logger.unassign-handler=Unassign a Handler from a Logger.

handler=The logging handler.
handler.add=Add a new logging handler.
handler.remove=Remove an existing logging handler.
handler.autoflush=Automatically flush after each write.
handler.level=The log level specifying which message levels will be logged by this. Message levels lower than this value will be discarded.
handler.encoding=The character encoding used by this Handler.
handler.filter=Defines a simple filter type.
handler.formatter=Defines a formatter.
handler.name=The handler's name.
handler.properties=
handler.type=The handler type.
handler.enable=Enable a logging handler.
handler.disable=Disable a logging handler.
handler.change-level=Change the logging level for a handler.
handler.change-formatter=Change the formatter for a handler.
handler.change-file=Change the file for a handler.

async.handler=Defines a handler which writes to the sub-handlers in an asynchronous thread. Used for handlers which introduce a substantial amount of lag.
async.queue-length=The queue length to use before flushing writing
async.overflow-action=Specify what action to take when the overflowing.  The valid options are 'block' and 'discard'
async.handler.add=Add a new ASYNC handler.
async.handler.update=Update the properties of an existing ASYNC handler.
async.handler.assign-subhandler=Assign a subhandler to the ASYNC handler.
async.handler.unassign-subhandler=Unassign a subhandler from the ASYNC handler.

console.handler=Defines a handler which writes to the console.
console.handler.target=Defines the target of the console handler. The value can either be SYSTEM_OUT or SYSTEM_ERR.
console.handler.add=Add a new console handler.
console.handler.update=Update the properties of an existing console handler.

file.handler=Defines a handler which writes to a file.
file.handler.path=The filesystem path.
file.handler.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>
file.handler.append=Specify whether to append to the target file.
file.handler.add=Add a new file handler.
file.handler.update=Update the properties of an existing file handler.

periodic.handler=Defines a handler which writes to a file, rotating the log after a time period derived from the given suffix string, which should be in a format understood by java.text.SimpleDateFormat.
periodic.handler.suffix=Set the suffix string.  The string is in a format which can be understood by java.text.SimpleDateFormat. The period of the rotation is automatically calculated based on the suffix.
periodic.handler.add=Add a new periodic rotating file handler.
periodic.handler.update=Update the properties of an existing periodic rotating file handler.

size.periodic.handler=Defines a handler which writes to a file, rotating the log after a the size of the file grows beyond a certain point and keeping a fixed number of backups.
size.periodic.handler.max-backup=The maximum number of backups to keep.
size.periodic.handler.rotate-size=The size at which to rotate the log file.
size.periodic.handler.add=Add a new size rotating file handler.
size.periodic.handler.update=Update the properties of an existing size rotating file handler.

custom.handler=Defines a custom logging handler. The custom handler must extend java.util.logging.Handler.
custom.handler.class=The logging handler class to be used.
custom.handler.module=The module that the logging handler depends on.
custom.handler.properties=Defines the properties used for the custom logging handler. All properties must be accessible via a setter method.
custom.handler.properties.name=Defines the name of the property to set.
custom.handler.properties.value=Defines value of the property.
custom.handler.update=Update the properties of an existing custom logging handler.
