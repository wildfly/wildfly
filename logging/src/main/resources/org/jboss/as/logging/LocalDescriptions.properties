# Base subsystem descriptions
logging=The configuration of the logging subsystem.
logging.add=Add the logging subsystem.
logging.remove=Remove the logging subsystem.

# read-log-file operation
logging.read-log-file=Reads the contents of a log file. The file must be in the jboss.server.log.dir and must be defined as a \
  file-handler, periodic-rotating-file-handler or size-rotating-file-handler.
logging.read-log-file.name=The name of the log file to read. This file must exist in the jboss.server.log.dir.
logging.read-log-file.lines=The number of lines to read from the file. A value of -1 will read all log lines.
logging.read-log-file.skip=The number of lines to skip before reading.
logging.read-log-file.tail=Reads from the end of the file.

logging.list-log-files=Lists the log files in the jboss.server.log.dir directory that are defined on a file-handler, \
  periodic-rotating-file-handler or size-rotating-file-handler.
logging.list-log-files.file-name=The name of the file.
logging.list-log-files.file-size=The size of the log file in bytes.
logging.list-log-files.last-modified-date=The date the file was last modified.

# Root resource attributes
logging.add-logging-api-dependencies=Indicates whether or not logging API dependencies should be added to deployments \
  during the deployment process. A value of true will add the dependencies to the deployment. A value of false will skip \
  the deployment from being processed for logging API dependencies.
logging.use-deployment-logging-config=Indicates whether or not deployments should use a logging configuration file found \
  in the deployment to configure the log manager. If set to true and a logging configuration file was found in the \
  deployments META-INF or WEB-INF/classes directory, then a log manager will be configured with those settings. If set \
  false the servers logging configuration will be used regardless of any logging configuration files supplied in the \
  deployment.

# Logging profiles
logging.logging-profile=A profile that can be assigned to a deployment for it's logging configuration.
logging.logging-profile.add=Adds a logging profile.
logging.logging-profile.remove=Removes the logging profile and all associated loggers and handlers.

# Root logger operations
logging.root-logger=Defines the root logger for this log context.
logging.root-logger.remove=Remove the root logger.
logging.root-logger.remove-root-logger=Remove the root logger.
logging.root-logger.remove-root-logger.deprecated=Use the remove operation.
logging.root-logger.add=Adds the root logger.
logging.root-logger.add-handler=Adds a handler to the logger.
logging.root-logger.add-handler.name=The name of the handler to add.
logging.root-logger.remove-handler=Removes a handler from the logger.
logging.root-logger.remove-handler.name=The name of the logger to remove.
logging.root-logger.change-root-log-level=Change the root logger level.
logging.root-logger.change-root-log-level.deprecated=Use the write-attribute operation.
logging.root-logger.root-logger-assign-handler.deprecated=Use the add-handler operation.
logging.root-logger.root-logger-assign-handler=Assign a Handler to the root logger.
logging.root-logger.root-logger-assign-handler.name=The name of the handler to add.
logging.root-logger.root-logger-unassign-handler=Unassign a Handler from the root logger.
logging.root-logger.root-logger-unassign-handler.deprecated=Use the remove-handler operation.
logging.root-logger.root-logger-unassign-handler.name=The name of the handler to remove.
logging.root-logger.set-root-logger=Same as add operation
logging.root-logger.set-root-logger.deprecated=Use the add operation.

# Logger definitions
logging.logger=Defines a logger category.
logging.logger.add=Add a new logger category.
logging.logger.remove=Remove an existing logger category.
logging.logger.name=Name of the logger
logging.logger.use-parent-handlers=Specifies whether or not this logger should send its output to it's parent Logger.
logging.logger.category=Specifies the category for the logger.
logging.logger.add-handler=Adds a handler to the logger.
logging.logger.add-handler.name=The name of the handler to add.
logging.logger.remove-handler=Removes a handler from the logger.
logging.logger.remove-handler.name=The name of the logger to remove.
logging.logger.change-log-level=Change the logging level for a logger category.
logging.logger.change-log-level.deprecated=Use the write-attribute operation.
logging.logger.assign-handler=Assign a Handler to a Logger.
logging.logger.assign-handler.deprecated=Use the add-handler operation.
logging.logger.assign-handler.name=The name of the handler to add.
logging.logger.unassign-handler=Unassign a Handler from a Logger.
logging.logger.unassign-handler.deprecated=Use the remove-handler operation.
logging.logger.unassign-handler.name=The name of the handler to remove.

# Logger handler definitions
logging.handler=A logging handler.
logging.handler.add=Add a new logging handler.
logging.handler.remove=Remove an existing logging handler.
logging.handler.name=The handler's name.
logging.handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.handler.enable=Enable a logging handler.
logging.handler.enable.deprecated=Use the write-attribute for the enabled attribute.
logging.handler.disable=Disable a logging handler.
logging.handler.disable.deprecated=Use the write-attribute for the enabled attribute.
logging.handler.change-log-level=Change the logging level for a handler.
logging.handler.change-log-level.deprecated=Use the write-attribute operation.
logging.handler.change-file=Change the file for a handler.
logging.handler.change-file.deprecated=Use the write-attribute operation.
logging.handler.change-file.file=Change the file for a handler.
logging.handler.update-properties=Update the properties on the existing handler.
logging.handler.update-properties.deprecated=Use the write-attribute operation.
logging.handler.add-handler=Adds a handler to the AsyncHandler.
logging.handler.add-handler.name=The name of the handler to add.
logging.handler.remove-handler=Removes a handler from the AsyncHandler.
logging.handler.remove-handler.name=The name of the handler to remove.
logging.handler.assign-subhandler=Assign a subhandler to the handler.
logging.handler.assign-subhandler.deprecated=Use the add-handler operation.
logging.handler.assign-subhandler.name=The name of the handler to add.
logging.handler.unassign-subhandler=Unassign a subhandler from the handler.
logging.handler.unassign-subhandler.deprecated=Use the remove-handler operation.
logging.handler.unassign-subhandler.name=The name of the handler to remove.

# Async handler definitions
logging.async-handler=Defines a handler which writes to the sub-handlers in an asynchronous thread. Used for handlers which introduce a substantial amount of lag.
logging.async-handler.queue-length=The queue length to use before flushing writing
logging.async-handler.overflow-action=Specify what action to take when the overflowing.  The valid options are 'block' and 'discard'
logging.async-handler.add=Add a new ASYNC handler.
logging.async-handler.subhandlers=The Handlers associated with this async handler.
logging.async-handler.subhandlers.handler=The subhandler associated with this async handler.

# Console handler definitions
logging.console-handler=Defines a handler which writes to the console.
logging.console-handler.add=Add a new console handler.
logging.console-handler.target=Defines the target of the console handler. The value can either be SYSTEM_OUT or SYSTEM_ERR.

# File handler definitions
logging.file-handler=Defines a handler which writes to a file.
logging.file-handler.add=Add a new file handler.

# Periodic rotating file handler definitions
logging.periodic-rotating-file-handler=Defines a handler which writes to a file, rotating the log after a time period derived from the given suffix string, which should be in a format understood by java.text.SimpleDateFormat.
logging.periodic-rotating-file-handler.suffix=Set the suffix string.  The string is in a format which can be understood by java.text.SimpleDateFormat. The period of the rotation is automatically calculated based on the suffix.
logging.periodic-rotating-file-handler.add=Add a new periodic rotating file handler.

# Size rotating ile handler definitions
logging.size-rotating-file-handler=Defines a handler which writes to a file, rotating the log after the size of the file grows beyond a certain point and keeping a fixed number of backups.
logging.size-rotating-file-handler.max-backup-index=The maximum number of backups to keep.
logging.size-rotating-file-handler.rotate-size=The size at which to rotate the log file.
logging.size-rotating-file-handler.rotate-on-boot=Indicates the file should be rotated each time the file attribute is changed. This always happens when at initialization time.
logging.size-rotating-file-handler.add=Add a new size rotating file handler.

# Custom handler definitions
logging.custom-handler=Defines a custom logging handler. The custom handler must extend java.util.logging.Handler.
logging.custom-handler.class=The logging handler class to be used.
logging.custom-handler.module=The module that the logging handler depends on.
logging.custom-handler.properties=Defines the properties used for the logging handler. All properties must be accessible via a setter method.
logging.custom-handler.properties.name=Defines the name of the property to set.
logging.custom-handler.properties.value=Defines value of the property.

# Syslog handler definitions
logging.syslog-handler=Defines a syslog handler.
logging.syslog-handler.add=Adds a new syslog handler.
logging.syslog-handler.remove=Removes the syslog handler.
logging.syslog-handler.app-name=The app name used when formatting the message in RFC5424 format. By default the app name is "java".
logging.syslog-handler.facility= Facility as defined by RFC-5424 (http://tools.ietf.org/html/rfc5424)and RFC-3164 (http://tools.ietf.org/html/rfc3164).
logging.syslog-handler.hostname=The name of the host the messages are being sent from. For example the name of the host the application server is running on.
logging.syslog-handler.port=The port the syslog server is listening on.
logging.syslog-handler.server-address=The address of the syslog server.
logging.syslog-handler.syslog-format=Formats the log message according to the RFC specification.

# Pattern formatter descriptions
logging.pattern-formatter=A pattern formatter to be used with handlers.
logging.pattern-formatter.add=Adds a new pattern formatter.
logging.pattern-formatter.remove=Removes the pattern formatter.
logging.pattern-formatter.pattern=Defines a pattern for the formatter.
logging.pattern-formatter.color-map=The color-map attribute allows for a comma delimited list of colors to be used for different levels with a pattern formatter. \
  The format for the color mapping pattern is level-name:color-name.\
                                                    Valid Levels; severe, fatal, error, warn, warning, info, debug, trace, config, fine, finer, finest \
                                                    Valid Colors; black, green, red, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, \
                                                    brightblue, brightyellow, brightmagenta, brightcyan, brightwhite

# Custom formatter descriptions
logging.custom-formatter=A custom formatter to be used with handlers. Note that most log records are formatted in the printf format. Formatters may require \
  invocation of the org.jboss.logmanager.ExtLogRecord#getFormattedMessage() for the message to be properly formatted.
logging.custom-formatter.add=Adds a new custom formatter.
logging.custom-formatter.remove=Removes the custom formatter.
logging.custom-formatter.class=The logging handler class to be used.
logging.custom-formatter.module=The module that the logging handler depends on.
logging.custom-formatter.properties=Defines the properties used for the logging handler. All properties must be accessible via a setter method.
logging.custom-formatter.properties.name=Defines the name of the property to set.
logging.custom-formatter.properties.value=Defines value of the property.

# Common attribute descriptions
logging.common.append=Specify whether to append to the target file.
logging.common.autoflush=Automatically flush after each write.
logging.common.enabled=If set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
logging.common.encoding=The character encoding used by this Handler.
logging.common.formatter=Defines a pattern for the formatter.
logging.common.handlers=The Handlers associated with this Logger.
logging.common.handlers.handler=The logging handler.
logging.common.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.
logging.common.named-formatter=The name of the defined formatter to be used on the handler.

# Filter descriptions
#filter=Defines a simple filter type.
logging.common.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))

# Old filter
logging.common.filter=Defines a simple filter type.
logging.common.filter.deprecated=Use filter-spec.
logging.common.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.common.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.common.filter.accept=Accepts all log messages.
logging.common.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.common.filter.deny=Denys all log messages.
logging.common.filter.level=A filter which excludes a message with the specified level.
logging.common.filter.level-range=A filter which logs only messages that fall within a level range.
logging.common.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.common.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.common.filter.min-level=The minimum (least severe) level, inclusive.
logging.common.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.common.filter.max-level=The maximum (most severe) level, inclusive.
logging.common.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.common.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.common.filter.not=A filter that inverts the filter that is nested.
logging.common.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.common.filter.replace.pattern=The pattern to match
logging.common.filter.replace.replacement=The string replacement
logging.common.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.common.filter.pattern=The pattern to match
logging.common.filter.replacement=The string replacement
logging.common.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# File descriptions
logging.handler.file=The file description consisting of the path and optional relative to path.
logging.handler.file.path=The filesystem path.
logging.handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>