# Base subsystem descriptions
logging=The configuration of the logging subsystem.
logging.add=Add the logging subsystem.
logging.remove=Remove the logging subsystem.

# Logging profiles
logging.logging-profile=A profile that can be assigned to a deployment for it's logging configuration.
logging.logging-profile.add=Adds a logging profile.
logging.logging-profile.remove=Removes the logging profile and all associated loggers and handlers.

# Root logger operations
logging.root-logger=Defines the root logger for this log context.
logging.root-logger.remove=Remove the root logger.
logging.root-logger.remove-root-logger=Remove the root logger.
logging.root-logger.add=Adds the root logger.
logging.root-logger.change-root-log-level=Change the root logger level.
logging.root-logger.root-logger-assign-handler=Assign a Handler to the root logger.
logging.root-logger.root-logger-assign-handler.name=The name of the handler to add.
logging.root-logger.root-logger-unassign-handler=Unassign a Handler from the root logger.
logging.root-logger.root-logger-unassign-handler.name=The name of the handler to remove.
logging.root-logger.set-root-logger=Same as add operation

# Logger definitions
logging.logger=Defines a logger category.
logging.logger.add=Add a new logger category.
logging.logger.remove=Remove an existing logger category.
logging.logger.name=Name of the logger
logging.logger.use-parent-handlers=Specifies whether or not this logger should send its output to it's parent Logger.
logging.logger.category=Specifies the category for the logger.
logging.logger.change-log-level=Change the logging level for a logger category.
logging.logger.assign-handler=Assign a Handler to a Logger.
logging.logger.assign-handler.name=The name of the handler to add.
logging.logger.unassign-handler=Unassign a Handler from a Logger.
logging.logger.unassign-handler.name=The name of the handler to remove.

# Logger handler definitions
logging.handler=A logging handler.
logging.handler.add=Add a new logging handler.
logging.handler.remove=Remove an existing logging handler.
logging.handler.name=The handler's name.
logging.handler.name.deprecated=The name attribute should not be used as the handler's address contains the name.
logging.handler.enable=Enable a logging handler.
logging.handler.disable=Disable a logging handler.
logging.handler.change-log-level=Change the logging level for a handler.
logging.handler.change-file=Change the file for a handler.
logging.handler.change-file.file=Change the file for a handler.
logging.handler.update-properties=Update the properties on the existing handler.
logging.handler.update-properties.file=File for updated properties
logging.handler.assign-subhandler=Assign a subhandler to the handler.
logging.handler.assign-subhandler.name=The name of the handler to add.
logging.handler.unassign-subhandler=Unassign a subhandler from the handler.
logging.handler.unassign-subhandler.name=The name of the handler to remove.

# Async handler definitions
logging.async-handler=Defines a handler which writes to the sub-handlers in an asynchronous thread. Used for handlers which introduce a substantial amount of lag.
logging.async-handler.queue-length=The queue length to use before flushing writing
logging.async-handler.overflow-action=Specify what action to take when the overflowing.  The valid options are 'block' and 'discard'
logging.async-handler.add=Add a new ASYNC handler.
logging.async-handler.subhandlers=The Handlers associated with this async handler.
logging.async-handler.subhandlers.handler=The subhandler associated with this async handler.
logging.async-handler.assign-subhandler=Assign a subhandler to the ASYNC handler.
logging.async-handler.unassign-subhandler=Unassign a subhandler from the ASYNC handler.

# Console handler definitions
logging.console-handler=Defines a handler which writes to the console.
logging.console-handler.add=Add a new console handler.
logging.console-handler.target=Defines the target of the console handler. The value can either be SYSTEM_OUT or SYSTEM_ERR.

# File handler definitions
logging.file-handler=Defines a handler which writes to a file.
logging.file-handler.add=Add a new file handler.

# Periodic rotating file handler definitions
logging.periodic-rotating-file-handler=Defines a handler which writes to a file, rotating the log after a time period derived from the given suffix string, which should be in a format understood by java.text.SimpleDateFormat.
logging.periodic-rotating-file-handler.suffix=Set the suffix string.  The string is in a format which can be understood by java.text.SimpleDateFormat. The period of the rotation is automatically calculated based on the suffix.
logging.periodic-rotating-file-handler.add=Add a new periodic rotating file handler.

# Size rotating ile handler definitions
logging.size-rotating-file-handler=Defines a handler which writes to a file, rotating the log after a the size of the file grows beyond a certain point and keeping a fixed number of backups.
logging.size-rotating-file-handler.max-backup-index=The maximum number of backups to keep.
logging.size-rotating-file-handler.rotate-size=The size at which to rotate the log file.
logging.size-rotating-file-handler.add=Add a new size rotating file handler.

# Custom handler definitions
logging.custom-handler=Defines a custom logging handler. The custom handler must extend java.util.logging.Handler.
logging.custom-handler.class=The logging handler class to be used.
logging.custom-handler.module=The module that the logging handler depends on.
logging.custom-handler.properties=Defines the properties used for the logging handler. All properties must be accessible via a setter method.
logging.custom-handler.properties.name=Defines the name of the property to set.
logging.custom-handler.properties.value=Defines value of the property.

# Common attribute descriptions
logging.common.append=Specify whether to append to the target file.
logging.common.autoflush=Automatically flush after each write.
logging.common.encoding=The character encoding used by this Handler.
logging.common.formatter=Defines a pattern for the formatter.
logging.common.handlers=The Handlers associated with this Logger.
logging.common.handlers.handler=The logging handler.
logging.common.level=The log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded.

# Filter descriptions
#filter=Defines a simple filter type.
logging.common.filter-spec=A filter expression value to define a filter. Example for a filter that does not match a pattern: not(match("JBAS.*"))

# Old filter
logging.common.filter=Defines a simple filter type.
logging.common.filter.deprecated=Use filter-spec.
logging.common.filter.all=A filter consisting of several filters in a chain.  If any filter finds the log message to be unloggable,the message will not be logged and subsequent filters will not be checked.
logging.common.filter.any=A filter consisting of several filters in a chain.  If any filter finds the log message to be loggable, the message will be logged and subsequent filters will not be checked.
logging.common.filter.accept=Accepts all log messages.
logging.common.filter.change-level=A filter which modifies the log record with a new level if the nested filter evaluates true for that record.
logging.common.filter.deny=Denys all log messages.
logging.common.filter.level=A filter which excludes a message with the specified level.
logging.common.filter.level-range=A filter which logs only messages that fall within a level range.
logging.common.filter.level-range.min-level=The minimum (least severe) level, inclusive.
logging.common.filter.level-range.max-level=The maximum (most severe) level, inclusive.
logging.common.filter.min-level=The minimum (least severe) level, inclusive.
logging.common.filter.min-inclusive=True if the min-level value is inclusive, false if it is exclusive.
logging.common.filter.max-level=The maximum (most severe) level, inclusive.
logging.common.filter.max-inclusive=True if the max-level value is inclusive, false if it is exclusive.
logging.common.filter.match=A regular-expression-based filter. Used to exclude log records which match or don't match the expression. The regular expression is checked against the raw (unformatted) message.
logging.common.filter.not=A filter that inverts the filter that is nested.
logging.common.filter.replace=A filter which applies a text substitution on the message if the nested filter matches.
logging.common.filter.replace.pattern=The pattern to match
logging.common.filter.replace.replacement=The string replacement
logging.common.filter.replace.replace-all=True if all occurrences should be replaced; false if only the first occurrence
logging.common.filter.pattern=The pattern to match
logging.common.filter.replacement=The string replacement
logging.common.filter.replace-all=True if all occurrences should be replaced; false if only the first occurrence

# File descriptions
logging.handler.file=The file description consisting of the path and optional relative to path.
logging.handler.file.path=The filesystem path.
logging.handler.file.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>