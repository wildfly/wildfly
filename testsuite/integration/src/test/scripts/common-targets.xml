<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright 2011, Red Hat, Inc., and individual contributors
  ~ as indicated by the @author tags. See the copyright.txt file in the
  ~ distribution for a full listing of individual contributors.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<project>

    <propertyset id="ds.properties">
        <propertyref prefix="ds"/>
    </propertyset>

    <!--
        Overwrite some config files, replace tokens.
    -->
    <macrodef name="ts.config-as.files" description="Changes server configuration.">

        <attribute name="test.configs.dir" default="${jbossas.ts.integ.dir}/src/test/resources/test-configs"/>
        <element name="filter-elements" optional="yes" description="Additional filter tokens to replace."/>

        <sequential>
            <echo message="Configuring AS instance &quot;@{name}&quot; at @{output.dir}"/>

            <!-- Overwrite with configs from test-configs and apply property filtering. -->
            <copy todir="@{output.dir}/@{name}" overwrite="true" failonerror="false">
                <fileset dir="@{test.configs.dir}/@{name}"/>
                <filterset begintoken="${" endtoken="}">
                    <filter token="node0" value="${node0}"/>
                    <filter token="node1" value="${node1}"/>
                    <filter token="mcast" value="${mcast}"/>
                    <filter-elements/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>


    <!--
        Change IP adresses, including multicast.
        It's the same as above, only adds the udpMcastAddress param.

        This macro makes use of saxon via  ${net.sf.saxon:saxon:jar}.
    -->
    <macrodef name="ts.config-as.ip-with-multicast" description="Changes the IP *and* multicast addresses of a node configuration">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir"      default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>
        <attribute name="node"              default="${node0}"/>
        <attribute name="mcast"             default="${mcast}"/>

        <sequential>
            <echo message="    ===  Changing IP addresses for config @{name} ===  "/>
                <echo>   node: @{node}</echo>
                <echo>   mcast: @{mcast}</echo>

            <property name="cur-as.config.dir" value="@{output.dir}/@{name}/@{config.dir.name}"/>

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/changeIPAddresses.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <!-- Can't get this to work. -->
                <!-- classpath path="${net.sf.saxon:saxon:jar}"/ -->
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone-full.xml"/>
                    <include name="**/standalone*-ha.xml"/>
                    <include name="**/standalone.xml"/>
                </fileset>
                <param name="managementIPAddress" expression="@{node}"/>
                <param name="publicIPAddress"     expression="@{node}"/>

                <param name="udpMcastAddress"         expression="@{mcast}"/>
                <param name="diagnosticsMcastAddress" expression="@{mcast}"/>
                <param name="mpingMcastAddress"       expression="@{mcast}"/>
                <param name="modclusterMcastAddress"  expression="@{mcast}"/>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
               <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                   <include name="**/standalone*-ha.xml.mod"/>
                   <include name="**/standalone.xml.mod"/>
                   <include name="**/standalone-full.xml.mod"/>
               </fileset>
               <mapper type="glob" from="*.mod" to="*"/>
             </move>
        </sequential>
    </macrodef>



    <!--
        Configure port offset.
        This macro makes use of saxon via  ${net.sf.saxon:saxon:jar}.
    -->
    <macrodef name="ts.config-as.add-port-offset" description="Add a port offset a node configuration">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir" default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>
        <attribute name="offset" default="0"/>
        <attribute name="nativePort" default="9999"/>
        <attribute name="httpPort" default="9990"/>

        <sequential>
            <echo message="Adding port offset for config @{name}"/>

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/addPortOffset.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <!-- can't get this to work -->
                <!-- classpath path="${net.sf.saxon:saxon:jar}"/ -->
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone*-ha.xml"/>
                    <include name="**/standalone.xml"/>
                    <include name="**/standalone-full.xml"/>
                </fileset>
                <param name="portOffset" expression="@{offset}"/>
                <param name="nativeInterfaceManagementPort" expression="@{nativePort}"/>
                <param name="httpInterfaceManagementPort" expression="@{httpPort}"/>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
               <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                   <include name="**/standalone*-ha.xml.mod"/>
                   <include name="**/standalone.xml.mod"/>
                   <include name="**/standalone-full.xml.mod"/>
               </fileset>
               <mapper type="glob" from="*.mod" to="*"/>
             </move>
        </sequential>
    </macrodef>


    <!--
        Enable JTS.
        This macro makes use of saxon via  ${net.sf.saxon:saxon:jar}.
    -->
    <macrodef name="ts.config-as.add-jts" description="Enable JTS">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir" default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>

        <sequential>
            <echo message="Enabling JTS for config @{name}"/>

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/enableJTS.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone*-ha.xml"/>
                    <include name="**/standalone.xml"/>
                    <include name="**/standalone-full.xml"/>
                </fileset>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
               <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                   <include name="**/standalone*-ha.xml.mod"/>
                   <include name="**/standalone.xml.mod"/>
                   <include name="**/standalone-full.xml.mod"/>
               </fileset>
               <mapper type="glob" from="*.mod" to="*"/>
             </move>
        </sequential>
    </macrodef>



    <!--
        Add a new Remote Outbound Connection.
        This macro makes use of saxon via  ${net.sf.saxon:saxon:jar}.
    -->
    <macrodef name="ts.config-as.add-remote-outbound-connection" description="Add Remote Outbound Connection">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir" default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>
        <attribute name="connectionName" default="remote-ejb-connection"/>
        <attribute name="node" default="${node0}"/>
        <attribute name="remotePort" default="4447"/>
        <attribute name="securityRealm" default="NOT_DEFINED"/>
        <attribute name="userName" default="NOT_DEFINED"/>
        <attribute name="protocol" default="http-remoting"/>

        <sequential>
            <echo message="Adding a new remote outbound connection @{connectionName} for config @{name}"/>

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/addRemoteOutboundConnection.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone*-ha.xml"/>
                    <include name="**/standalone.xml"/>
                    <include name="**/standalone-full.xml"/>
                </fileset>
                <param name="connectionName" expression="@{connectionName}"/>
                <param name="node" expression="@{node}"/>
                <param name="remotePort" expression="@{remotePort}"/>
                <param name="securityRealm" expression="@{securityRealm}"/>
                <param name="userName" expression="@{userName}"/>
                <param name="protocol" expression="@{protocol}"/>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
               <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                   <include name="**/standalone*-ha.xml.mod"/>
                   <include name="**/standalone.xml.mod"/>
                   <include name="**/standalone-full.xml.mod"/>
               </fileset>
               <mapper type="glob" from="*.mod" to="*"/>
             </move>
        </sequential>
    </macrodef>

    <macrodef name="ts.config-as.add-identity-realm" description="Add Server Identity Security Realm">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir" default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>
        <attribute name="realmName"/>
        <attribute name="secret"/>

        <sequential>
            <echo message="Adding a new server identity realm @{realmName} with secret @{secret}"/>

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}-tmp/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/addIdentityRealm.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone*-ha.xml"/>
                    <include name="**/standalone.xml"/>
                    <include name="**/standalone-full.xml"/>
                </fileset>
                <param name="realmName" expression="@{realmName}"/>
                <param name="secret" expression="@{secret}"/>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
               <fileset dir="@{output.dir}/@{name}-tmp/@{config.dir.name}">
                   <include name="**/standalone*-ha.xml.mod"/>
                   <include name="**/standalone.xml.mod"/>
                   <include name="**/standalone-full.xml.mod"/>
               </fileset>
               <mapper type="glob" from="*.mod" to="*"/>
             </move>
        </sequential>
    </macrodef>

    <macrodef name="ts.config-as.add-messaging-failover" description="Make default hornetq-server fails over on shutdown">

        <attribute name="name" default="jbossas"/>
        <attribute name="output.dir" default="${project.build.directory}"/>
        <attribute name="config.dir.name" default="standalone/configuration"/>

        <sequential>
            <echo message="Make default hornetq-server fails over on shutdown"/>
            <copy file="@{output.dir}/@{name}/@{config.dir.name}/standalone-full.xml"
                  tofile="@{output.dir}/@{name}/@{config.dir.name}/standalone-full-backup.xml" />

            <!-- Process *.xml to *.xml.mod. -->
            <xslt destdir="@{output.dir}/@{name}-tmp/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/addMessagingFailoverOnShutdown.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone-full.xml"/>
                </fileset>
            </xslt>
            <xslt destdir="@{output.dir}/@{name}-tmp/@{config.dir.name}"
                  style="${jbossas.ts.integ.dir}/src/test/xslt/addMessagingBackup.xsl"
                  extension=".xml.mod"
                  useImplicitFileset="false">
                <fileset dir="@{output.dir}/@{name}/@{config.dir.name}">
                    <include name="**/standalone-full-backup.xml"/>
                </fileset>
            </xslt>

            <!-- Move processed files back. -->
            <move todir="@{output.dir}/@{name}/@{config.dir.name}">
                <fileset dir="@{output.dir}/@{name}-tmp/@{config.dir.name}">
                    <include name="**/standalone-full.xml.mod"/>
                    <include name="**/standalone-full-backup.xml.mod"/>
                </fileset>
                <mapper type="glob" from="*.mod" to="*"/>
            </move>
        </sequential>
    </macrodef>

</project>
