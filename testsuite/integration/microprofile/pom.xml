<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright The WildFly Authors
  ~ SPDX-License-Identifier: Apache-2.0
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-ts-integ</artifactId>
        <!--
        Maintain separation between the artifact id and the version to help prevent
        merge conflicts between commits changing the GA and those changing the V.
        -->
        <version>32.0.0.Beta1-SNAPSHOT</version>
    </parent>

    <artifactId>wildfly-ts-integ-microprofile</artifactId>

    <name>WildFly Test Suite: Integration - MicroProfile</name>

    <properties>
        <jbossas.ts.integ.dir>${basedir}/..</jbossas.ts.integ.dir>
        <jbossas.ts.dir>${jbossas.ts.integ.dir}/..</jbossas.ts.dir>
        <jbossas.project.dir>${jbossas.ts.dir}/..</jbossas.project.dir>
        <surefire.forked.process.timeout>3600</surefire.forked.process.timeout>
        <wildfly.build.output.dir>build/target/${server.output.dir.prefix}-${server.output.dir.version}</wildfly.build.output.dir>
        <!-- properties to enable plugins shared by various bootable jar executions -->
        <bootable-jar-packaging.phase>none</bootable-jar-packaging.phase>

        <ts.glow.phase>none</ts.glow.phase>
        <ts.glow.config-name>standalone-microprofile.xml</ts.glow.config-name>
        <!-- By default (i.e. Java EE9+) use the following directory as an additional source -->
        <ts.microprofile.build-helper.source.dir>src/test/jakarta/java</ts.microprofile.build-helper.source.dir>

        <!-- Use the expansion bom -->
        <dependency.management.import.artifact>wildfly-standard-expansion-bom</dependency.management.import.artifact>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.wildfly</groupId>
                <artifactId>wildfly-standard-test-expansion-bom</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- MicroProfile APIs -->
        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.health</groupId>
            <artifactId>microprofile-health-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.jwt</groupId>
            <artifactId>microprofile-jwt-auth-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.lra</groupId>
            <artifactId>microprofile-lra-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.openapi</groupId>
            <artifactId>microprofile-openapi-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>
            <artifactId>microprofile-reactive-messaging-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>
            <artifactId>microprofile-reactive-streams-operators-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.rest.client</groupId>
            <artifactId>microprofile-rest-client-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Jakarta specification dependencies -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.ejb</groupId>
            <artifactId>jakarta.ejb-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.inject</groupId>
            <artifactId>jakarta.inject-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.transaction</groupId>
            <artifactId>jakarta.transaction-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- MicroProfile OpenAPI test dependencies -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
        </dependency>

        <!-- MicroProfile Fault Tolerance test dependencies -->
        <dependency>
            <groupId>org.eclipse.microprofile.fault-tolerance</groupId>
            <artifactId>microprofile-fault-tolerance-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye</groupId>
            <artifactId>smallrye-fault-tolerance</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-core-impl</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- MicroProfile JWT Test Dependencies -->
        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>nimbus-jose-jwt</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.json</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- MicroProfile Reactive Messaging Kafka Connector Test Dependencies -->
        <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-reactive-messaging-kafka-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-reactive-messaging-kafka-test-companion</artifactId>
            <version>${version.io.smallrye.smallrye-reactive-messaging}</version>
            <scope>test</scope>
        </dependency>
        <!--
            smallrye-reactive-messaging-kafka-test-companion doesn't pull in the kafka server dependencies
            so we need to add them here
        -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.13</artifactId>
            <version>${version.org.apache.kafka}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-server-common</artifactId>
            <version>${version.org.apache.kafka}</version>
            <scope>test</scope>
        </dependency>
        <!-- Dependencies for embedded artemis -->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-server</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-amqp-protocol</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-http</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-socks</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jctools</groupId>
            <artifactId>jctools-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Needed if people use compression.type=zstd in their Kafka config -->
            <groupId>com.github.luben</groupId>
            <artifactId>zstd-jni</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Needed if people use compression.type=lz4 in their Kafka config -->
            <groupId>org.lz4</groupId>
            <artifactId>lz4-java</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- Needed if people use compression.type=snappy in their Kafka config -->
            <groupId>org.xerial.snappy</groupId>
            <artifactId>snappy-java</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-cli</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-core-testsuite-shared</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-context</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-sdk-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-sdk-trace</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-sdk-extension-autoconfigure-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.opentelemetry</groupId>
            <artifactId>smallrye-opentelemetry-api</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Other test dependencies -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-json-p-provider</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- TODO confirm if this is needed -->
        <dependency>
            <groupId>org.wildfly</groupId>
            <artifactId>wildfly-naming-client</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.wildfly.glow</groupId>
                <artifactId>wildfly-glow-arquillian-plugin</artifactId>
                <configuration>
                    <feature-packs>
                        <feature-pack>
                            <groupId>${testsuite.full.galleon.pack.groupId}</groupId>
                            <artifactId>${testsuite.full.galleon.pack.artifactId}</artifactId>
                            <version>${testsuite.full.galleon.pack.version}</version>
                        </feature-pack>
                    </feature-packs>
                    <config-name>${ts.glow.config-name}</config-name>
                    <add-ons>
                        <add-on>kafka</add-on>
                        <add-on>micrometer</add-on>
                        <add-on>lra-coordinator</add-on>
                    </add-ons>
                </configuration>
                <executions>
                    <execution>
                        <id>scan-deployments</id>
                        <goals>
                            <goal>scan</goal>
                        </goals>
                        <phase>${ts.glow.phase}</phase>
                        <configuration>
                            <expected-discovery>[cdi, ee-integration, ejb-lite, h2-datasource, jaxrs, jpa, jsonp, micrometer, microprofile-config, microprofile-fault-tolerance, microprofile-health, microprofile-jwt, microprofile-lra-coordinator, microprofile-lra-participant, microprofile-openapi, microprofile-reactive-messaging, microprofile-reactive-messaging-amqp, microprofile-reactive-messaging-kafka, microprofile-reactive-streams-operators, microprofile-rest-client, microprofile-telemetry, opentelemetry, transactions]==>ee-core-profile-server,ejb-lite,h2-datasource,jpa,micrometer,microprofile-fault-tolerance,microprofile-health,microprofile-jwt,microprofile-lra-coordinator,microprofile-lra-participant,microprofile-openapi,microprofile-reactive-messaging-amqp,microprofile-reactive-messaging-kafka,microprofile-rest-client,microprofile-telemetry</expected-discovery>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.org.wildfly.plugin}</version>
                <configuration>
                    <offline>true</offline>
                    <scripts>
                        <script>${wildfly.dir}/docs/examples/enable-microprofile.cli</script>
                    </scripts>
                    <jboss-home>${wildfly.dir}</jboss-home>
                    <stdout>none</stdout>
                    <java-opts>${modular.jdk.args}</java-opts>
                    <system-properties>
                        <maven.repo.local>${settings.localRepository}</maven.repo.local>
                        <module.path>${jboss.dist}/modules</module.path>
                    </system-properties>
                </configuration>
                <executions>
                    <execution>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>execute-commands</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-jar-maven-plugin</artifactId>
                <version>${version.org.wildfly.jar.plugin}</version>
                <executions>
                    <!-- Provision a cloud server including all the MicroProfile specs layers -->
                    <execution>
                        <id>bootable-jar-packaging</id>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <phase>${bootable-jar-packaging.phase}</phase>
                        <configuration>
                            <!-- content that is installed in wildfly home -->
                            <extra-server-content-dirs>${wildfly.dir}</extra-server-content-dirs>
                            <output-file-name>test-wildfly.jar</output-file-name>
                            <hollowJar>true</hollowJar>
                            <record-state>false</record-state>
                            <log-time>${galleon.log.time}</log-time>
                            <offline>true</offline>
                            <plugin-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                            </plugin-options>
                            <provisioning-file>target/glow-scan/provisioning.xml</provisioning-file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <environmentVariables>
                        <!-- dummy env property for MicroProfile Config testing -->
                        <MPCONFIG_TEST_ENV_VAR>integ-basicmpconfig-test-env-var-value</MPCONFIG_TEST_ENV_VAR>
                    </environmentVariables>
                    <systemPropertyVariables>
                        <jboss.install.dir>${basedir}/target/wildfly</jboss.install.dir>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <configuration>
                            <excludes>
                                <!-- In this module default-test runs against standalone-microprofile.xml
                                     Exclude tests from that execution that require functionality not in that config. -->
                                <exclude>org/wildfly/test/integration/microprofile/jwt/ejb/JWTEJBTestCase.java</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <!-- An execution analogous to default-test but separately customizable -->
                    <execution>
                        <id>layers-test</id>
                        <!-- Disabled by default; relevant profiles enable it -->
                        <phase>none</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                    <!-- An execution analogous to default-test but uses standalone.xml -->
                    <execution>
                        <id>standalone-enabled-microprofile-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <systemPropertyVariables>
                                <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
                            </systemPropertyVariables>
                            <excludes>
                                <!-- The enable-microprofile.cli script does not enable the reactive extensions/subsystems -->
                                <exclude>org/wildfly/test/integration/microprofile/reactive/**</exclude>
                            </excludes>
                            <reportNameSuffix>standalone-enabled-microprofile-test</reportNameSuffix>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Test against slimmed servers provisioned by Galleon -->
        <profile>
            <id>layers.profile</id>
            <activation>
                <property>
                    <name>ts.layers</name>
                </property>
            </activation>
            <properties>
                <jboss.dist>${project.build.directory}/wildfly</jboss.dist>
                <extra.server.jvm.args>-Dmaven.repo.local=${settings.localRepository}</extra.server.jvm.args>
                <ts.config-as.copy-mgmt-users.phase>test</ts.config-as.copy-mgmt-users.phase>
                <ts.glow.phase>test-compile</ts.glow.phase>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <configuration>
                            <overwrite-provisioned-server>true</overwrite-provisioned-server>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>none</phase>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>microprofile-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>test-compile</phase>
                                <configuration>
                                    <provisioning-dir>${project.build.directory}/wildfly</provisioning-dir>
                                    <record-provisioning-state>false</record-provisioning-state>
                                    <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                                    <offline-provisioning>${galleon.offline}</offline-provisioning>
                                    <galleon-options>
                                        <jboss-maven-dist/>
                                        <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                        <optional-packages>passive+</optional-packages>
                                    </galleon-options>
                                    <provisioning-file>target/glow-scan/provisioning.xml</provisioning-file>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <!-- Enable the layers-test surefire execution; disable others. -->
                        <executions>
                            <execution>
                                <id>layers-test</id>
                                <phase>test</phase>
                                <configuration>
                                    <reportNameSuffix>layers-test</reportNameSuffix>
                                </configuration>
                            </execution>
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <systemPropertyVariables>
                                <!-- Override the standard module path that points at the shared module set from the dist -->
                                <module.path>${project.build.directory}/wildfly/modules</module.path>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Test against WildFly Preview dist -->
        <!-- TODO convert this to a bootable jar setup once a release
             of the wildfly jar plugin with transformation support is available -->
        <profile>
            <id>preview.test.profile</id>
            <activation>
                <property>
                    <name>ts.preview</name>
                </property>
            </activation>
            <properties>
                <jboss.dist>${project.build.directory}/wildfly</jboss.dist>

                <!-- Use the WFP dependencyManagement set.
                     This is set in this profile in a parent module, but the explicit global override
                     in this module takes precedence. -->
                <dependency.management.import.artifact>wildfly-preview-expansion-bom</dependency.management.import.artifact>
                <testsuite.ee.galleon.pack.artifactId>wildfly-preview-feature-pack</testsuite.ee.galleon.pack.artifactId>
                <ts.glow.phase>test-compile</ts.glow.phase>
                <ts.config-as.copy-mgmt-users.phase>test</ts.config-as.copy-mgmt-users.phase>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <configuration>
                            <overwrite-provisioned-server>true</overwrite-provisioned-server>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>none</phase>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>microprofile-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>test-compile</phase>
                                <configuration>
                                    <provisioning-dir>${project.build.directory}/wildfly</provisioning-dir>
                                    <record-provisioning-state>false</record-provisioning-state>
                                    <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                                    <offline-provisioning>${galleon.offline}</offline-provisioning>
                                    <galleon-options>
                                        <jboss-maven-dist/>
                                        <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                        <optional-packages>passive+</optional-packages>
                                    </galleon-options>
                                    <provisioning-file>target/glow-scan/provisioning.xml</provisioning-file>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <!-- Enable the layers-test surefire execution, disable others -->
                        <executions>
                            <execution>
                                <id>layers-test</id>
                                <phase>test</phase>
                                <configuration>
                                    <reportNameSuffix>layers-test</reportNameSuffix>
                                </configuration>
                            </execution>
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <systemPropertyVariables>
                                <!-- Override the standard module path that points at the shared module set from the dist -->
                                <module.path>${project.build.directory}/wildfly/modules</module.path>
                                <!-- -Dnode0 is present in the parent definition of server.jvm.args, it is
                                        expected by microprofile-config tests -->
                                <server.jvm.args>${surefire.jpda.args} -Dnode0=${node0} -Dmaven.repo.local=${settings.localRepository}</server.jvm.args>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Profile to turn off execution of this module's tests if the testsuite is being run
             against an external dist (i.e. by using the jboss.dist property to point to one)
             and that dist does not include the full set of MP functionality. -->
        <profile>
            <id>disable.microprofile.profile</id>
            <activation>
                <property>
                    <name>disable.microprofile.tests</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- Disable the surefire tests -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <phase>none</phase>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>standalone.microprofile.profile</id>
            <activation>
                <property>
                    <name>ts.standalone.microprofile</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!--Re-enable the default surefire execution, disable others. -->
                            <execution>
                                <id>default-test</id>
                                <phase>test</phase>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <phase>none</phase>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>bootablejar.profile</id>
            <activation>
                <property>
                    <name>ts.bootable</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-bootable</artifactId>
                </dependency>
            </dependencies>
            <properties>
                <ts.glow.phase>test-compile</ts.glow.phase>
                <ts.glow.config-name>standalone.xml</ts.glow.config-name>
                <bootable-jar-packaging.phase>test-compile</bootable-jar-packaging.phase>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                            <!-- Disable the default provisioning -->
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provisioning</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Re-enable the default surefire execution -->
                            <execution>
                                <id>default-test</id>
                                <phase>test</phase>
                                <configuration>
                                    <systemPropertyVariables>
                                        <install.dir>${project.build.directory}/wildfly</install.dir>
                                        <bootable.jar>${project.build.directory}/test-wildfly.jar</bootable.jar>
                                        <arquillian.xml>arquillian-bootable.xml</arquillian.xml>
                                        <module.path>${project.build.directory}/wildfly/modules</module.path>
                                    </systemPropertyVariables>
                                    <classpathDependencyExcludes>
                                        <classpathDependencyExclude>
                                            org.wildfly.arquillian:wildfly-arquillian-container-managed
                                        </classpathDependencyExclude>
                                    </classpathDependencyExcludes>
                                </configuration>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>bootablejar.preview.profile</id>
            <activation>
                <property>
                    <name>ts.bootable.preview</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-bootable</artifactId>
                </dependency>
            </dependencies>
            <properties>
                <ts.glow.phase>test-compile</ts.glow.phase>
                <bootable-jar-packaging.phase>test-compile</bootable-jar-packaging.phase>
                <ts.config-as.copy-mgmt-users.phase>test</ts.config-as.copy-mgmt-users.phase>
                <extra.server.jvm.args>-Dmaven.repo.local=${settings.localRepository}</extra.server.jvm.args>

                <!-- Use the WFP dependencyManagement set.
                     This is set in this profile in a parent module, but the explicit global override
                     in this module takes precedence. -->
                <dependency.management.import.artifact>wildfly-preview-expansion-bom</dependency.management.import.artifact>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>execute-commands</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                            <!-- Disable the default provisioning -->
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provisioning</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Re-enable the default surefire execution -->
                            <execution>
                                <id>default-test</id>
                                <phase>test</phase>
                                <configuration>
                                    <systemPropertyVariables>
                                        <install.dir>${project.build.directory}/wildfly</install.dir>
                                        <bootable.jar>${project.build.directory}/test-wildfly.jar</bootable.jar>
                                        <arquillian.xml>arquillian-bootable.xml</arquillian.xml>
                                        <module.path>${project.build.directory}/wildfly/modules</module.path>
                                    </systemPropertyVariables>
                                    <classpathDependencyExcludes>
                                        <classpathDependencyExclude>
                                            org.wildfly.arquillian:wildfly-arquillian-container-managed
                                        </classpathDependencyExclude>
                                    </classpathDependencyExcludes>
                                </configuration>
                            </execution>
                            <execution>
                                <id>standalone-enabled-microprofile-test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
