<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright The WildFly Authors
  ~ SPDX-License-Identifier: Apache-2.0
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-ts-integ</artifactId>
        <!--
        Maintain separation between the artifact id and the version to help prevent
        merge conflicts between commits changing the GA and those changing the V.
        -->
        <version>32.0.0.Beta1-SNAPSHOT</version>
    </parent>

    <!-- ********************************************************************************** -->
    <!-- ******************************** Smoke Integration ******************************* -->
    <!-- ********************************************************************************** -->
    <artifactId>wildfly-ts-integ-smoke</artifactId>

    <name>WildFly Test Suite: Integration - Smoke</name>

    <properties>
        <jbossas.ts.integ.dir>${basedir}/..</jbossas.ts.integ.dir>
        <jbossas.ts.dir>${jbossas.ts.integ.dir}/..</jbossas.ts.dir>
        <jbossas.project.dir>${jbossas.ts.dir}/..</jbossas.project.dir>
        <jboss.dist>${basedir}/target/wildfly</jboss.dist>
        <!-- properties to enable plugins shared by various bootable jar executions -->
        <bootable-jar-cloud-profile-packaging.phase>none</bootable-jar-cloud-profile-packaging.phase>
        <glow.phase.observability>none</glow.phase.observability>
        <glow.phase.sar>none</glow.phase.sar>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>wildfly-naming</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.woodstox</groupId>
            <artifactId>woodstox-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.sun.istack</groupId>
            <artifactId>istack-commons-runtime</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-buffer</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-http</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-socks</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-handler</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-handler-proxy</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-resolver</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport-native-unix-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport-classes-epoll</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport-classes-kqueue</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.undertow</groupId>
            <artifactId>undertow-servlet</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.activation</groupId>
            <artifactId>jakarta.activation-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.ejb</groupId>
            <artifactId>jakarta.ejb-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.enterprise.concurrent</groupId>
            <artifactId>jakarta.enterprise.concurrent-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.interceptor</groupId>
            <artifactId>jakarta.interceptor-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.jms</groupId>
            <artifactId>jakarta.jms-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.resource</groupId>
            <artifactId>jakarta.resource-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.servlet.jsp</groupId>
            <artifactId>jakarta.servlet.jsp-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.websocket</groupId>
            <artifactId>jakarta.websocket-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-commons</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-core-client</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-jakarta-client</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-server</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-bindings-soap</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-databinding-jaxb</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxws</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-simple</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-wsdl</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.ws.xmlschema</groupId>
            <artifactId>xmlschema-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk18on</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-utils</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.eclipse.angus</groupId>
            <artifactId>angus-activation</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>codemodel</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.ironjacamar</groupId>
            <artifactId>ironjacamar-common-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.ironjacamar</groupId>
            <artifactId>ironjacamar-common-impl</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.ironjacamar</groupId>
            <artifactId>ironjacamar-core-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.ironjacamar</groupId>
            <artifactId>ironjacamar-core-impl</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.ironjacamar</groupId>
            <artifactId>ironjacamar-deployers-common</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-impl-base</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.spec.jakarta.xml.soap</groupId>
            <artifactId>jboss-saaj-api_3.0_spec</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.spec.jakarta.xml.ws</groupId>
            <artifactId>jboss-jakarta-xml-ws-api_4.0_spec</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>wildfly-connector</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.wildfly</groupId>
            <artifactId>wildfly-naming-client</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-protocol-jmx</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-core-testsuite-shared</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <!-- Parameters to test cases. -->
                        <systemPropertyVariables combine.children="append">
                            <jboss.inst>${basedir}/target/wildfly</jboss.inst>
                            <jboss.install.dir>${basedir}/target/wildfly</jboss.install.dir>
                            <jboss.server.config.file.name>standalone-full.xml</jboss.server.config.file.name>
                        </systemPropertyVariables>
                    </configuration>
                    <executions>
                        <!-- Tests that can run against the standalone-microprofile.xml config -->
                        <execution>
                            <id>microprofile.surefire</id>
                            <!-- Turn off this execution by default. It gets turned on in profiles -->
                            <phase>none</phase>
                            <goals>
                                <goal>test</goal>
                            </goals>
                            <configuration>
                                <systemPropertyVariables>
                                    <jboss.server.config.file.name>standalone-microprofile.xml</jboss.server.config.file.name>
                                </systemPropertyVariables>
                                <excludes>
                                    <!-- Requires EJB -->
                                    <exclude>org/jboss/as/test/smoke/ejb3/**/*TestCase.java</exclude>
                                    <exclude>org/jboss/as/test/smoke/property/EjbDDWithPropertyTestCase.java</exclude>
                                    <!-- Requires iiop -->
                                    <exclude>org/jboss/as/test/smoke/socketbindings/SocketBindingBoundPortsTestCase.java</exclude>
                                    <!-- Requires messaging -->
                                    <exclude>org/jboss/as/test/smoke/jms/**/*TestCase.java</exclude>
                                    <exclude>org/jboss/as/test/smoke/jms/**/*Test.java</exclude>
                                    <exclude>org/jboss/as/test/smoke/messaging/**/*TestCase.java</exclude>
                                    <!-- Requires sar -->
                                    <exclude>org/jboss/as/test/smoke/sar/**/*TestCase.java</exclude>
                                    <!-- Requires webservices -->
                                    <exclude>org/jboss/as/test/smoke/webservices/**/*TestCase.java</exclude>
                                    <!-- FIXME Why do these fail? Particularly ManagedBeanTestCase -->
                                    <exclude>org/jboss/as/test/smoke/managedbean/ManagedBeanTestCase.java</exclude>
                                    <exclude>org/jboss/as/test/smoke/deployment/rar/tests/afterresourcecreation/AfterResourceCreationDeploymentTestCase.java</exclude>
                                    <exclude>org/jboss/as/test/smoke/deployment/rar/tests/redeployment/ReDeploymentTestCase.java</exclude>
                                </excludes>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${version.resources.plugin}</version>
                    <executions combine.self="override">
                        <execution>
                            <id>ts.copy-wildfly</id>
                            <phase>none</phase>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.org.wildfly.plugin}</version>
                <configuration>
                    <overwrite-provisioned-server>true</overwrite-provisioned-server>
                </configuration>
                <executions>
                    <execution>
                        <id>server-provisioning</id>
                        <goals>
                            <goal>provision</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <provisioning-dir>${project.build.directory}/wildfly</provisioning-dir>
                            <record-provisioning-state>false</record-provisioning-state>
                            <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                            <offline-provisioning>${galleon.offline}</offline-provisioning>
                            <galleon-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                <optional-packages>passive+</optional-packages>
                            </galleon-options>
                            <feature-packs>
                                <feature-pack>
                                    <groupId>${testsuite.ee.galleon.pack.groupId}</groupId>
                                    <artifactId>${testsuite.ee.galleon.pack.artifactId}</artifactId>
                                    <version>${testsuite.ee.galleon.pack.version}</version>
                                    <inherit-configs>false</inherit-configs>
                                    <inherit-packages>false</inherit-packages>
                                    <included-configs>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone.xml</name>
                                        </config>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone-full.xml</name>
                                        </config>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone-microprofile.xml</name>
                                        </config>
                                    </included-configs>
                                </feature-pack>
                            </feature-packs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.glow</groupId>
                <artifactId>wildfly-glow-arquillian-plugin</artifactId>
                <configuration>
                    <feature-packs>
                        <feature-pack>
                            <groupId>${testsuite.ee.galleon.pack.groupId}</groupId>
                            <artifactId>${testsuite.ee.galleon.pack.artifactId}</artifactId>
                            <version>${testsuite.ee.galleon.pack.version}</version>
                        </feature-pack>
                    </feature-packs>
                    <config-name>standalone.xml</config-name>
                </configuration>
                <executions>
                    <execution>
                        <id>scan-observability</id>
                        <goals>
                            <goal>scan</goal>
                        </goals>
                        <phase>${glow.phase.observability}</phase>
                        <configuration>
                            <expected-errors>
                                <error>an add-on of the messaging family is expected by the messaging-activemq layer</error>
                                <error>jakarta.naming.Context or InitialContext lookup. Enable verbose output to see the locations.</error>
                            </expected-errors>
                            <add-layers-for-jndi>h2-datasource</add-layers-for-jndi>
                            <expected-discovery>[datasources, ee-integration, h2-datasource, jaxrs, messaging-activemq, naming, resource-adapters, servlet]==>ee-core-profile-server,h2-datasource,jaxrs,messaging-activemq</expected-discovery>
                            <surefire-execution-for-included-classes>microprofile.surefire</surefire-execution-for-included-classes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>scan-legacy-sar-layers</id>
                        <goals>
                            <goal>scan</goal>
                        </goals>
                        <phase>${glow.phase.sar}</phase>
                        <configuration>
                            <expected-discovery>[sar]==>ee-core-profile-server,sar</expected-discovery>
                            <surefire-execution-for-included-classes>legacy-sar-layers.surefire</surefire-execution-for-included-classes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-jar-maven-plugin</artifactId>
                <version>${version.org.wildfly.jar.plugin}</version>
                <executions>
                    <!-- Package a cloud-profile server -->
                    <execution>
                        <id>bootable-jar-cloud-profile-packaging</id>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <phase>${bootable-jar-cloud-profile-packaging.phase}</phase>
                        <configuration>
                            <output-file-name>test-wildfly-cloud-profile.jar</output-file-name>
                            <hollowJar>true</hollowJar>
                            <record-state>false</record-state>
                            <log-time>${galleon.log.time}</log-time>
                            <offline>true</offline>
                            <plugin-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                            </plugin-options>
                            <provisioning-file>target/glow-scan/microprofile.surefire/provisioning.xml</provisioning-file>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>quick-build</id>
            <activation>
                <property>
                    <name>quickly</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- Turn off the standard galleon provisioning (doesn't work with mvnd) -->
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>


        <profile>
            <id>standalone.microprofile.profile</id>
            <activation>
                <property>
                    <name>ts.standalone.microprofile</name>
                </property>
            </activation>
            <properties>
                <!-- We don't want to use the default jboss.dist for this module, which is provisioned locally -->
                <jboss.dist>${jbossas.project.dir}/${wildfly.build.output.dir}</jboss.dist>
                <jboss.home>${jboss.dist}</jboss.home>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <!-- Turn off the standard galleon provisioning -->
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Turn back on the standard copy based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${version.resources.plugin}</version>
                        <executions combine.self="override">
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <phase>generate-test-resources</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Tests against the standalone-microprofile.xml config -->
                            <execution>
                                <id>microprofile.surefire</id>
                                <!-- Turn on the execution that is configured outside this profile -->
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Test against slimmed servers provisioned by Galleon -->
        <profile>
            <id>layers.profile</id>
            <activation>
                <property>
                    <name>ts.layers</name>
                </property>
            </activation>
            <properties>
                <jboss.dist>${project.build.directory}/wildfly</jboss.dist>
                <glow.phase.observability>test-compile</glow.phase.observability>
                <glow.phase.sar>test-compile</glow.phase.sar>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <configuration>
                            <overwrite-provisioned-server>true</overwrite-provisioned-server>
                        </configuration>
                        <executions>
                            <!-- Provision a cloud-profile server -->
                            <execution>
                                <id>observability-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>process-test-classes</phase>
                                <configuration>
                                    <provisioning-dir>${project.build.directory}/wildfly</provisioning-dir>
                                    <record-provisioning-state>false</record-provisioning-state>
                                    <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                                    <offline-provisioning>${galleon.offline}</offline-provisioning>
                                    <galleon-options>
                                        <jboss-maven-dist/>
                                        <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                        <optional-packages>passive+</optional-packages>
                                    </galleon-options>
                                    <provisioning-file>target/glow-scan/microprofile.surefire/provisioning.xml</provisioning-file>
                                </configuration>
                            </execution>

                            <!-- Provision a server with sar support -->
                            <execution>
                                <id>legacy-sar-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>process-test-classes</phase>
                                <configuration>
                                    <provisioning-dir>${project.build.directory}/wildfly-legacy-sar</provisioning-dir>
                                    <record-provisioning-state>false</record-provisioning-state>
                                    <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                                    <offline-provisioning>${galleon.offline}</offline-provisioning>
                                    <galleon-options>
                                        <jboss-maven-dist/>
                                        <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                        <optional-packages>passive+</optional-packages>
                                    </galleon-options>
                                    <provisioning-file>target/glow-scan/legacy-sar-layers.surefire/provisioning.xml</provisioning-file>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Disable default-test -->
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>
                            <!-- Reuse the microprofile.surefire execution as the valid tests are the same.
                                 Just point to standalone.xml. -->
                            <execution>
                                <id>microprofile.surefire</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <!-- Override the standard module path that points at the shared module set from dist -->
                                        <module.path>${project.build.directory}/wildfly/modules${path.separator}${basedir}/target/modules</module.path>
                                        <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            
                            <!-- Tests against the install with legacy sar support -->
                            <execution>
                                <id>legacy-sar-layers.surefire</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <jboss.home>${project.build.directory}/wildfly-legacy-sar</jboss.home>
                                        <jboss.home.dir>${project.build.directory}/wildfly-legacy-sar</jboss.home.dir>
                                        <jbossas.dist>${project.build.directory}/wildfly-legacy-sar</jbossas.dist>
                                        <jboss.dist>${project.build.directory}/wildfly-legacy-sar</jboss.dist>
                                        <jboss.install.dir>${basedir}/target/wildfly-legacy-sar</jboss.install.dir>
                                        <!-- Override the standard module path that points at the shared module set from dist -->
                                        <module.path>${project.build.directory}/wildfly-legacy-sar/modules${path.separator}${basedir}/target/modules</module.path>
                                        <jboss.server.config.file.name>standalone.xml</jboss.server.config.file.name>
                                    </systemPropertyVariables>
                                    <environmentVariables>
                                        <JBOSS_HOME>${project.build.directory}/wildfly-legacy-sar</JBOSS_HOME>
                                    </environmentVariables>
                                    <includes>
                                        <include>org/jboss/as/test/smoke/sar/**/*TestCase.java</include>
                                    </includes>
                                </configuration>
                            </execution>
                            
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Test against bootable jar -->
        <profile>
            <id>bootablejar.profile</id>
            <activation>
                <property>
                    <name>ts.bootable</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-bootable</artifactId>
                </dependency>
            </dependencies>
            <properties>
                <bootable-jar-cloud-profile-packaging.phase>test-compile</bootable-jar-cloud-profile-packaging.phase>
                <glow.phase.observability>test-compile</glow.phase.observability>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <!-- Disable the default provisioning -->
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Disable the standard test executions. -->
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>

                            <execution>
                                <!-- We reuse the microprofile.surefire execution used for testing standalone-microprofile.xml
                                     as the set of tests we want is the same -->
                                <id>microprofile.surefire</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <install.dir>${project.build.directory}/wildfly</install.dir>
                                        <bootable.jar>${project.build.directory}/test-wildfly-cloud-profile.jar</bootable.jar>
                                        <arquillian.xml>arquillian-bootable.xml</arquillian.xml>
                                    </systemPropertyVariables>
                                    <classpathDependencyExcludes>
                                        <classpathDependencyExclude>
                                            org.wildfly.arquillian:wildfly-arquillian-container-managed
                                        </classpathDependencyExclude>
                                    </classpathDependencyExcludes>
                                </configuration>
                            </execution>

                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Test against bootable jar -->
        <profile>
            <id>bootablejar.preview.profile</id>
            <activation>
                <property>
                    <name>ts.bootable.preview</name>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-bootable</artifactId>
                </dependency>
            </dependencies>
            <properties>
                <bootable-jar-cloud-profile-packaging.phase>test-compile</bootable-jar-cloud-profile-packaging.phase>
                <glow.phase.observability>test-compile</glow.phase.observability>
                <extra.server.jvm.args>-Dmaven.repo.local=${settings.localRepository}</extra.server.jvm.args>
            </properties>
            <build>
                <plugins>
                    <!-- Disable the standard copy-based provisioning -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ts.copy-wildfly</id>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <!-- Disable the default provisioning -->
                            <execution>
                                <id>server-provisioning</id>
                                <goals>
                                    <goal>provision</goal>
                                </goals>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!-- Disable the standard test executions. -->
                            <execution>
                                <id>default-test</id>
                                <phase>none</phase>
                            </execution>

                            <execution>
                                <!-- We reuse the microprofile.surefire execution used for testing standalone-microprofile.xml
                                     as the set of tests we want is the same -->
                                <id>microprofile.surefire</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <install.dir>${project.build.directory}/wildfly</install.dir>
                                        <bootable.jar>${project.build.directory}/test-wildfly-cloud-profile.jar</bootable.jar>
                                        <arquillian.xml>arquillian-bootable.xml</arquillian.xml>
                                    </systemPropertyVariables>
                                    <classpathDependencyExcludes>
                                        <classpathDependencyExclude>
                                            org.wildfly.arquillian:wildfly-arquillian-container-managed
                                        </classpathDependencyExclude>
                                    </classpathDependencyExcludes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Test against WildFly Preview dist -->
        <profile>
            <id>preview.profile</id>
            <activation>
                <property>
                    <name>ts.preview</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <!--Re-enable the default surefire execution. -->
                            <execution>
                                <id>default-test</id>
                                <phase>test</phase>
                                <configuration>
                                     <systemPropertyVariables>
                                        <server.jvm.args>-Dmaven.repo.local=${settings.localRepository}</server.jvm.args>
                                    </systemPropertyVariables>
                                    <excludes>
                                        <!-- Requires messaging -->
                                        <exclude>org/jboss/as/test/smoke/jms/**/*TestCase.java</exclude>
                                        <exclude>org/jboss/as/test/smoke/jms/**/*Test.java</exclude>
                                        <exclude>org/jboss/as/test/smoke/messaging/ArtemisMessagingTestCase.java</exclude>
                                        <exclude>org/jboss/as/test/smoke/messaging/client/**/*TestCase.java</exclude>
                                    </excludes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
