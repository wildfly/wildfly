<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright The WildFly Authors
  ~ SPDX-License-Identifier: Apache-2.0
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-ts-integ-mp</artifactId>
        <!--
        Maintain separation between the artifact id and the version to help prevent
        merge conflicts between commits changing the GA and those changing the V.
        -->
        <version>35.0.0.Beta1-SNAPSHOT</version>
    </parent>
    <artifactId>wildfly-ts-integ-mp-rest-client</artifactId>
    <name>WildFly Test Suite: Integration - MicroProfile - REST Client TCK</name>
    <properties>
        <jbossas.ts.integ.dir>${basedir}/../..</jbossas.ts.integ.dir>
        <jbossas.ts.dir>${jbossas.ts.integ.dir}/..</jbossas.ts.dir>
        <jbossas.project.dir>${jbossas.ts.dir}/..</jbossas.project.dir>
        <!-- properties to enable plugins shared by various bootable profiles -->
        <bootable-jar-generate-properties-file.phase>none</bootable-jar-generate-properties-file.phase>
        <ts.microprofile-tck-tests-dependency>org.eclipse.microprofile.rest.client:microprofile-rest-client-tck</ts.microprofile-tck-tests-dependency>
        <ts.install-as-module-wiremock.phase>generate-test-resources</ts.install-as-module-wiremock.phase>
        <ts.add-wiremock-module.phase>process-test-resources</ts.add-wiremock-module.phase>
        <ts.wiremock-maven-plugin.phase>generate-test-sources</ts.wiremock-maven-plugin.phase>
        <!-- Setup properties -->
        <wiremock.lib.path>${project.build.directory}/wiremock</wiremock.lib.path>
        <wiremock.module.included.groupIds>org.wiremock,junit,org.eclipse.jetty</wiremock.module.included.groupIds>
        <wiremock.module.xml.path>${basedir}/module.xml</wiremock.module.xml.path>

        <!-- Wiremock dependency information -->
        <wiremock.groupId>com.github.tomakehurst</wiremock.groupId>
        <wiremock.version>${version.com.github.tomakehurst.wiremock}</wiremock.version>
        <version.wiremock-maven-plugin>7.3.0</version.wiremock-maven-plugin>

        <!-- Expose timeout property to be configurable from CLI because of environment issues -->
        <org.eclipse.microprofile.rest.client.tck.timeoutCushion>90000</org.eclipse.microprofile.rest.client.tck.timeoutCushion>
        <ts.microprofile-tck-glow.expected-discovery>[cdi, ee-integration, jaxrs, jsonb, jsonp, microprofile-config, microprofile-rest-client]==>ee-core-profile-server,jaxrs,microprofile-rest-client</ts.microprofile-tck-glow.expected-discovery>
    </properties>
    <dependencies>
        <!-- Required by the RESTEasy Client -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by the RESTEasy Client -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy.microprofile</groupId>
            <artifactId>microprofile-rest-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy.microprofile</groupId>
            <artifactId>microprofile-rest-client-base</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by the RESTEasy Client -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by the RESTEasy Client -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-core-spi</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>${wiremock.groupId}</groupId>
            <artifactId>wiremock</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Required by Wiremock for the MicroProfile REST Client TCK -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-io</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-http</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlet</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlets</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-proxy</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- End requirement -->

        <dependency>
            <groupId>org.eclipse.microprofile.rest.client</groupId>
            <artifactId>microprofile-rest-client-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.rest.client</groupId>
            <artifactId>microprofile-rest-client-tck</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.wiremock</groupId>
                    <artifactId>wiremock</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld.se</groupId>
            <artifactId>weld-se-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.common</groupId>
            <artifactId>smallrye-common-classloader</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.common</groupId>
            <artifactId>smallrye-common-constraint</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.common</groupId>
            <artifactId>smallrye-common-function</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.config</groupId>
            <artifactId>smallrye-config-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.config</groupId>
            <artifactId>smallrye-config-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.smallrye.config</groupId>
            <artifactId>smallrye-config</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-json-p-provider</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.json</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.testng</groupId>
            <artifactId>arquillian-testng-container</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by the RESTEasy Client -->
        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by the org.eclipse.microprofile.rest.client:microprofile-rest-client-tck -->
        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams-tck</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>microprofile-rest-client-${project.version}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${version.resources.plugin}</version>
                <executions combine.self="override">
                    <execution>
                        <id>ts.copy-wildfly</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>uk.co.automatictester</groupId>
                <artifactId>wiremock-maven-plugin</artifactId>
                <version>${version.wiremock-maven-plugin}</version>
                <executions>
                    <execution>
                        <phase>${ts.wiremock-maven-plugin.phase}</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <dir>target/classes</dir>
                            <params>--port=8765 --disable-banner</params>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>${wiremock.groupId}</groupId>
                        <artifactId>wiremock</artifactId>
                        <version>${wiremock.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- TODO (jrp) this is a huge hack to get around Wiremock setting the javax.xml.transform.TransformerFactory
                            system property. A real fix would be to allow Wiremock to allow not setting the property.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>wiremock-cleanup</id>
                        <phase>test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.wildfly.cleanup.WiremockCleanup</mainClass>
                            <arguments>javax.xml.transform.TransformerFactory</arguments>
                            <classpathScope>test</classpathScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>install-as-module-wiremock</id>
                        <phase>${ts.install-as-module-wiremock.phase}</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeGroupIds>${wiremock.module.included.groupIds}</includeGroupIds>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${wiremock.lib.path}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-wiremock</id>
                        <phase>${ts.install-as-module-wiremock.phase}</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${wiremock.groupId}</groupId>
                                    <artifactId>wiremock</artifactId>
                                </artifactItem>
                                <!-- This is required for the MicroProfile REST Client 3.0 TCK. This will always copy it,
                                     but we'll only use it in the 3.0 TCK runner.
                                 -->
                                <artifactItem>
                                    <groupId>org.jboss.spec.javax.servlet</groupId>
                                    <artifactId>jboss-servlet-api_4.0_spec</artifactId>
                                </artifactItem>
                            </artifactItems>
                            <stripVersion>true</stripVersion>
                            <outputDirectory>${wiremock.lib.path}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>wiremock-resource-path</id>
                        <phase>${ts.install-as-module-wiremock.phase}</phase>
                        <configuration>
                            <!-- Export the properties defined below so they can be used for the signature tests -->
                            <exportAntProperties>true</exportAntProperties>
                            <target>
                                <!-- Wiremock JAR's -->
                                <fileset id="wiremock-jars"
                                         dir="${wiremock.lib.path}">
                                    <!-- All JAR's -->
                                    <include name="**/*.jar"/>
                                </fileset>
                                <pathconvert pathsep="${path.separator}" property="wiremock.resource.path" refid="wiremock-jars"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>echo-wiremock-resource-path</id>
                        <phase>${ts.install-as-module-wiremock.phase}</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo message="wiremock.resource.path=${wiremock.resource.path}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.internetitem</groupId>
                <artifactId>write-properties-file-maven-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>generate-properties-file</id>
                        <phase>${bootable-jar-generate-properties-file.phase}</phase>
                        <goals>
                            <goal>write-properties-file</goal>
                        </goals>
                        <configuration>
                            <filename>wiremock-bootable-cli.properties</filename>
                            <properties>
                                <property>
                                    <name>wiremock.resource.path</name>
                                    <value>${wiremock.resource.path}</value>
                                </property>
                                <property>
                                    <name>module.xml.path</name>
                                    <value>${wiremock.module.xml.path}</value>
                                </property>
                                <property>
                                    <name>beansxml.path</name>
                                    <value>${basedir}/beans.xml</value>
                                </property>
                            </properties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.org.wildfly.plugin}</version>
                <configuration>
                    <overwrite-provisioned-server>true</overwrite-provisioned-server>
                </configuration>
                <executions>
                    <execution>
                        <id>add-wiremock-module</id>
                        <phase>${ts.add-wiremock-module.phase}</phase>
                        <goals>
                            <goal>execute-commands</goal>
                        </goals>
                        <configuration>
                            <offline>true</offline>
                            <jboss-home>${basedir}/target/wildfly</jboss-home>
                            <stdout>${project.build.directory}/wildfly/standalone/log/wildfly-wiremock.log</stdout>
                            <java-opts>${modular.jdk.args}</java-opts>
                            <system-properties>
                                <maven.repo.local>${maven.repo.local}</maven.repo.local>
                                <module.path>${project.build.directory}/wildfly/modules</module.path>
                                <beansxml.path>${basedir}/beans.xml</beansxml.path>
                            </system-properties>
                            <commands>
                                <command>module add --name=org.wiremock --resources=${wiremock.resource.path} --module-xml=${wiremock.module.xml.path}</command>
                            </commands>
                            <scripts>
                                <script>wiremock.cli</script>
                            </scripts>
                        </configuration>
                    </execution>
                    <execution>
                        <id>mp-server-provisioning</id>
                        <goals>
                            <goal>provision</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <provisioning-dir>${project.build.directory}/wildfly</provisioning-dir>
                            <record-provisioning-state>false</record-provisioning-state>
                            <log-provisioning-time>${galleon.log.time}</log-provisioning-time>
                            <offline-provisioning>${galleon.offline}</offline-provisioning>
                            <galleon-options>
                                <optional-packages>passive+</optional-packages>
                            </galleon-options>
                            <feature-packs>
                                <feature-pack>
                                    <groupId>${testsuite.full.galleon.pack.groupId}</groupId>
                                    <artifactId>${testsuite.full.galleon.pack.artifactId}</artifactId>
                                    <version>${testsuite.full.galleon.pack.version}</version>
                                    <inherit-configs>false</inherit-configs>
                                    <inherit-packages>false</inherit-packages>
                                    <included-configs>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone.xml</name>
                                        </config>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone-full.xml</name>
                                        </config>
                                        <config>
                                            <model>standalone</model>
                                            <name>standalone-microprofile.xml</name>
                                        </config>
                                    </included-configs>
                                </feature-pack>
                            </feature-packs>
                        </configuration>
                    </execution>
                     <!-- Override the bootable jar packaging from the parent to add res-client tck specific settings -->
                    <execution>
                        <id>bootable-jar-packaging</id>
                        <configuration>
                            <packaging-scripts>
                                <cli-session>
                                    <javaOpts>
                                        <opt>-Dmaven.repo.local=${maven.repo.local}</opt>
                                    </javaOpts>
                                    <scripts>
                                        <script>wiremock-bootable.cli</script>
                                    </scripts>
                                    <propertiesFiles>${project.build.outputDirectory}/wiremock-bootable-cli.properties</propertiesFiles>
                                </cli-session>
                            </packaging-scripts>
                            <feature-packs>
                                <feature-pack>
                                    <groupId>${testsuite.full.galleon.pack.groupId}</groupId>
                                    <artifactId>${testsuite.full.galleon.pack.artifactId}</artifactId>
                                    <version>${testsuite.full.galleon.pack.version}</version>
                                    <!-- The wiremock module we add as part of the test fixture needs Apache Commons Lang
                                    but the layers we want don't result in it being provisioned, so explicitly tell Galleon to
                                    provision it. -->
                                    <included-packages>
                                        <package>org.apache.commons.lang3</package>
                                    </included-packages>
                                </feature-pack>
                            </feature-packs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.wildfly.glow</groupId>
                <artifactId>wildfly-glow-arquillian-plugin</artifactId>
                <configuration>
                    <feature-packs>
                        <feature-pack>
                            <!-- Child modules can set properties to override what feature pack is used -->
                            <groupId>${ts.microprofile-tck-provisioning.fp.groupId}</groupId>
                            <artifactId>${ts.microprofile-tck-provisioning.fp.artifactId}</artifactId>
                            <version>${ts.microprofile-tck-provisioning.fp.version}</version>
                            <included-packages>
                                <package>org.apache.commons.lang3</package>
                            </included-packages>
                        </feature-pack>
                    </feature-packs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <dependenciesToScan>
                        <dependency>${ts.microprofile-tck-tests-dependency}</dependency>
                    </dependenciesToScan>
                    <systemPropertyVariables>
                        <!-- Override the standard module path that points at the shared module set from the dist -->
                        <module.path>${project.build.directory}/wildfly/modules</module.path>
                        <jboss.inst>${basedir}/target/wildfly</jboss.inst>
                        <jboss.install.dir>${basedir}/target/wildfly</jboss.install.dir>
                        <jboss.server.config.file.name>standalone-microprofile.xml</jboss.server.config.file.name>
                        <!--
                            1) -Dts.include.servlet.4=true is needed due to https://github.com/eclipse/microprofile-rest-client/issues/346
                            2) The TCK deployments include javax.servlet stuff for integration with Jetty. Don't transform.
                        -->
                        <microprofile.jvm.args>${microprofile.jvm.args} -Dts.include.servlet.4=true -Dorg.eclipse.microprofile.rest.client.tck.timeoutCushion=${org.eclipse.microprofile.rest.client.tck.timeoutCushion} -Dorg.wildfly.unsupported.skip.jakarta.transformer=true</microprofile.jvm.args>
                        <test.url>http://localhost:8080</test.url>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>

        <!-- Test against slimmed servers provisioned by Galleon -->
        <profile>
            <id>layers.profile</id>
            <activation>
                <property>
                    <name>ts.layers</name>
                </property>
            </activation>
            <properties>
                <!-- Enable galleon provisioning -->
                <ts.microprofile-tck-glow.phase>test-compile</ts.microprofile-tck-glow.phase>
                <ts.microprofile-tck-provisioning.phase>test-compile</ts.microprofile-tck-provisioning.phase>
                <ts.add-wiremock-module.phase>process-test-classes</ts.add-wiremock-module.phase>
                <ts.install-as-module-wiremock.phase>process-test-resources</ts.install-as-module-wiremock.phase>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <!-- Disable the default provisioning -->
                                <id>mp-server-provisioning</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>bootablejar.profile</id>
            <activation>
                <property>
                    <name>ts.bootable</name>
                </property>
            </activation>
            <properties>
                <!-- Enable bootable jar packaging -->
                <ts.bootable-jar-packaging.phase>process-test-resources</ts.bootable-jar-packaging.phase>
                <bootable-jar-generate-properties-file.phase>process-test-resources</bootable-jar-generate-properties-file.phase>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <!-- Disable the default provisioning -->
                                <id>mp-server-provisioning</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <!-- Disable the default module addition -->
                                <id>add-wiremock-module</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <profile>
            <id>bootablejar.preview.profile</id>
            <activation>
                <property>
                    <name>ts.bootable.preview</name>
                </property>
            </activation>
            <properties>
                <!-- Enable bootable jar packaging -->
                <ts.bootable-jar-packaging.phase>process-test-resources</ts.bootable-jar-packaging.phase>
                <bootable-jar-generate-properties-file.phase>process-test-resources</bootable-jar-generate-properties-file.phase>
                <!-- Setup properties -->
                <wiremock.module.xml.path>${basedir}/config/preview/module.xml</wiremock.module.xml.path>
                <wiremock.module.included.groupIds>org.wiremock,org.apache.httpcomponents.client5,org.apache.httpcomponents.core5,junit,org.eclipse.jetty</wiremock.module.included.groupIds>

                <wiremock.groupId>org.wiremock</wiremock.groupId>
                <wiremock.version>${version.org.wiremock}</wiremock.version>

                <ts.microprofile-tck-glow.expected-discovery>[cdi, ee-integration, jaxrs, jsonb, jsonp, microprofile-config, microprofile-rest-client, servlet]==>ee-core-profile-server,jaxrs,microprofile-rest-client</ts.microprofile-tck-glow.expected-discovery>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-multipart-provider</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <!-- Disable the default provisioning -->
                                <id>mp-server-provisioning</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <!-- Disable the default module addition -->
                                <id>add-wiremock-module</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Test against the preview feature pack -->
        <profile>
            <id>preview.test.profile</id>
            <activation>
                <property>
                    <name>ts.preview</name>
                </property>
            </activation>
            <properties>
                <!-- Enable galleon provisioning -->
                <ts.microprofile-tck-provisioning.phase>test-compile</ts.microprofile-tck-provisioning.phase>
                <ts.microprofile-tck-glow.phase>test-compile</ts.microprofile-tck-glow.phase>
                <ts.add-wiremock-module.phase>process-test-classes</ts.add-wiremock-module.phase>
                <ts.install-as-module-wiremock.phase>process-test-resources</ts.install-as-module-wiremock.phase>
                <!-- Setup properties -->
                <wiremock.module.xml.path>${basedir}/config/preview/module.xml</wiremock.module.xml.path>
                <wiremock.module.included.groupIds>org.wiremock,org.apache.httpcomponents.client5,org.apache.httpcomponents.core5,junit,org.eclipse.jetty</wiremock.module.included.groupIds>

                <wiremock.groupId>org.wiremock</wiremock.groupId>
                <wiremock.version>${version.org.wiremock}</wiremock.version>

                <ts.microprofile-tck-glow.expected-discovery>[cdi, ee-integration, jaxrs, jsonb, jsonp, microprofile-config, microprofile-rest-client, servlet]==>ee-core-profile-server,jaxrs,microprofile-rest-client</ts.microprofile-tck-glow.expected-discovery>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-multipart-provider</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <version>${version.org.wildfly.plugin}</version>
                        <executions>
                            <execution>
                                <!-- Disable the default provisioning -->
                                <id>mp-server-provisioning</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Skip TCK testing on Windows due to issues with beans.xml deployment overlay -->
        <profile>
            <id>noWindowsTesting</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
