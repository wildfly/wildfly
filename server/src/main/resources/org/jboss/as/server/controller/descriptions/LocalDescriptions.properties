# Server root
server=The root node of the server-level management model.
server.namespaces=Map of namespaces used in the configuration XML document, where keys are namespace prefixes and values are schema URIs.
server.schema-locations=Map of locations of XML schemas used in the configuration XML document, where keys are schema URIs and values are locations where the schema can be found.
server.name=The name of this server. If not set, defaults to the runtime value of InetAddress.getLocalHost().getHostName().
server.extension=A list of extension modules.
server.path=A list of named filesystem paths.
server.core-service=Core services provided by the server.
server.management=Specifies the enabled management protocols for the server
server.profile-name=The name of the server's configuration profile.
server.subsystem=The subsystems that make up the server's profile.
server.interface=A list of named network interfaces available for use on the server.
server.socket-binding-group=A list of socket bindings available for use on the server.
server.system-property=A list of system properties to set on the server.
server.deployment=A list of deployments available for use on the server.
server.deployment-overlay=A list of deployment overlays available for use by the server
server.deployment-overlay-link=A set of links between a deployment overlay and a deployment
server.server-group=The name of the server group of which this server is a member.
server.host=The name of the managed domain host that is responsible for managing this server.
server.server-state=The current state of the server controller; either STARTING, RUNNING or RESTART_REQUIRED
server.running-mode=The current running mode of the server. Either NORMAL (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.process-type=The type of process represented by this root resource. Always has a value of "Server" for a server resource.
server.launch-type=The manner in which the server process was launched. Either "DOMAIN" for a domain mode server launched by a Host Controller, "STANDALONE" for a standalone server launched from the command line, or "EMBEDDED" for a standalone server launched as an embedded part of an application running in the same virtual machine.
server.release-version=The version of the JBoss Application Server release this server is running.
server.release-codename=The codename of the JBoss Application Server release this server is running.
server.product-name=The name of the JBoss AS based product that is being run by this server.
server.product-version=The version of the JBoss AS based product release that is being run by this server.
server.management-major-version=The major version of the JBoss AS management interface that is provided by this server.
server.management-minor-version=The minor version of the JBoss AS management interface that is provided by this server.
server.management-micro-version=The micro version of the JBoss AS management interface that is provided by this server.
server.env=The server environment.
server.env.base-dir=The base directory for JBoss Application Server.
server.env.config-dir=The directory where the configurations are stored.
server.env.content-dir=The directory where user content (e.g. deployments) that is managed by the server is stored.
server.env.config-file=The configuration file used to launch JBoss Application Server.
server.env.data-dir=The data directory.
server.env.deploy-dir=Deprecated variant of 'content-dir'.
server.env.ext-dirs=A list of ext directories.
server.env.home-dir=The home directory for JBoss Application Server.
server.env.host-name=The host name.
server.env.launch-type=The type of the running server.
server.env.log-dir=The directory where log files are sent.
server.env.modules-dir=The directory where modules are found.
server.env.node-name=The name of the server node.
server.env.qualified-host-name=The qualified host name.
server.env.initial-running-mode=The current running mode of the server. Either LIVE (normal operations) or ADMIN_ONLY.  An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.env.server-name=The name of the server.
server.env.temp-dir=The temporary directory.

server.reload=Reloads the server by shutting down all its services and starting again. The JVM itself is not restarted.
server.reload.admin-only=Whether the server should start in running mode ADMIN_ONLY when it restarts. An ADMIN_ONLY server will start any configured management interfaces and accept management requests, but will not start services used for handling end user requests.
server.reload.use-current-server-config=Only has an effect if --read-only-server-config was specified when starting the server. In that case, if this parameter is set to false the reloaded server loads the original configuration version; if null or true the current runtime version of the model is used.

# Lifecycle methods for the domain

server.start=Start a server.
server.start.blocking=Whether the operation should block and wait until the server is started.
server.start.reply=The status of the server following execution of this operation.
server.restart=Restart a currently running server.
server.restart.blocking=Whether the operation should block and wait until the server is restarted.
server.restart.reply=The status of the server following execution of this operation.
server.stop=Stop a currently running server.
server.stop.blocking=Whether the operation should block and wait until the server is stopped.
server.stop.reply=The status of the server following execution of this operation.

server.set-server-group-hosts=Internal operation passed in at boot to set the server group and host.

# Management
#core.management=The management services used to control a server.
#core.management.security-realms=The security realms available for controlling access to the management services.
#core.management.security-realm=A security realm that can be associated with a management interface and used to control access to the management services.
#core.management.security-realm.add=Adds a security realm that can be associated with a management interface and used to control access to the management services.
#core.management.outbound-connections=Configurations of connection factories that can be used by a security realm to access external source of authentication and authorization information (e.g. an LDAP server).
#core.management.outbound-connection=A connection factory that can be used by a security realm to access external source of authentication and authorization information (e.g. an LDAP server).
#core.management.outbound-connection.add=Adds a connection factory that can be used by a security realm to access external source of authentication and authorization information (e.g. an LDAP server).
#core.management.management-interfaces=Interfaces exposed by the management services to allow external callers to perform management tasks.
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.add=Adds the server's native management interface
core.management.native-interface.remove=Removes the server's native management interface
core.management.native-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.interface.deprecated=Use 'socket-binding'.
core.management.native-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.port.deprecated=Use 'socket-binding'.
core.management.native-interface.security-realm=The security realm to use for the native management interface.
core.management.native-interface.socket-binding=The name of the socket binding configuration to use for the native management interface's socket.
core.management.native-remoting-interface=Configuration of the server's native management interface using a connector from the remoting subsystem.
core.management.native-remoting-interface.add=Adds the server's native management interface using a connector from the remoting subsystem.
core.management.native-remoting-interface.remove=Removes the server's native management interface using a connector from the remoting subsystem.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.remove=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Deprecated -- use 'socket-binding'. The network interface on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.interface.deprecated=Use 'socket-binding'.
core.management.http-interface.port=Deprecated -- use 'socket-binding'. The port on which the server's socket for HTTP management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.http-interface.port.deprecated=Use 'socket-binding'.
core.management.http-interface.secure-port=Deprecated -- use 'secure-socket-binding'. The port on which the server's socket for HTTPS management communication should be opened. Must be 'undefined' if the 'socket-binding' or 'secure-socket-binding' attribute is set.
core.management.http-interface.secure-port.deprecated=Use 'secure-socket-binding'.
core.management.http-interface.security-realm=The security realm to use for the HTTP management interface.
core.management.http-interface.socket-binding=The name of the socket binding configuration to use for the HTTP management interface's socket.
core.management.http-interface.secure-socket-binding=The name of the socket binding configuration to use for the HTTPS management interface's socket.
core.management.http-interface.console-enabled=Flag that indicates admin console is enabled
core.management.http-interface.http-upgrade-enabled=Flag that indicates HTTP Upgrade is enabled, which allows HTTP requests to be upgraded to native remoting connections
core.service-container=The central container that manages all services in a running standalone server or in a host controller in a management domain.
core.module-loading=The modular classloading system.
core.module-loading.module-roots=A list of filesystem locations under which the module loading system looks for modules, arranged in order of precedence.
core.module-loading.module-roots.deprecated=Experimental and unsupported.
core.module-loading.module-roots.module-root=Filesystem location under which the module loading system looks for modules.
core.module-loading.list-resource-loader-paths=Provides a list of filesystem paths of the module, if there are any and the module loader exposes them.
core.module-loading.list-resource-loader-paths.module=The identifier of the module, in <name>[:<slot>] format. If the slot is not provided, a value of "main" is assumed.
core.module-loading.list-resource-loader-paths.reply=A list, each of whose elements is a filesystem location from which the module can load resources.
core.module-loading.list-resource-loader-paths.deprecated=Experimental and unsupported.

# Interfaces
interface.resolve-internet-address=Takes a set of interface resolution criteria and finds an IP address on the local machine that matches the criteria, or fails if no matching IP address can be found.

# Deployments
deployment.remove=Remove a deployment from the list of content available for use. If the deployment is currently deployed in the runtime it will first be undeployed.

#vault
vault=Security Vault for attributes.
vault.code=Fully Qualified Name of the Security Vault Implementation.
vault.module=The name of the module to load up the vault implementation from.

#vault.option=Security Vault option.
vault.vault-options=Security Vault options.
vault.add=Add the Security Vault.
vault.remove=Remove the Security Vault.

# System Properties
# resource descriptions
system-property.server=A system property to set on the server.
system-property.domain=A system property to set on all servers in the domain.
system-property.server-group=A system property to set on all servers in this server-group.
system-property.host=A system property to set on all servers on the host.
system-property.server-config=A system property to set on this server.
# attribute and op descriptions
system-property.add=Adds a system property or updates an existing one.
system-property.remove=Removes a system property.
system-property.value=The value of the system property.
system-property.boot-time=If true the system property is passed on the command-line to the started server jvm. If false, it will be pushed to the server as part of the startup sequence.

# Operations
composite=An operation that executes a list of other operations as a unit.
composite.steps=A list, where each item in the list has the same structure as a simple operation request.
composite.result=A list, where each item in the list is the result for the equivalently positioned item in the 'steps' parameter list
shutdown=Shuts down the server via a call to System.exit(0)
shutdown.restart=If true, once shutdown the server will be restarted again
dump-services=Dumps all services running in the container, including their status and dependency information.
restart-required=Puts the server into a restart-required mode.
server-set-restart-required=Puts the server into a restart-required mode.

# Deployments
deployment=A deployment represents anything that can be deployed (e.g. an application such as EJB-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.
deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.content=List of pieces of content that comprise the deployment.
deployment.enabled=Boolean indicating whether the deployment content is currently deployed in the runtime (or should be deployed in the runtime the next time the server starts.)
deployment.persistent=Boolean indicating whether the existence of the deployment should be recorded in the persistent server configuration. Only relevant to a standalone mode server. Default is 'true'. A deployment managed by a deployment scanner would have this set to 'false' to ensure the deployment is only deployed at server start if the scanner again detects the deployment.
deployment.add=Adds previously uploaded content to the list of content available for use. Does not actually deploy the content unless the 'enabled' parameter is 'true'.
deployment.deploy=Deploy the specified deployment content into the runtime, optionally replacing existing content.
deployment.deploy.name=The name of the new content.
deployment.deploy.to-replace=The name of the content that is to be replaced.
deployment.replace-deployment=Replace existing content in the runtime with new content. The new content must have been previously uploaded to the deployment content repository.
deployment.replace-deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.replace-deployment.content=List of pieces of content that comprise the deployment.
deployment.replace-deployment.name=The name of the new content.
deployment.replace-deployment.to-replace=The name of the content that is to be replaced.
deployment.full-replace-deployment=Add previously uploaded deployment content to the list of content available for use, replace existing content of the same name in the runtime, and remove the replaced content from the list of content available for use. This is equivalent to an 'add', 'undeploy', 'deploy', 'remove' sequence where the new content has the same name as the content being replaced. Precisely one of 'runtime-name', 'hash', 'input-stream-index', 'bytes' or 'url' must be specified.
deployment.full-replace-deployment.content=List of pieces of content that comprise the deployment.
deployment.full-replace-deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.full-replace-deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.undeploy=Undeploy content from the runtime. The content remains in the list of content available for use.
deployment.redeploy=Undeploy existing content from the runtime and deploy it again.
deployment.status=The current runtime status of a deployment. Possible status modes are OK, FAILED, and STOPPED. FAILED indicates a dependency is missing or a service could not start. STOPPED indicates that the deployment was not enabled or was manually stopped.
deployment.subsystem=Runtime resources created when the deployment is deployed, organized by the subsystem responsible for the runtime resource.
deployment.subdeployment=Runtime resources associated with a child deployment packaged inside another deployment; for example a war packaged inside an ear.
deployment.content.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.content.input-stream-index=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.content.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository.
deployment.content.path=Path (relative or absolute) to unmanaged content that is part of the deployment.
deployment.content.relative-to=Name of a system path to which the value of the 'path' is relative. If not set, the 'path' is considered to be absolute.
deployment.content.archive=Flag indicating whether unmanaged content is a zip archive (true) or exploded (false).
deployment.content.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-deployment-bytes=Indicates that the deployment content in the included byte array should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-bytes.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-bytes.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-url=Indicates that the deployment content available at the included URL should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-url.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-deployment-url.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-stream=Indicates that the deployment content available at the included input stream index should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.upload-deployment-stream.input-stream-index=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.upload-deployment-stream.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.

