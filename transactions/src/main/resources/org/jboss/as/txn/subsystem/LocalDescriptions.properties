transactions=The configuration of the transaction subsystem.
transactions.add=Adds the transaction subsystem
transactions.remove=Removes the transaction subsystem

transactions.configuration=various environment configuration. It could refer to core, recovery, coordinator environment and to object store configs.

transactions.node-identifier=Used to set the node identifier on the core environment. Each Xid that Transaction Manager creates will have this identifier encoded within it and ensures Transaction Manager will only recover branches which match the specified identifier. It is imperative that this identifier is unique between Application Server instances which share either an object store or access common resource managers.
transactions.process-id-uuid=Indicates whether the transaction manager should use a UUID based process id.
transactions.process-id-socket-binding=The name of the socket binding configuration to use if the transaction manager should use a socket-based process id. Will be 'undefined' if 'process-id-uuid' is 'true'; otherwise must be set.
transactions.process-id-socket-max-ports=The maximum number of ports to search for an open port if the transaction manager should use a socket-based process id. If the port specified by the socket binding referenced in 'process-id-socket-binding' is occupied, the next higher port will be tried until an open port is found or the number of ports specified by this attribute have been tried. Will be 'undefined' if 'process-id-uuid' is 'true'.
transactions.jts=If true this enables the Java Transaction Service. Use of the JTS needs configuration in IIOP OpenJDK where Transactions parameter needs to be set to full.
transactions.use-journal-store=Use the journal store for writing transaction logs. Set to true to enable and to false to use the default log store type. The default log store creates normally one file system file per transaction log. The journal one consists from one file for all the transactions. It's alternative to jdbc based store.
transactions.journal-store-enable-async-io=Whether AsyncIO should be enabled for the journal store. For this settings being active journal natives libraries needs to be available.
transactions.use-hornetq-store=Use the journal store for writing transaction logs. Set to true to enable and to false to use the default log store type. The default log store is normally one file system file per transaction log.It's alternative to jdbc based store.
transactions.use-hornetq-store.deprecated=Use use-journal-store
transactions.hornetq-store-enable-async-io=Whether AsyncIO should be enabled for the journal store.
transactions.hornetq-store-enable-async-io.deprecated=Use journal-store-enable-async-io

transactions.use-jdbc-store=Use the jdbc store for writing transaction logs. Set to true to enable and to false to use the default log store type. The default log store is normally one file file per transaction log. It's alternative to journal based store.
transactions.jdbc-store-datasource=Jndi name of non-XA datasource used. Datasource sghould be define in datasources subsystem. For this would work the non-XA datasource has to be marked as jta="false".
transactions.jdbc-state-store-table-prefix=Optional prefix for table used to write transaction logs in configured jdbc state store.
transactions.jdbc-state-store-drop-table=Configure if jdbc state store should drop tables.
transactions.jdbc-action-store-table-prefix=Optional prefix for table used to write transaction logs in configured jdbc action store.
transactions.jdbc-action-store-drop-table=Configure if jdbc action store should drop tables.
transactions.jdbc-communication-store-table-prefix=Optional prefix for table used to write transaction logs in configured jdbc communication store.
transactions.jdbc-communication-store-drop-table=Configure if jdbc communication store should drop tables.

transactions.socket-binding=Used to reference the correct socket binding to use for the recovery environment.
transactions.status-socket-binding=Used to reference the correct socket binding to use for the transaction status manager.
transactions.recovery-listener=Used to specify if the recovery system should listen on a network socket or not.

transactions.statistics-enabled=Whether transaction statistics should be gathered.
transactions.enable-statistics=Whether transaction statistics should be gathered.
transactions.enable-statistics.deprecated=Use statistics-enabled.
transactions.enable-tsm-status=Whether the transaction status manager (TSM) service, needed for out of process recovery, should be provided or not.
transactions.default-timeout=The default timeout for a transaction managed by the transaction manager.
transactions.maximum-timeout=The maximum timeout for a transaction managed by the transaction manager.

transactions.object-store-path=Denotes a relative or absolute filesystem path denoting where the transaction manager object store should store data. By default the value is treated as relative to the path denoted by the "relative-to" attribute. This settings is valid when default or journal store is used. It's not used when jdbc journal store is used.
transactions.object-store-relative-to=References a global path configuration in the domain model, defaulting to the Application Server data directory (jboss.server.data.dir). The value of the "Object store path" attribute will treated as relative to this path. Undefine this attribute to disable the default behavior and force the value of the "Object store path" attribute to be treated as an absolute path.

transactions.number-of-transactions=The total number of transactions (top-level and nested) created
transactions.number-of-nested-transactions=The total number of nested (sub) transactions created.
transactions.number-of-heuristics=The number of transactions which have terminated with heuristic outcomes.
transactions.number-of-committed-transactions=The number of committed transactions.
transactions.number-of-aborted-transactions=The number of aborted (i.e. rolledback) transactions.
transactions.number-of-inflight-transactions=The number of transactions that have begun but not yet terminated.
transactions.number-of-timed-out-transactions=The number of transactions that have rolled back due to timeout.
transactions.number-of-application-rollbacks=The number of transactions that have been rolled back by application request. This includes those that timeout, since the timeout behavior is considered an attribute of the application configuration.
transactions.number-of-resource-rollbacks=The number of transactions that rolled back due to resource (participant) failure.
transactions.number-of-system-rollbacks=The number of transactions that have been rolled back due to internal system errors.
transactions.average-commit-time=The average time of transaction commit in nanoseconds, measured from the moment the client calls commit until the transaction manager determines that the commit attempt was successful.

transactions.log-store.transaction.delete=Remove this transaction log. WARNING after this operation the transaction manager will have no knowledge of the transaction and will therefore never be able to recover it. If you are sure that the transaction is complete then the operation is safe. The representation of the transaction log is removed from the model too.
transactions.log-store.transaction.participant.refresh=Refresh the management view of the attributes of this participant record by querying the transaction log. (Note that the read-resource operaton only reads the model, hence the need for this refresh operation).
transactions.log-store.transaction.participant.recover=If this record is in a heuristic state then attempt to replay the commit phase of the 2PC transaction.
transactions.log-store.transaction.participant.delete=Attempt to remove this participant from its containing transaction log. If the participant is an XA resource and if it is in a heuristic state then attempt will be made to call forget on the actual resource and if the forget call fails then the remove operation will also fail.

transactions.log-store=Representation of the transaction logging storage mechanism.
transactions.log-store.add=Add a representation of the transaction logging storage mechanism.
transactions.log-store.probe=Scan for new transaction logs. This operation will creates a child for each pending transaction.
transactions.log-store.remove=Remove a representation of the transaction logging storage mechanism.
transactions.log-store.type=Specifies the implementation type of the logging store.
transactions.log-store.expose-all-logs=Whether to expose all logs like orphans etc. By default only a subset of transaction logs is exposed.
transactions.log-store.transactions=The persistent information that the transaction manager stores for the purpose of recovering a transaction in the event of failure. The probe operation will add and remove transactions from the model as the corresponding real transactions start and finish the prepare and commit phases. A stuck transaction will remain in the model until either it is completed or explicitly removed by the delete operation.
transactions.log-store.transaction=The persistent information that the transaction manager stores for the purpose of recovering a transaction in the event of failure. The probe operation will add and remove transactions from the model as the corresponding real transactions start and finish the prepare and commit phases. A stuck transaction will remain in the model until either it is completed or explicitly removed by the delete operation.
transactions.log-store.transaction.add=Add a transaction to log-store.
transactions.log-store.transaction.jmx-name=The JMX name of this transaction.
transactions.log-store.transaction.id=The id of this transaction.
transactions.log-store.transaction.age-in-seconds=The time since this transaction was prepared or when the recovery system last tried to recover it.
transactions.log-store.transaction.type=The type name under which this record is stored.
transactions.log-store.transaction.participants=The resources that did work in a transaction.
transactions.log-store.transaction.participant=The resources that did work in a transaction.
transactions.log-store.transaction.participant.jmx-name=The JMX name of this participant.
transactions.log-store.transaction.participant.add=Add a transaction participant to a transaction log.
transactions.log-store.transaction.participant.status=Reports the commitment status of this participant (can be one of Pending, Prepared, Failed, Heuristic or Readonly).
transactions.log-store.transaction.participant.jndi-name=JNDI name of this participant.
transactions.log-store.transaction.participant.type=The type name under which this record is stored.
transactions.log-store.transaction.participant.eis-product-name=The JCA enterprise information system's product name.
transactions.log-store.transaction.participant.eis-product-version=The JCA enterprise information system's product version

transactions.commit-markable-resource=a CMR resource (i.e. a local resource that can reliably participate in an XA transaction)
transactions.commit-markable-resource.add=add a single CMR resource
transactions.commit-markable-resource.remove=remove a single CMR resource
transactions.commit-markable-resource.name=table name for storing XIDs
transactions.commit-markable-resource.jndi-name=JNDi name of this CMR resource
transactions.commit-markable-resource.xid-location=Name of database table associated to this CMR resource
transactions.commit-markable-resource.batch-size=Batch size for this CMR resource
transactions.commit-markable-resource.immediate-cleanup=Immediate cleanup associated to this CMR resource
