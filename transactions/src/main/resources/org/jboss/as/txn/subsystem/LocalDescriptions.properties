transactions=The configuration of the transaction subsystem.
transactions.add=Adds the transaction subsystem.
transactions.remove=Removes the transaction subsystem.

transactions.configuration=Various environment configuration. It could refer to core, recovery, coordinator environment, to object store configs and WildFly Transaciton Client.

transactions.node-identifier=Used to set the node identifier. Each Xid that the transaction manager creates will have this identifier encoded within it and ensures the transaction manager will only recover branches which match the specified identifier. It is imperative that this identifier is unique between application server instances which share either an object store or access common resource managers.
transactions.process-id-uuid=Indicates a strategy used for obtaining a unique identifier needed for creation of transaction instances. When true then the transaction manager generates the transaction id based on process id (PID). When set to false then the transaction manager generates the transaction id based on the referenced socket binding, i.e. the attribute 'process-id-socket-binding' is required.
transactions.process-id-socket-binding=The name of the socket binding to use if the transaction manager should use a socket-based generation of transaction id. Will be 'undefined' if 'process-id-uuid' is 'true'; otherwise must be set.
transactions.process-id-socket-max-ports=The maximum number of ports to search for an open port if the transaction manager should use a socket-based generation of transaction id. If the port specified by the socket binding referenced in 'process-id-socket-binding' is occupied, the next higher port will be tried until an open port is found or the number of ports specified by this attribute have been tried. Will be 'undefined' if 'process-id-uuid' is 'true'.
transactions.jts=If true, this enables the Java Transaction Service (JTS). If JTS is enabled then the transactions attribute of the 'iiop-openjdk' subsystem must be set to 'full'. This setting changes the internal mechanisms used in the transaction manager. It has no impact on the user working with JTA API.
transactions.use-journal-store=Use the journal store for writing transaction logs. The journal store consists of one file for all the transactions. Set to true to enable. Note that the server will not boot if both 'use-journal-store' and 'use-jdbc-store' attributes are set to true. If both are set to false then the default filesystem based store will be used.
transactions.journal-store-enable-async-io=Whether AsyncIO should be enabled for the journal store. When true, the transaction manager will use the native aio (POSIX asynchronous I/O) libraries provided by the platform, if available. Applicable only when use-journal-store is set true.
transactions.use-hornetq-store=Use the journal store for writing transaction logs. Set to true to enable and to false to use the default log store type. The default log store is normally one file system file per transaction log.It's alternative to jdbc based store.
transactions.use-hornetq-store.deprecated=Use use-journal-store.
transactions.hornetq-store-enable-async-io=Whether AsyncIO should be enabled for the journal store.
transactions.hornetq-store-enable-async-io.deprecated=Use journal-store-enable-async-io.

transactions.use-jdbc-store=Use the jdbc store for writing transaction logs. Data is saved in the database indicated by the 'jdbc-store-datasource' attribute. Set to true to enable. Note that the server will not boot if both 'use-journal-store' and 'use-jdbc-store' attributes are set to true. If both are set to false then the default filesystem based store will be used.
transactions.jdbc-store-datasource=The JNDI name of a non-XA datasource (i.e. one whose 'jta' attribute is set to false) to be used for the JDBC store. The datasource must be defined in the datasources subsystem.
transactions.jdbc-state-store-table-prefix=Optional prefix for the name of the database table used for writing transaction log records of the state store type.
transactions.jdbc-state-store-drop-table=If set to true then the jdbc-state-store table will be dropped during application server startup.
transactions.jdbc-action-store-table-prefix=Optional prefix for the name of the database table used for writing transaction log records of the action store type.
transactions.jdbc-action-store-drop-table=If set to true then the jdbc-action-store table will be dropped during application server startup.
transactions.jdbc-communication-store-table-prefix=Optional prefix for the name of the database table used for writing transaction log records of the communication store type.
transactions.jdbc-communication-store-drop-table=If set to true then the jdbc-communication-store table will be dropped during application server startup.

transactions.socket-binding=References an existing socket binding that the transaction manager will listen on for recovery requests.
transactions.status-socket-binding=References an existing socket binding that the transaction manager will listen on for transaction status requests.
transactions.recovery-listener=Used to specify if the recovery system should listen on a network socket or not. When true the application server binds to a socket at the port defined by the 'socket-binding' attribute. When the recovery listener is activated the user can remotely control the recovery manager.
transactions.recovery-period=Number of seconds to wait before launching next periodic recovery scan.
transactions.recovery-backoff-period=Number of seconds between the first (top-down) and the second (bottom-up) part of the periodic recovery scan.
transactions.orphan-safety-interval=Number of milliseconds which defines safety interval timeout during any participant is not considered as orphan during recovery processing. Orphaned participants are considered for rollback.
transactions.disable-recovery-before-suspend=When true the periodic recovery is stopped when the application server is suspended. When false the periodic recovery is *not* stopped and it does not permit to suspend the server until any in-doubt transaction exists in the Narayana object store.

transactions.statistics-enabled=Whether transaction statistics should be gathered. The statistics are available by reading subsystem attributes prefixed with 'number-' and within the 'average-commit-time' attribute.
transactions.enable-statistics=Whether transaction statistics should be gathered.
transactions.enable-statistics.deprecated=Use statistics-enabled.
transactions.enable-tsm-status=Set to 'true' to enable the transaction status manager (TSM) service (used for out of process recovery). When 'true' the application server binds to the socket defined by the 'status-socket-binding' attribute.
transactions.default-timeout=The default timeout, in seconds, for a new transaction started by the transaction manager (see also the 'maximum-timeout' attribute).
transactions.maximum-timeout=If the 'default-timeout' attribute is zero then this value is used for setting the maximum timeout value (in seconds) for newly started transactions.

transactions.object-store-path=Denotes a path where the transaction manager object store should store data. By default the value is treated as relative to the path denoted by the 'relative-to' attribute. When the 'relative-to' attribute is undefined the value is considered an absolute path. This setting is valid when default or journal store is used. It's not used when the jdbc journal store is used.
transactions.object-store-relative-to=References a global path configuration in the domain model, defaulting to the application server data directory (jboss.server.data.dir). The value of the 'object-store-path' attribute will be treated as relative to this path. Undefine this attribute to disable the default behavior and force the value of the 'object-store-path' attribute to be treated as an absolute path.

transactions.number-of-transactions=The total number of transactions (top-level and nested) created.
transactions.number-of-nested-transactions=The total number of nested (sub) transactions created.
transactions.number-of-heuristics=The number of transactions which have terminated with heuristic outcomes.
transactions.number-of-committed-transactions=The number of committed transactions.
transactions.number-of-aborted-transactions=The number of aborted (i.e. rolled-back) transactions.
transactions.number-of-inflight-transactions=The number of transactions that have begun but not yet terminated.
transactions.number-of-timed-out-transactions=The number of transactions that have rolled back due to timeout.
transactions.number-of-application-rollbacks=The number of transactions that have been rolled back by application request. This includes those that timeout, since the timeout behavior is considered an attribute of the application configuration.
transactions.number-of-resource-rollbacks=The number of transactions that rolled back due to resource (participant) failure.
transactions.number-of-system-rollbacks=The number of transactions that have been rolled back due to internal system errors.
transactions.average-commit-time=The average time of transaction commit, measured from the moment the client calls commit until the transaction manager determines that the commit attempt was successful.

transactions.log-store=Representation of the transaction logging storage mechanism.
transactions.log-store.add=Add a representation of the transaction logging storage mechanism.
transactions.log-store.add.deprecated=No functionality, transaction subsystem defines only a single static log-store element. For changing the type of log-store use 'use-journal-store' and 'use-jdbc-store' attributes.
transactions.log-store.process-recovery=Execution of transaction recovery scanning. The transaction recovery is run automatically each time after a defined period. This operation executes the recovery manager scan operation explicitly.
transactions.log-store.remove=Remove a representation of the transaction logging storage mechanism.
transactions.log-store.remove.deprecated=No functionality, transaction subsystem defines only a single static non-removable log-store element. For changing the type of log-store use 'use-journal-store' and 'use-jdbc-store' attributes.
transactions.log-store.probe=Scan the content of the transaction log and load this snapshot as content of the model under log-store resource. This operation will create a child for each pending transaction with sub-resources representing transaction participants.
transactions.log-store.type=Read-only attribute that specifies the implementation type of the logging store. The possible values are default, journal and jdbc.
transactions.log-store.expose-all-logs=Configures the behaviour of the probe operation. When true then all transaction log records are exposed. By default only a subset of the transaction log is exposed.

transactions.log-store.transactions=Represents a snapshot of the persistent information that the transaction manager stores for the purpose of recovering a transaction in the event of failure. Loading the information from the object store is provided by a 'probe' operation. The 'probe' operation flushes the existing data from the model and loads a new snapshot from the object store. The transactions model lists the transactions and provides operations to work with them. After probing, the model is updated to include information about the state of incomplete transactions. A 'stuck' transaction (one that is unable to finish) will remain in the model until either it is completed or explicitly removed using the 'delete' operation.
transactions.log-store.transaction=The persistent information that the transaction manager stores for the purpose of recovering a transaction in the event of failure. The probe operation will add and remove transactions from the model as the corresponding real transactions start and finish the prepare and commit phases. A stuck transaction will remain in the model until either it is completed or explicitly removed by the delete operation.
transactions.log-store.transaction.add=Add a transaction to log-store.
transactions.log-store.transaction.add.deprecated=No functionality, use log-store probe operation to load the snapshot data from Transaction Manager object store. The transactions will be added to model here.
transactions.log-store.transaction.delete=Remove this transaction record from the transaction log. This means removing all participant records which are part of the transaction and calling XAResource.forget on all these participants (if possible). WARNING after this operation is executed the transaction manager will have no knowledge of the transaction and will therefore never be able to recover it. If you are sure that the transaction is complete then the operation is safe. The representation of the transaction log is removed from the model too.
transactions.log-store.transaction.jmx-name=The JMX name of this transaction.
transactions.log-store.transaction.id=The id of this transaction.
transactions.log-store.transaction.age-in-seconds=The time since this transaction was prepared or when the recovery system last tried to recover it.
transactions.log-store.transaction.type=The type name under which this record is stored.

transactions.log-store.transaction.participants=The resources that did work in a transaction.
transactions.log-store.transaction.participant=The resource that did work in a transaction.
transactions.log-store.transaction.participant.add=Add a transaction participant to a transaction log.
transactions.log-store.transaction.participant.add.deprecated=No functionality, use log-store probe operation to load the snapshot data from Transaction Manager object store. The participants will be added to model here.
transactions.log-store.transaction.participant.refresh=Refresh the management view of the attributes of this participant record by querying the transaction log which will update the snapshot view loaded in the model. Note that the model contains only a snapshot view of the transactions from time the probe was executed, not the real-time data from the transaction log, hence the need for this refresh operation.
transactions.log-store.transaction.participant.recover=If this record is in a heuristic state then attempt to replay the commit phase of the 2PC transaction. It switches the 'HEURISTIC' participant status to 'PREPARED', the operation does not immediately start the recovery process but the recovery manager will consider this participant with 'PREPARED' status in the next cycle.
transactions.log-store.transaction.participant.delete=Attempt to remove this participant from its containing transaction log. If the participant is an XA resource an attempt will be made to call forget on the actual resource and if the forget call fails then the remove operation will also fail.
transactions.log-store.transaction.participant.jmx-name=The JMX name of this participant.
transactions.log-store.transaction.participant.status=Reports the commitment status of this participant (can be one of Pending, Prepared, Failed, Heuristic or Readonly).
transactions.log-store.transaction.participant.jndi-name=JNDI name of this participant.
transactions.log-store.transaction.participant.type=The type name under which this record is stored.
transactions.log-store.transaction.participant.eis-product-name=The Jakarta Connectors enterprise information system's product name.
transactions.log-store.transaction.participant.eis-product-version=The Jakarta Connectors enterprise information system's product version.

transactions.commit-markable-resource=Configures a datasource to be considered by the transaction manager as a CMR resource.  CMR is a non-XA database resource that can reliably participate in an XA transaction.
transactions.commit-markable-resource.add=Add a single CMR resource.
transactions.commit-markable-resource.remove=Remove a single CMR resource.
transactions.commit-markable-resource.name=Defines the database table name used for storing ids associated with this CMR resource. The default value for naming the database table is 'xids'.
transactions.commit-markable-resource.jndi-name=A JNDI name of the non-XA datasource which is made to be a CMR resource for the purpose of transaction manager participant handling. The datasource is required to be marked as 'connectable=true'.
transactions.commit-markable-resource.xid-location=Name of database table associated to this CMR resource.
transactions.commit-markable-resource.xid-location.deprecated=Use attribute commit-markable-resource.name.
transactions.commit-markable-resource.batch-size=Configures number of ids placed within 'in' clause of the SQL query 'DELETE FROM ... WHERE xid in (...)' when periodic recovery processes the CMR database table garbage collection. When some garbage is left in the CMR database table after deletion another SQL delete is run during the next recovery cycle. When 'immediate-cleanup' is used this configuration has no big impact as the periodic recovery finds each time an empty CMR database table.
transactions.commit-markable-resource.immediate-cleanup=Immediate cleanup of ids associated with this CMR resource after the end of the transaction. When set to false the garbage collection of the ids is processed by periodic recovery.

transactions.stale-transaction-time=The time for which transaction that contains remote enlistments is held in memory after it is being completed.
