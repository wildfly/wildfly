<subsystem xmlns="urn:jboss:domain:messaging-activemq:14.0">
    <global-client thread-pool-max-size="${global.client.thread-pool-max-size:32}"
                   scheduled-thread-pool-max-size="${global.client.scheduled.thread-pool-max-size:54}" />

    <http-connector name="client-http"
                    socket-binding="http"
                    endpoint="http"
                    server-name="=foo">
        <param name="batch-delay" value="${batch.delay:50}"/>
    </http-connector>

    <remote-connector name="client-netty-throughput"
                      socket-binding="messaging-throughput">
        <param name="batch-delay" value="${batch.delay:50}"/>
    </remote-connector>

    <in-vm-connector name="in-vm-client"
                     server-id="${my.server-id:0}"/>

    <connector name="myconnector-client"
               factory-class="org.apache.activemq.artemis.core.remoting.impl.netty.NettyConnectorFactory">
        <param name="host" value="192.168.1.2"/>
        <param name="port" value="5445"/>
        <param name="key-store-path" value="path/to/server.jks"/>
        <param name="key-store-password" value="${VAULT::server-key::key-store-password::sharedKey}"/>
    </connector>

    <socket-discovery-group name="client-discovery-group-1"
                     socket-binding="group-t-binding"/>

    <connection-factory name="InVmConnectionFactory"
                        connectors="in-vm-client"
                        entries="${connection-factory.entries.entry:java:/ClientConnectionFactory}"
                        enable-amq1-prefix="false"
                        use-topology-for-load-balancing="false" />

    <connection-factory name="otherConnectionFactory"
                       discovery-group="groupC"
                       entries="otherConnectionFactory"
                       ha="${ha:true}"
                       client-failure-check-period="${client.failure.check.period:12345}"
                       connection-ttl="${connection.ttl:56789}"
                       call-timeout="${call.timeout:123}"
                       call-failover-timeout="${call.failover.timeout:456}"
                       consumer-window-size="${consumer.window.size:456}"
                       consumer-max-rate="${consumer.max.rate:789}"
                       confirmation-window-size="${confirmation.window.size:-1}"
                       producer-window-size="${producer.window.size:-1}"
                       producer-max-rate="${producer.max.rate:1024}"
                       protocol-manager-factory="com.foo.bar.ProtocolManagerFactory"
                       compress-large-messages="${compress.large.messages:true}"
                       cache-large-message-client="${cache.large.message.client:false}"
                       min-large-message-size="${min.large.message.size:2048}"
                       client-id="${client.id:myClientID}"
                       dups-ok-batch-size="${dups.ok.batch.size:256}"
                       transaction-batch-size="${transaction.batch.size:512}"
                       block-on-acknowledge="${block.on.acknowledge:false}"
                       block-on-non-durable-send="${block.on.non.durable.send:false}"
                       block-on-durable-send="${block.on.durable.send:false}"
                       auto-group="${auto.group:true}"
                       pre-acknowledge="${pre.acknowledge:true}"
                       retry-interval="${retry.interval:500}"
                       retry-interval-multiplier="${retry.interval.multiplier:2.5}"
                       max-retry-interval="${max.retry.interval:10000}"
                       reconnect-attempts="${reconnect.attempts:2}"
                       failover-on-initial-connection="${failover.on.initial.connection:true}"
                       connection-load-balancing-policy-class-name="connection.load.balancy.policy.class"
                       use-global-pools="${use.global.pools:true}"
                       scheduled-thread-pool-max-size="${scheduled.thread.pool.max.size:24}"
                       thread-pool-max-size="${thread.pool.max.size:48}"
                       group-id="${group.id:myGroup}"
                       deserialization-block-list="org.foo.Bar org.foo.Baz"
                       deserialization-allow-list="org.bar.Bar org.baz.Baz"
                       initial-message-packet-size="${initial.message.packet.size:456}"
                       use-topology-for-load-balancing="false"
                       enable-amq1-prefix="false" />

    <pooled-connection-factory name="hornetq-ra-local"
                                   transaction="local"
                                   user="alice"
                                   password="alicepassword"
                                   use-auto-recovery="${use.auto.recovery:true}"
                                   connectors="in-vm-client"
                                   entries="java:/JmsLocal"
                                   enable-amq1-prefix="false"/>

    <external-jms-queue name="testQueue"
                   entries="${jms-queue.entry:queue/client-test}"
                   enable-amq1-prefix="false"/>
    <external-jms-queue name="testQueue2"
                   entries="java:/global/queue/test java:/global/queue/client-test2"
                   enable-amq1-prefix="false"/>
    <external-jms-topic name="testTopic"
                   entries="${jms-topic.entry:topic/client-test}"
                   enable-amq1-prefix="false"/>

    <server name="default" address-queue-scan-period="100">

        <security elytron-domain="elytronDomain"/>
        <cluster user="testuser">
            <credential-reference store="cs1" alias="testuser"/>
        </cluster>
        <journal datasource="fooDS"
                 database="mysql"
                 jdbc-lock-expiration="891"
                 jdbc-lock-renew-period="892"
                 jdbc-network-timeout="4567"
                 messages-table="MY_MESSAGES"
                 bindings-table="MY_BINDINGS"
                 jms-bindings-table="MY_JMS_BINDINGS"
                 large-messages-table="MY_LARGE_MESSAGES"
                 node-manager-store-table="MY_NODE_MANAGER_STORE"
                 page-store-table="MY_PAGE_STORE"
                 global-max-disk-usage="70"
                 global-max-memory-size="100000"
                 disk-scan-period="10000"
                 file-open-timeout="7"
                 max-attic-files="15"/>

       <network-isolation
            network-check-list="127.0.0.1,[::1]"
            network-check-nic="localhost"
            network-check-period="10000"
            network-check-ping-command="ping"
            network-check-ping6-command="ping6"
            network-check-timeout="10000"
            network-check-url-list="127.0.0.1"/>

        <critical-analyzer
            enabled="false"
            check-period="120000"
            timeout="240000"
            policy="HALT"/>

        <replication-colocated>
            <primary />
        </replication-colocated>
        <queue name="coreQueueA"
               address="${address:addressA}"
               filter="${filter:afilter}"
               durable="${durable:true}"
               routing-type="ANYCAST" />

        <queue name="coreQueueB" address="addressB" routing-type="ANYCAST" />

        <address-setting name="#"
                         auto-create-queues="true"
                         auto-delete-queues="true"
                         auto-create-addresses="false"
                         auto-delete-addresses="false" />

        <remote-connector name="netty"
                                           socket-binding="messaging-throughput">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </remote-connector>

        <in-vm-connector name="in-vm"
                                          server-id="${my.server-id:0}"/>

        <http-connector name="http"
                        socket-binding="http"
                        endpoint="http"
                        server-name="=foo">
            <param name="batch-delay" value="${batch.delay:50}"/>
        </http-connector>

        <cluster-connection name="cc1"
                            address="${address:cc1-address}"
                            connector-name="netty"
                            producer-window-size="${producer.windows.size:5678}"
                            static-connectors="in-vm netty" />

        <bridge name="bridge1"
                queue-name="${queue.name:coreQueueA}"
                forwarding-address="${forwarding.address:forwardingaddress1}"
                producer-window-size="${producer.windows.size:5678}"
                static-connectors="in-vm netty"
                user="${user:Brian}"
                call-timeout="${call.timeout:60000}">
            <credential-reference clear-text="secret1"/>
        </bridge>
        <bridge name="bridge2"
                queue-name="${queue.name:coreQueueA}"
                forwarding-address="${forwarding.address:forwardingaddress1}"
                producer-window-size="${producer.windows.size:5678}"
                static-connectors="in-vm netty"
                user="${user:Brian}"
                password="${password:secret}"
                routing-type="STRIP">
        </bridge>

        <connection-factory name="otherConnectionFactory"
                            discovery-group="groupC"
                            entries="otherConnectionFactory"
                            deserialization-block-list="org.foo.Bar org.foo.Baz"
                            deserialization-allow-list="org.bar.Bar org.baz.Baz"
                            initial-message-packet-size="${initial.message.packet.size:12345}"/>

        <pooled-connection-factory name="hornetq-ra-local"
                                   transaction="local"
                                   user="alice"
                                   password="alicepassword"
                                   connectors="in-vm"
                                   entries="java:/JmsLocal"
                                   statistics-enabled="true"
                                   use-topology-for-load-balancing="false">
            <inbound-config
                    rebalance-connections="true" />
            <outbound-config
                    allow-local-transactions="true" />

        </pooled-connection-factory>
        <pooled-connection-factory name="pcf-with-credential-reference"
                                   entries="java:/JmsLocal2"
                                   connectors="in-vm"
                                   user="foo"
                                   deserialization-block-list="org.foo.Bar org.foo.Baz"
                                   deserialization-allow-list="org.bar.Bar org.baz.Baz">
            <credential-reference clear-text="passwordOut!"/>
        </pooled-connection-factory>

        <jgroups-broadcast-group name="groupT"
                         jgroups-channel="ee"
                         jgroups-cluster="activemq-cluster"
                         connectors="http"/>

        <jgroups-discovery-group name="groupU"
                         jgroups-channel="ee"
                         jgroups-cluster="activemq-cluster"/>
    </server>
    <server name="server1">
        <security elytron-domain="elytronDomain"/>
        <cluster user="testuser">
            <credential-reference store="cs1" alias="testuser" clear-text="clusterpass"/>
        </cluster>
    </server>
    <server name="server2">
        <queue name="coreQueueA"
               address="${address:addressA}"
               filter="${filter:afilter}"
               durable="${durable:true}"/>
        <bridge name="bridge2"
                queue-name="${queue.name:coreQueueA}"
                forwarding-address="${forwarding.address:forwardingaddress1}"
                producer-window-size="${producer.windows.size:5678}"
                static-connectors="in-vm netty"
                user="${user:Brian}">
            <credential-reference store="cs1" clear-text="bridgepass"/>
        </bridge>
    </server>
    <server name="server3">
        <in-vm-connector name="in-vm"
                         server-id="${my.server-id:0}"/>
        <pooled-connection-factory name="pcf-with-credential-reference"
                                   entries="java:/JmsLocal2"
                                   connectors="in-vm"
                                   user="foo"
                                   deserialization-block-list="org.foo.Bar org.foo.Baz"
                                   deserialization-allow-list="org.bar.Bar org.baz.Baz">
            <credential-reference store="cs1" clear-text="pooledpass"/>
        </pooled-connection-factory>
    </server>
    <jms-bridge name="bridge-with-credential-reference"
                module="com.foo.bar"
                quality-of-service="${quality.of.service:AT_MOST_ONCE}"
                failure-retry-interval="${failure.retry.interval:45678}"
                max-retries="${max.retries:7890}"
                max-batch-size="${max.batch.size:12345}"
                max-batch-time="${max.batch.time:10000}">
        <source connection-factory="/cf/sourceCF"
                destination="/topic/anotherSourceTopic"
                user="myUser">
            <source-credential-reference store="cs1" clear-text="sourcepass"/>
        </source>
        <target connection-factory="/cf/targetCF"
                destination="anotherMQ/jms/queue/anotherTargetQueue"
                user="myUser">
            <target-credential-reference alias="bob" store="jms-bridge-store" clear-text="targetpass"/>
        </target>
    </jms-bridge>
    <server name="other">
        <replication-primary />
    </server>
</subsystem>
