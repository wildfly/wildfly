<subsystem xmlns="urn:jboss:domain:datasources:1.1">
    <datasources>
        <datasource jndi-name="java:jboss/datasources/complexDs" pool-name="complexDs_Pool"
                    use-java-context="${test.expr:true}" spy="${test.expr:false}" use-ccm="${test.expr:true}" jta="${test.expr:false}" >
            <connection-url>
                ${test.expr:jdbc:h2:mem:test;DB_CLOSE_DELAY=-1}
            </connection-url>
            <driver-class>
                ${test.expr:org.hsqldb.jdbcDriver}
            </driver-class>
            <datasource-class>
                ${test.expr:org.jboss.as.connector.subsystems.datasources.ModifiableDataSource}
            </datasource-class>
            <connection-property name="char.encoding">
                ${test.expr:UTF-8}
            </connection-property>
            <driver>
                ${test.expr:h2}
            </driver>
            <new-connection-sql>
                ${test.expr:select 1}
            </new-connection-sql>
            <transaction-isolation>
                ${test.expr:TRANSACTION_READ_COMMITTED}
            </transaction-isolation>
            <url-delimiter>
                ${test.expr::}
            </url-delimiter>
            <url-selector-strategy-class-name>
                ${test.expr:someClass}
            </url-selector-strategy-class-name>
            <pool>
                <min-pool-size>${test.expr:1}</min-pool-size>
                <max-pool-size>${test.expr:5}</max-pool-size>
                <prefill>${test.expr:true}</prefill>
                <use-strict-min>${test.expr:true}</use-strict-min>
                <flush-strategy>${test.expr:EntirePool}</flush-strategy>
                <allow-multiple-users>true</allow-multiple-users>
            </pool>
            <security>
                <user-name>
                    ${test.expr:sa}
                </user-name>
                <password>
                    ${test.expr:sa}
                </password>
                <reauth-plugin class-name="${test.expr:someClass1}">
                    <config-property name="name">${test.expr:Property1}</config-property>
                </reauth-plugin>
            </security>
            <validation>
                <valid-connection-checker class-name="${test.expr:someClass2}">
                    <config-property name="name">${test.expr:Property2}</config-property>
                </valid-connection-checker>
                <check-valid-connection-sql>
                    ${test.expr:select 1}
                </check-valid-connection-sql>
                <validate-on-match>
                    ${test.expr:true}
                </validate-on-match>
                <background-validation>
                    ${test.expr:true}
                </background-validation>
                <background-validation-millis>
                    ${test.expr:2000}
                </background-validation-millis>
                <use-fast-fail>
                    ${test.expr:true}
                </use-fast-fail>
                <stale-connection-checker class-name="${test.expr:someClass3}">
                    <config-property name="name">${test.expr:Property3}</config-property>
                </stale-connection-checker>
                <exception-sorter class-name="${test.expr:someClass4}">
                    <config-property name="name">${test.expr:Property4}</config-property>
                </exception-sorter>
            </validation>
            <timeout>
                <set-tx-query-timeout>${test.expr:true}</set-tx-query-timeout>
                <blocking-timeout-millis>${test.expr:20000}</blocking-timeout-millis>
                <idle-timeout-minutes>${test.expr:4}</idle-timeout-minutes>
                <query-timeout>
                    ${test.expr:120}
                </query-timeout>
                <use-try-lock>
                    ${test.expr:100}
                </use-try-lock>
                <allocation-retry>
                    ${test.expr:2}
                </allocation-retry>
                <allocation-retry-wait-millis>
                    ${test.expr:3000}
                </allocation-retry-wait-millis>
            </timeout>
            <statement>
                <track-statements>${test.expr:nowarn}</track-statements>
                <prepared-statement-cache-size>${test.expr:30}</prepared-statement-cache-size>
                <share-prepared-statements>${test.expr:true}</share-prepared-statements>

            </statement>
        </datasource>
        <xa-datasource jndi-name="${test.expr:java:jboss/xa-datasources/complexXaDs}" pool-name="complexXaDs_Pool"
                       use-java-context="${test.expr:true}" spy="${test.expr:false}" use-ccm="${test.expr:true}">
            <xa-datasource-property name="URL">
                ${test.expr:jdbc:h2:mem:test}
            </xa-datasource-property>
            <xa-datasource-class>
                ${test.expr:org.jboss.as.connector.subsystems.datasources.ModifiableXaDataSource}
            </xa-datasource-class>
            <driver>
                ${test.expr:h2}
            </driver>
            <url-delimiter>
                ${test.expr::}
            </url-delimiter>
            <url-selector-strategy-class-name>
                ${test.expr:someClass}
            </url-selector-strategy-class-name>
            <new-connection-sql>
                ${test.expr:select 1}
            </new-connection-sql>
            <transaction-isolation>
                ${test.expr:TRANSACTION_READ_COMMITTED}
            </transaction-isolation>
            <xa-pool>
                <min-pool-size>
                    ${test.expr:1}
                </min-pool-size>
                <max-pool-size>
                    ${test.expr:5}
                </max-pool-size>
                <prefill>
                    ${test.expr:true}
                </prefill>
                <use-strict-min>
                    ${test.expr:true}
                </use-strict-min>
                <flush-strategy>
                    ${test.expr:EntirePool}
                </flush-strategy>
                <allow-multiple-users>true</allow-multiple-users>
                <is-same-rm-override>
                    ${test.expr:true}
                </is-same-rm-override>
                <interleaving>${test.expr:true}</interleaving>
                <no-tx-separate-pools>${test.expr:true}</no-tx-separate-pools>
                <pad-xid>
                    ${test.expr:true}
                </pad-xid>
                <wrap-xa-resource>
                    ${test.expr:true}
                </wrap-xa-resource>

            </xa-pool>
            <security>
                <user-name>
                    ${test.expr:sa}
                </user-name>
                <password>
                    ${test.expr:sa}
                </password>
                <reauth-plugin class-name="${test.expr:someClass1}">
                    <config-property name="name">Property1</config-property>
                </reauth-plugin>
            </security>
            <recovery no-recovery="${test.expr:false}">
                <recover-credential>
                    <user-name>
                        ${test.expr:sa}
                    </user-name>
                    <password>
                        ${test.expr:sa}
                    </password>
                </recover-credential>
                <recover-plugin class-name="${test.expr:someClass5}">
                    <config-property name="name">Property5</config-property>
                    <config-property name="name1">Property6</config-property>
                </recover-plugin>
            </recovery>
            <validation>
                <valid-connection-checker class-name="${test.expr:someClass2}">
                    <config-property name="name">Property2</config-property>
                </valid-connection-checker>
                <check-valid-connection-sql>
                    ${test.expr:select 1}
                </check-valid-connection-sql>
                <validate-on-match>
                    ${test.expr:true}
                </validate-on-match>
                <background-validation>
                    ${test.expr:true}
                </background-validation>
                <background-validation-millis>
                    ${test.expr:2000}
                </background-validation-millis>
                <use-fast-fail>
                    ${test.expr:true}
                </use-fast-fail>
                <stale-connection-checker class-name="${test.expr:someClass3}">
                     <config-property name="name">${test.expr:Property3}</config-property>
                 </stale-connection-checker>
                 <exception-sorter class-name="${test.expr:someClass4}">
                     <config-property name="name">${test.expr:Property4}</config-property>
                 </exception-sorter>
            </validation>
            <timeout>
                <set-tx-query-timeout>${test.expr:true}</set-tx-query-timeout>
                <blocking-timeout-millis>${test.expr:30000}</blocking-timeout-millis>
                <idle-timeout-minutes>${test.expr:5}</idle-timeout-minutes>
                <query-timeout>
                    ${test.expr:120}
                </query-timeout>
                <use-try-lock>
                    ${test.expr:100}
                </use-try-lock>
                <allocation-retry>
                    ${test.expr:2}
                </allocation-retry>
                <allocation-retry-wait-millis>
                    ${test.expr:3000}
                </allocation-retry-wait-millis>
                <xa-resource-timeout>
                    ${test.expr:120}
                </xa-resource-timeout>
            </timeout>
            <statement>
                <track-statements>${test.expr:nowarn}</track-statements>
                <prepared-statement-cache-size>${test.expr:30}</prepared-statement-cache-size>
                <share-prepared-statements>${test.expr:true}</share-prepared-statements>
            </statement>
        </xa-datasource>
        <drivers>
              <driver major-version="${test.expr:3}" minor-version="${test.expr:3}" module="com.h2database.h2" name="h2">
                  <driver-class>token</driver-class>
                  <xa-datasource-class>
                      org.h2.jdbcx.JdbcDataSource
                  </xa-datasource-class>
                  <datasource-class>token</datasource-class>
              </driver>
          </drivers>
    </datasources>
</subsystem>
