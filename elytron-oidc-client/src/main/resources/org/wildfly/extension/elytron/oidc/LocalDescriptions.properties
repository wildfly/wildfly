elytron-oidc-client=WildFly Extension for Elytron OIDC.
elytron-oidc-client.add=Add the Elytron OIDC subsystem.
elytron-oidc-client.remove=Remove the Elytron OIDC subsystem.
elytron-oidc-client.realm=Configuration for a Keycloak realm. If you have multiple deployments secured by the same realm you can share the realm configuration here.
elytron-oidc-client.provider=Configuration for an OpenID Connect provider. If you have multiple deployments secured by the same OpenID provider you can share the provider configuration here.
elytron-oidc-client.secure-deployment=A deployment secured by an OpenID Connect provider.
elytron-oidc-client.secure-server=Configuration used to secure the management console using Keycloak.

elytron-oidc-client.realm.add=Add a Keycloak realm definition to the subsystem.
elytron-oidc-client.realm.remove=Remove a Keycloak realm from the subsystem.
elytron-oidc-client.realm.realm-public-key=The public key of the Keycloak realm in PEM format. This is optional. It is not recommended to set it. If the public key is not set, the subsystem downloads the public key from Keycloak when needed. If the public key is set, the subsystem never downloads new keys from Keycloak, breaking the subsystem when Keycloak rotates its keys.
elytron-oidc-client.realm.auth-server-url=The base URL of the Keycloak authorization server. It is recommended to use the 'provider-url' instead.
elytron-oidc-client.realm.provider-url=The OpenID provider URL.
elytron-oidc-client.realm.disable-trust-manager=Whether or not to make use of a trust manager when communicating with Keycloak over HTTPS. This is optional. This should be set to 'true' only during development and never in production as it disables verification of SSL certificates.
elytron-oidc-client.realm.ssl-required=Whether the communication with Keycloak should be over HTTPS. Valid values are: 'all' - to always require HTTPS, 'external' - to only require HTTPS for external requests, 'none' - if HTTPS is not required. This should be set to 'all' in production environments.
elytron-oidc-client.realm.confidential-port=The confidential port used by Keycloak when communicating securely over SSL/TLS.
elytron-oidc-client.realm.allow-any-hostname=If set to 'true', hostname verification will be skipped when communicating with Keycloak over HTTPS. This can be useful in testing environments. This should never be set to 'true' in production environments as it disables verification of SSL certificates.
elytron-oidc-client.realm.truststore=The path to the truststore to use when communicating with Keycloak over HTTPS. Prefix the path with 'classpath:' to obtain the truststore from the deployment's classpath.
elytron-oidc-client.realm.truststore-password=The password for the truststore.
elytron-oidc-client.realm.connection-pool-size=The connection pool size to use when communicating with Keycloak.
elytron-oidc-client.realm.enable-cors=Enable the Keycloak Cross-Origin Resource Sharing (CORS) support. This is optional.
elytron-oidc-client.realm.client-keystore=The path to the client keystore to use when communicating with Keycloak over HTTPS. This is optional.
elytron-oidc-client.realm.client-keystore-password=The password for the client keystore. This is required if 'client-keystore' has been specified.
elytron-oidc-client.realm.client-key-password=The password for the client key. This is required if 'client-keystore' has been specified.
elytron-oidc-client.realm.cors-max-age=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Max-Age' header. If not set, this header is not returned in CORS responses.
elytron-oidc-client.realm.cors-allowed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.realm.cors-allowed-methods=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Methods' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.realm.cors-exposed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Expose-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.realm.expose-token=If set to 'true', an authenticated browser client can obtain the signed access token (through a Javascript HTTP invocation) via the URL 'root/k_query_bearer_token'. This is optional.
elytron-oidc-client.realm.auth-server-url-for-backend-requests=Specifies the URL to use only for backend requests in order to invoke Keycloak directly without having to go through a load balancer or reverse proxy. It is recommended to provide this functionality at hosts configuration (DNS) level instead.
elytron-oidc-client.realm.always-refresh-token=If set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to Keycloak to obtain a new access token. This can result in a higher load on the Keycloak and may impact the performance of the application.
elytron-oidc-client.realm.register-node-at-startup=If set to 'true', the subsystem sends a registration request to Keycloak. This attribute is useful only when your application is clustered.
elytron-oidc-client.realm.register-node-period=If 'register-node-at-startup' is set to 'true', this specifies the frequency (in seconds) at which the node should be re-registered.
elytron-oidc-client.realm.token-store=Defines whether to store account information in an HTTP session or in a cookie.
elytron-oidc-client.realm.principal-attribute=Indicates which value from the ID token to use as the principal for the identity. The principal defaults to the value of the 'sub' if the token attribute is null.
elytron-oidc-client.realm.autodetect-bearer-only=Whether to auto-detect SOAP or REST clients based on headers like 'X-Requested-With', 'SOAPAction' or 'Accept'. If set to 'true', the subsystem sends an HTTP 401 status code to unauthenticated SOAP or REST clients instead of redirecting them to the Keycloak login page. Set the value to 'true' if your application serves both applications and web services.
elytron-oidc-client.realm.ignore-oauth-query-parameter=Disable query parameter parsing for the 'access_token'. Users will not be able to authenticate if they only pass in an 'access_token'.
elytron-oidc-client.realm.proxy-url=The URL for the HTTP proxy if one is used.
elytron-oidc-client.realm.verify-token-audience=If set to 'true', then during bearer-only authentication, the subsystem verifies if the token contains the client name defined as an audience. It is recommended to set to 'true' for improved security.
elytron-oidc-client.realm.socket-timeout-millis=The timeout for the socket waiting for data after establishing the connection in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.realm.connection-ttl-millis=The amount of time in milliseconds for the connection to be kept alive. A value less than or equal to zero is interpreted as an infinite value.
elytron-oidc-client.realm.connection-timeout-millis=The timeout for establishing a connection with the remote host in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.realm.token-signature-algorithm=The token signature algorithm used by Keycloak.

elytron-oidc-client.provider.add=Add an OpenID provider definition to the subsystem.
elytron-oidc-client.provider.remove=Remove an OpenID provider from the subsystem.
elytron-oidc-client.provider.realm-public-key=The public key of the OpenID provider in PEM format. This is optional. It is not recommended to set it. If the public key is not set, the subsystem downloads the public key from the OpenID provider when needed. If the public key is set, the subsystem never downloads new keys from the OpenID provider, breaking the subsystem when the OpenID provider rotates its keys.
elytron-oidc-client.provider.auth-server-url=The base URL of the Keycloak authorization server. This is Keycloak-specific. It is recommended to use the 'provider-url' instead.
elytron-oidc-client.provider.provider-url=The OpenID provider URL.
elytron-oidc-client.provider.disable-trust-manager=Whether or not to make use of a trust manager when communicating with the OpenID provider over HTTPS. This is optional. This should be set to 'true' only during development and never in production as it disables verification of SSL certificates.
elytron-oidc-client.provider.ssl-required=Whether the communication with the OpenID provider should be over HTTPS. Valid values are: 'all' - to always require HTTPS, 'external' - to only require HTTPS for external requests, 'none' - if HTTPS is not required. This should be set to 'all' in production environments.
elytron-oidc-client.provider.confidential-port=The confidential port used by the OpenID provider when communicating securely over SSL/TLS.
elytron-oidc-client.provider.allow-any-hostname=If set to 'true', hostname verification is skipped when communicating with the OpenID provider over HTTPS. This can be useful in testing environments. This should never be set to 'true' in production environments as it disables verification of SSL certificates.
elytron-oidc-client.provider.truststore=The path to the truststore to use when communicating with Keycloak over HTTPS. Prefix the path with 'classpath:' to obtain the truststore from the deployment's classpath.
elytron-oidc-client.provider.truststore-password=The password for the truststore.
elytron-oidc-client.provider.connection-pool-size=The connection pool size to use when communicating with the OpenID provider.
elytron-oidc-client.provider.enable-cors=Enable the Keycloak Cross-Origin Resource Sharing (CORS) support. This is optional. This is Keycloak-specific.
elytron-oidc-client.provider.client-keystore=The path to the client keystore to use when communicating with the OpenID provider over HTTPS. This is optional.
elytron-oidc-client.provider.client-keystore-password=The password for the client keystore. This is required if 'client-keystore' has been specified.
elytron-oidc-client.provider.client-key-password=The password for the client key. This is required if 'client-keystore' has been specified.
elytron-oidc-client.provider.cors-max-age=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Max-Age' header. If not set, this header is not returned in CORS responses.
elytron-oidc-client.provider.cors-allowed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.provider.cors-allowed-methods=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Methods' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.provider.cors-exposed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Expose-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.provider.expose-token=If set to 'true', an authenticated browser client can obtain the signed access token (through a Javascript HTTP invocation) via the URL 'root/k_query_bearer_token'. This is optional.
elytron-oidc-client.provider.auth-server-url-for-backend-requests=Specifies the URL to use only for backend requests in order to invoke Keycloak directly without having to go through a load balancer or reverse proxy. It is recommended to provide this functionality at hosts configuration (DNS) level instead.
elytron-oidc-client.provider.always-refresh-token=If set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the OpenID provider to obtain a new access token. This can result in a higher load on the OpenID provider and may impact the performance of the application.
elytron-oidc-client.provider.register-node-at-startup=If set to 'true', the subsystem sends a registration request to the OpenID provider. This attribute is useful only when your application is clustered.
elytron-oidc-client.provider.register-node-period=If 'register-node-at-startup' is set to 'true', this specifies the frequency (in seconds) at which the node should be re-registered.
elytron-oidc-client.provider.token-store=Defines whether to store account information in an HTTP session or in a cookie.
elytron-oidc-client.provider.principal-attribute=Indicates which value from the ID token to use as the principal for the identity. The principal defaults to the value of the 'sub' if the token attribute is null.
elytron-oidc-client.provider.autodetect-bearer-only=Whether to auto-detect SOAP or REST clients based on headers like 'X-Requested-With', 'SOAPAction' or 'Accept'. If set to 'true', the subsystem sends an HTTP 401 status code to unauthenticated SOAP or REST clients instead of redirecting them to the OpenID provider login page. Set the value to 'true' if your application serves both applications and web services.
elytron-oidc-client.provider.ignore-oauth-query-parameter=Disable query parameter parsing for the 'access_token'. Users will not be able to authenticate if they only pass in an 'access_token'.
elytron-oidc-client.provider.proxy-url=The URL for the HTTP proxy if one is used.
elytron-oidc-client.provider.verify-token-audience=If set to 'true', then during bearer-only authentication, the subsystem verifies if the token contains the client name defined as an audience. It is recommended to set the value to 'true' for improved security.
elytron-oidc-client.provider.socket-timeout-millis=The timeout for the socket waiting for data after establishing the connection in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.provider.connection-ttl-millis=The amount of time in milliseconds for the connection to be kept alive. A value less than or equal to zero is interpreted as an infinite value.
elytron-oidc-client.provider.connection-timeout-millis=The timeout for establishing a connection with the remote host in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.provider.token-signature-algorithm=The token signature algorithm used by the OpenID provider.

elytron-oidc-client.secure-deployment.add=Add a deployment to be secured by an OpenID Connect provider.
elytron-oidc-client.secure-deployment.remove=Remove a deployment secured by an OpenID Connect provider.
elytron-oidc-client.secure-deployment.realm=The Keycloak realm to use for authentication.
elytron-oidc-client.secure-deployment.provider=The OpenID Connect provider to use for authentication.
elytron-oidc-client.secure-deployment.realm-public-key=The public key of the OpenID provider in PEM format. This is optional. It is not recommended to set it. If the public key is not set, the subsystem downloads the public key from the OpenID provider when needed. If the public key is set, the subsystem never downloads new keys from the OpenID provider, breaking the subsystem when the OpenID provider rotates its keys.
elytron-oidc-client.secure-deployment.auth-server-url=The base URL of the Keycloak authorization server. This is Keycloak-specific. It is recommended to use 'provider-url' instead.
elytron-oidc-client.secure-deployment.provider-url=The OpenID provider URL.
elytron-oidc-client.secure-deployment.disable-trust-manager=Whether or not to make use of a trust manager when communicating with the OpenID provider over HTTPS. This is optional. This should be set to 'true' only during development and never in production as it disables verification of SSL certificates.
elytron-oidc-client.secure-deployment.ssl-required=Whether the communication with the OpenID provider should be over HTTPS. Valid values are: 'all' - to always require HTTPS, 'external' - to only require HTTPS for external requests, 'none' - if HTTPS is not required. This should be set to 'all' in production environments.
elytron-oidc-client.secure-deployment.confidential-port=The confidential port used by the OpenID provider when communicating securely over SSL/TLS.
elytron-oidc-client.secure-deployment.allow-any-hostname=If set to 'true', hostname verification is skipped when communicating with the OpenID provider over HTTPS. This can be useful in testing environments. This should never be set to 'true' in production environments as it disables verification of SSL certificates.
elytron-oidc-client.secure-deployment.truststore=The path to the truststore to use when communicating with Keycloak over HTTPS. Prefix the path with 'classpath:' to obtain the truststore from the deployment's classpath.
elytron-oidc-client.secure-deployment.truststore-password=The password for the truststore.
elytron-oidc-client.secure-deployment.connection-pool-size=The connection pool size to use when communicating with the OpenID provider.
elytron-oidc-client.secure-deployment.resource=The unique, legacy identifier for a client application registered in the OpenID provider. It is recommended to use the 'client-id'.
elytron-oidc-client.secure-deployment.client-id=The unique identifier for a client application registered in the OpenID provider.
elytron-oidc-client.secure-deployment.use-resource-role-mappings=If set to 'true', the subsystem will look inside the token for application-level role mappings for a user. If set to 'false', the subsystem will look at the realm-level for user-role mappings. This is optional.
elytron-oidc-client.secure-deployment.redirect-rewrite-rule=The rewrite rule for the redirect URI. The rewrite rule is an object notation, where the key is a regular expression with which the redirect URI is matched and the value is the replacement String.
elytron-oidc-client.secure-deployment.bearer-only=Enable Bearer-Token only authentication. Set this to 'true' if your application serves only web services and does not authenticate users.
elytron-oidc-client.secure-deployment.enable-basic-auth=Enable Basic authentication. This is not supported in the current release.
elytron-oidc-client.secure-deployment.public-client=If set to 'true', no client credentials are sent when communicating with the OpenID provider.
elytron-oidc-client.secure-deployment.enable-cors=Enable the Keycloak Cross-Origin Resource Sharing (CORS) support. This is optional. This is Keycloak-specific.
elytron-oidc-client.secure-deployment.autodetect-bearer-only=Whether to auto-detect SOAP or REST clients based on headers like 'X-Requested-With', 'SOAPAction' or 'Accept'. If set to 'true', the subsystem sends an HTTP 401 status code to unauthenticated SOAP or REST clients instead of redirecting them to the OpenID provider login page. Set the value to 'true' if your application serves both applications and web services.
elytron-oidc-client.secure-deployment.client-keystore=The path to the client keystore to use when communicating with the OpenID provider over HTTPS. This is optional.
elytron-oidc-client.secure-deployment.client-keystore-password=The password for the client keystore. This is required if 'client-keystore' has been specified.
elytron-oidc-client.secure-deployment.client-key-password=The password for the client key. This is required if 'client-keystore' has been specified.
elytron-oidc-client.secure-deployment.cors-max-age=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Max-Age' header. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-deployment.cors-allowed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-deployment.cors-allowed-methods=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Methods' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-deployment.cors-exposed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Expose-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-deployment.expose-token=If set to 'true', an authenticated browser client can obtain the signed access token (through a Javascript HTTP invocation) via the URL 'root/k_query_bearer_token'. This is optional.
elytron-oidc-client.secure-deployment.auth-server-url-for-backend-requests=Specifies the URL to use only for backend requests in order to invoke Keycloak directly without having to go through a load balancer or reverse proxy. It is recommended to provide this functionality at hosts configuration (DNS) level instead.
elytron-oidc-client.secure-deployment.always-refresh-token=If set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the OpenID provider to obtain a new access token. This can result in a higher load on the OpenID provider and may impact the performance of the application.
elytron-oidc-client.secure-deployment.register-node-at-startup=If set to 'true', the subsystem sends a registration request to the OpenID provider. This attribute is useful only when your application is clustered.
elytron-oidc-client.secure-deployment.register-node-period=If 'register-node-at-startup' is set to 'true', this specifies the frequency (in seconds) at which the node should be re-registered.
elytron-oidc-client.secure-deployment.token-store=Defines whether to store account information in an HTTP session or in a cookie.
elytron-oidc-client.secure-deployment.principal-attribute=Indicates which value from the ID token to use as the principal for the identity. The principal defaults to the value of the 'sub' if the token attribute is null.
elytron-oidc-client.secure-deployment.turn-off-change-session-id-on-login=The Session ID is changed by default on a successful login. Set this to 'true' if you want to turn this off.
elytron-oidc-client.secure-deployment.token-minimum-time-to-live=The subsystem will refresh the token if it will expire within the duration specified in 'token-minimum-time-to-live' seconds. This value should never exceed the access token lifespan. If the value is set to 0 seconds, the subsystem will refresh the token only if the token has expired.
elytron-oidc-client.secure-deployment.min-time-between-jwks-requests=If the subsystem recognizes a token signed by an unknown public key, it will try to download a new public key from the server. The subsystem won't try to download a public key if it already tried last in less than 'min-time-between-jwks-requests' seconds.
elytron-oidc-client.secure-deployment.public-key-cache-ttl=The maximum interval between two requests to retrieve new public keys in seconds. New public keys are downloaded when the subsystem recognizes a token signed by an unknown public key. Even if the token's key is already known, new public keys are downloaded periodically as per the interval set here at least once.
elytron-oidc-client.secure-deployment.ignore-oauth-query-parameter=Disable query parameter parsing for the 'access_token'. Users will not be able to authenticate if they only pass in an 'access_token'.
elytron-oidc-client.secure-deployment.proxy-url=The URL for the HTTP proxy if one is used.
elytron-oidc-client.secure-deployment.verify-token-audience=If set to 'true', then during bearer-only authentication, the subsystem verifies if the token contains the client name defined as an audience. It is recommended to set the value to 'true' for improved security.
elytron-oidc-client.secure-deployment.adapter-state-cookie-path=If set, this defines the path used in cookies set by the subsystem. This is useful when deploying an application in the root context path.
elytron-oidc-client.secure-deployment.credential=The credential used to communicate with the OpenID Connect provider.
elytron-oidc-client.secure-deployment.credential.add=Add credentials used to communicate with the OpenID provider.
elytron-oidc-client.secure-deployment.credential.remove=Remove the credentials used to communicate with the OpenID provider.
elytron-oidc-client.secure-deployment.credential.client-key-password=The password for the client key when the credential provider is used. This is required if 'client-keystore-file' has been specified.
elytron-oidc-client.secure-deployment.credential.client-keystore-password=The password for the client keystore when the credential provider is used. This is required if 'client-keystore-file' has been specified.
elytron-oidc-client.secure-deployment.credential.client-keystore-file=The path to the client keystore when the credential provider is used. This is optional.
elytron-oidc-client.secure-deployment.credential.client-keystore-type=The client keystore type when the credential provider is used.
elytron-oidc-client.secure-deployment.credential.client-key-alias=The client key alias when the credential provider is used.
elytron-oidc-client.secure-deployment.credential.token-timeout=The amount of time after which the token expires and can no longer be used to authenticate requests.
elytron-oidc-client.secure-deployment.credential.secret=The client secret that was registered with the OpenID provider.
elytron-oidc-client.secure-deployment.credential.algorithm=The credential signature algorithm used by the OpenID provider.
elytron-oidc-client.secure-deployment.redirect-rewrite-rule.add=Add the rewrite rule for the redirect URI. The rewrite rule is an object notation, where the key is a regular expression with which the redirect URI is matched and the value is the replacement String. You can use the '$' character to use for back-reference in the replacement String.
elytron-oidc-client.secure-deployment.redirect-rewrite-rule.remove=Remove the rewrite rule for the redirect URI.
elytron-oidc-client.secure-deployment.redirect-rewrite-rule.replacement=The replacement String in the rewrite rule for the redirect URI.
elytron-oidc-client.secure-deployment.socket-timeout-millis=The timeout for the socket waiting for data after establishing the connection in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.secure-deployment.connection-ttl-millis=The amount of time in milliseconds for the connection to be kept alive. A value less than or equal to zero is interpreted as an infinite value.
elytron-oidc-client.secure-deployment.connection-timeout-millis=The timeout for establishing a connection with the remote host in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.secure-deployment.token-signature-algorithm=The token signature algorithm used by the OpenID provider.

elytron-oidc-client.secure-server.add=Add configuration to be used to secure the management console using the Keycloak OpenID provider.
elytron-oidc-client.secure-server.remove=Remove configuration used to secure the management console using the Keycloak OpenID provider.
elytron-oidc-client.secure-server.realm=The Keycloak realm to use for authentication.
elytron-oidc-client.secure-server.provider=The OpenID Connect provider to use for authentication.
elytron-oidc-client.secure-server.realm-public-key=The public key of the OpenID provider in PEM format. This is optional. It is not recommended to set it. If the public key is not set, the subsystem downloads the public key from the OpenID provider when needed. If the public key is set, the subsystem never downloads new keys from the OpenID provider, breaking the subsystem when the OpenID provider rotates its keys.
elytron-oidc-client.secure-server.auth-server-url=The base URL of the Keycloak authorization server. This is Keycloak-specific. It is recommended to use 'provider-url' instead.
elytron-oidc-client.secure-server.provider-url=The OpenID provider URL.
elytron-oidc-client.secure-server.disable-trust-manager=Whether or not to make use of a trust manager when communicating with the OpenID provider over HTTPS. This is optional. This should be set to 'true' only during development and never in production as it disables verification of SSL certificates.
elytron-oidc-client.secure-server.ssl-required=Whether the communication with the OpenID provider should be over HTTPS. Valid values are: 'all' - to always require HTTPS, 'external' - to only require HTTPS for external requests, 'none' - if HTTPS is not required. This should be set to 'all' in production environments.
elytron-oidc-client.secure-server.confidential-port=The confidential port used by the OpenID provider when communicating securely over SSL/TLS.
elytron-oidc-client.secure-server.allow-any-hostname=If set to 'true', hostname verification is skipped when communicating with the OpenID provider over HTTPS. This can be useful in testing environments. This should never be set to 'true' in production environments as it disables verification of SSL certificates.
elytron-oidc-client.secure-server.truststore=The path to the truststore to use when communicating with Keycloak over HTTPS. Prefix the path with 'classpath:' to obtain the truststore from the deployment's classpath.
elytron-oidc-client.secure-server.truststore-password=The password for the truststore.
elytron-oidc-client.secure-server.connection-pool-size=The connection pool size to use when communicating with the OpenID provider.
elytron-oidc-client.secure-server.resource=The unique, legacy identifier for a client application registered in the OpenID provider. It is recommended to use the 'client-id'.
elytron-oidc-client.secure-server.client-id=The unique identifier for a client application registered in the OpenID provider.
elytron-oidc-client.secure-server.use-resource-role-mappings=If set to 'true', the subsystem will look inside the token for application-level role mappings for a user. If set to 'false', the subsystem will look at the realm-level for user-role mappings. This is optional.
elytron-oidc-client.secure-server.redirect-rewrite-rule=The rewrite rule for the redirect URI. The rewrite rule is an object notation, where the key is a regular expression with which the redirect URI is matched and the value is the replacement String.
elytron-oidc-client.secure-server.bearer-only=Enable Bearer-Token only authentication. Set this to 'true' if your application serves only web services and does not authenticate users.
elytron-oidc-client.secure-server.enable-basic-auth=Enable Basic authentication. This is not supported in the current release.
elytron-oidc-client.secure-server.public-client=If set to 'true', no client credentials are sent when communicating with the OpenID provider.
elytron-oidc-client.secure-server.enable-cors=Enable the Keycloak Cross-Origin Resource Sharing (CORS) support. This is optional. This is Keycloak-specific.
elytron-oidc-client.secure-server.autodetect-bearer-only=Whether to auto-detect SOAP or REST clients based on headers like 'X-Requested-With', 'SOAPAction' or 'Accept'. If set to 'true', the subsystem sends an HTTP 401 status code to unauthenticated SOAP or REST clients instead of redirecting them to the OpenID provider login page. Set the value to 'true' if your application serves both applications and web services.
elytron-oidc-client.secure-server.client-keystore=The path to the client keystore to use when communicating with the OpenID provider over HTTPS. This is optional.
elytron-oidc-client.secure-server.client-keystore-password=The password for the client keystore. This is required if 'client-keystore' has been specified.
elytron-oidc-client.secure-server.client-key-password=The password for the client key. This is required if 'client-keystore' has been specified.
elytron-oidc-client.secure-server.cors-max-age=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Max-Age' header. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-server.cors-allowed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-server.cors-allowed-methods=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Allow-Methods' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-server.cors-exposed-headers=If Cross-Origin Resource Sharing (CORS) is enabled, this sets the value of the 'Access-Control-Expose-Headers' header. This should be a comma-separated string. This is optional. If not set, this header is not returned in CORS responses.
elytron-oidc-client.secure-server.expose-token=If set to 'true', an authenticated browser client can obtain the signed access token (through a Javascript HTTP invocation) via the URL 'root/k_query_bearer_token'. This is optional.
elytron-oidc-client.secure-server.auth-server-url-for-backend-requests=Specifies the URL to use only for backend requests in order to invoke Keycloak directly without having to go through a load balancer or reverse proxy. It is recommended to provide this functionality at hosts configuration (DNS) level instead.
elytron-oidc-client.secure-server.always-refresh-token=If set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the OpenID provider to obtain a new access token. This can result in a higher load on the OpenID provider and may impact the performance of the application.
elytron-oidc-client.secure-server.register-node-at-startup=If set to 'true', the subsystem sends a registration request to the OpenID provider. This attribute is useful only when your application is clustered.
elytron-oidc-client.secure-server.register-node-period=If 'register-node-at-startup' is set to 'true', this specifies the frequency (in seconds) at which the node should be re-registered.
elytron-oidc-client.secure-server.token-store=Defines whether to store account information in an HTTP session or in a cookie.
elytron-oidc-client.secure-server.principal-attribute=Indicates which value from the ID token to use as the principal for the identity. The principal defaults to the value of the 'sub' if the token attribute is null.
elytron-oidc-client.secure-server.turn-off-change-session-id-on-login=The Session ID is changed by default on a successful login. Set this to 'true' if you want to turn this off.
elytron-oidc-client.secure-server.token-minimum-time-to-live=The subsystem will refresh the token if it will expire within the duration specified in 'token-minimum-time-to-live' seconds. This value should never exceed the access token lifespan. If the value is set to 0 seconds, the subsystem will refresh the token only if the token has expired.
elytron-oidc-client.secure-server.min-time-between-jwks-requests=If the subsystem recognizes a token signed by an unknown public key, it will try to download a new public key from the server. The subsystem won't try to download a public key if it already tried last in less than 'min-time-between-jwks-requests' seconds.
elytron-oidc-client.secure-server.public-key-cache-ttl=The maximum interval between two requests to retrieve new public keys in seconds. New public keys are downloaded when the subsystem recognizes a token signed by an unknown public key. Even if the token's key is already known, new public keys are downloaded periodically as per the interval set here at least once.
elytron-oidc-client.secure-server.ignore-oauth-query-parameter=Disable query parameter parsing for the 'access_token'. Users will not be able to authenticate if they only pass in an 'access_token'.
elytron-oidc-client.secure-server.proxy-url=The URL for the HTTP proxy if one is used.
elytron-oidc-client.secure-server.verify-token-audience=If set to 'true', then during bearer-only authentication, the subsystem verifies if the token contains the client name defined as an audience. It is recommended to set the value to 'true' for improved security.
elytron-oidc-client.secure-server.adapter-state-cookie-path=If set, this defines the path used in cookies set by the subsystem. This is useful when deploying an application in the root context path.
elytron-oidc-client.secure-server.credential=The credential used to communicate with the OpenID Connect provider.
elytron-oidc-client.secure-server.credential.add=Add credentials used to communicate with the OpenID provider.
elytron-oidc-client.secure-server.credential.remove=Remove the credentials used to communicate with the OpenID provider.
elytron-oidc-client.secure-server.credential.client-key-password=The password for the client key when the credential provider is used. This is required if 'client-keystore-file' has been specified.
elytron-oidc-client.secure-server.credential.client-keystore-password=The password for the client keystore when the credential provider is used. This is required if 'client-keystore-file' has been specified.
elytron-oidc-client.secure-server.credential.client-keystore-file=The path to the client keystore when the credential provider is used. This is optional.
elytron-oidc-client.secure-server.credential.client-keystore-type=The client keystore type when the credential provider is used.
elytron-oidc-client.secure-server.credential.client-key-alias=The client key alias when the credential provider is used.
elytron-oidc-client.secure-server.credential.token-timeout=The amount of time after which the token expires and can no longer be used to authenticate requests.
elytron-oidc-client.secure-server.credential.secret=The client secret that was registered with the OpenID provider.
elytron-oidc-client.secure-server.credential.algorithm=The credential signature algorithm used by the OpenID provider.
elytron-oidc-client.secure-server.redirect-rewrite-rule.add=Add the rewrite rule for the redirect URI. The rewrite rule is an object notation, where the key is a regular expression with which the redirect URI is matched and the value is the replacement String. You can use the '$' character to use for back-reference in the replacement String.
elytron-oidc-client.secure-server.redirect-rewrite-rule.remove=Remove the rewrite rule for the redirect URI.
elytron-oidc-client.secure-server.redirect-rewrite-rule.replacement=The replacement String in the rewrite rule for the redirect URI.
elytron-oidc-client.secure-server.socket-timeout-millis=The timeout for the socket waiting for data after establishing the connection in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.secure-server.connection-ttl-millis=The amount of time in milliseconds for the connection to be kept alive. A value less than or equal to zero is interpreted as an infinite value.
elytron-oidc-client.secure-server.connection-timeout-millis=The timeout for establishing a connection with the remote host in milliseconds. A timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
elytron-oidc-client.secure-server.token-signature-algorithm=The token signature algorithm used by the OpenID provider.
