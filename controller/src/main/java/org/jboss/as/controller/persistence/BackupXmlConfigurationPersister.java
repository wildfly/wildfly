/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2011, Red Hat, Inc., and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.jboss.as.controller.persistence;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Pattern;

import javax.xml.namespace.QName;

import org.jboss.as.controller.persistence.ConfigurationPersister.SnapshotInfo;
import org.jboss.as.protocol.StreamUtils;
import org.jboss.dmr.ModelNode;
import org.jboss.staxmapper.XMLElementReader;
import org.jboss.staxmapper.XMLElementWriter;

/**
 * An XML configuration persister which backs up the old file before overwriting it.
 *
 * @author <a href="mailto:david.lloyd@redhat.com">David M. Lloyd</a>
 */
public class BackupXmlConfigurationPersister extends XmlConfigurationPersister {

    private static final String LAST = ".last";
    private static final String INITIAL = ".initial";
    private static final String ORIGINAL = ".original";
    private static final int CURRENT_HISTORY_LENGTH = 100;
    private static final int HISTORY_DAYS = 30;

    private final AtomicInteger sequence = new AtomicInteger();
    private final AtomicBoolean doneBootup = new AtomicBoolean();
    private final File historyRoot;
    private final File currentHistory;
    private final File snapshotsDirectory;

    private static final String TIMESTAMP_STRING = "\\d\\d\\d\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d\\d";
    private static final Pattern TIMESTAMP_PATTERN = Pattern.compile(TIMESTAMP_STRING);
    private static final Pattern SNAPSHOT_XML = Pattern.compile(TIMESTAMP_STRING + ".xml");


    /**
     * Construct a new instance.
     *
     * @param file the configuration base file
     * @param rootElement the root element of the configuration file
     * @param rootParser the root model parser
     * @param rootDeparser the root model deparser
     */
    public BackupXmlConfigurationPersister(final File file, final QName rootElement, final XMLElementReader<List<ModelNode>> rootParser, final XMLElementWriter<ModelMarshallingContext> rootDeparser) {
        super(file, rootElement, rootParser, rootDeparser);
        historyRoot = mkdir(new File(file.getParentFile(), file.getName().replace('.', '_')));
        currentHistory = new File(historyRoot, "current");
        snapshotsDirectory = mkdir(new File(historyRoot, "snapshot"));
    }

    @Override
    protected void successfulBoot(File file) throws ConfigurationPersistenceException {
        synchronized (file) {
            if (doneBootup.get()) {
                return;
            }
            createHistoryDirectory();

            try {

                final File last = addSuffixToFile(file, LAST);
                final File original = addSuffixToFile(file, ORIGINAL);
                final File initial = addSuffixToFile(file, INITIAL);

                if (!initial.exists()) {
                    copyFile(file, initial);
                }

                if (!last.exists()) {
                    copyFile(file, last);
                }
                if (!original.exists() || (last.exists() && file.lastModified() > last.lastModified())) {
                    copyFile(file, original);
                    snapshot();
                    last.setLastModified(System.currentTimeMillis());
                }
            } catch (IOException e) {
                // AutoGenerated
                throw new RuntimeException(e);
            }
            doneBootup.set(true);
        }
    }

    /** {@inheritDoc} */
    @Override
    protected void backup(final File file) throws ConfigurationPersistenceException {
        if (!doneBootup.get()) {
            return;
        }
        try {
            moveFile(file, getVersionedFile(file));
            int seq = sequence.get();
            if (seq > CURRENT_HISTORY_LENGTH) {
                File delete = getVersionedFile(file, seq - CURRENT_HISTORY_LENGTH);
                if (delete.exists()) {
                    delete.delete();
                }
            }
        } catch (IOException e) {
            throw new ConfigurationPersistenceException("Failed to back up " + file, e);
        }
    }

    protected void fileWritten(File file) throws ConfigurationPersistenceException {
        if (!doneBootup.get()) {
            return;
        }
        File last = addSuffixToFile(file, LAST);
        try {
            copyFile(file, last);
        } catch (IOException e) {
            throw new ConfigurationPersistenceException("Failed to back up " + file, e);
        }
    }


    private void moveFile(File file, File backup) throws IOException {

        if (backup.exists())
            backup.delete();

        if (!file.renameTo(backup) && file.exists()) {
            copyFile(file, backup);
        }
    }


    @Override
    protected String snapshot(File file) throws ConfigurationPersistenceException {
        String name = getTimeStamp(new Date()) + ".xml";
        File snapshot = new File(snapshotsDirectory, name);
        try {
            copyFile(file, snapshot);
        } catch (IOException e) {
            throw new ConfigurationPersistenceException("Failed to take a snapshot of " + file + " to " + snapshot, e);
        }
        return snapshot.toString();
    }

    @Override
    public SnapshotInfo listSnapshots() {
        return new BackupSnapshotInfo();
    }

    @Override
    public void deleteSnapshot(final String name) {
        List<String> names = new ArrayList<String>();
        for (String curr : snapshotsDirectory.list()) {
            if (curr.startsWith(name)) {
                names.add(curr);
            }
        }
        if (names.size() == 0) {
            throw new IllegalArgumentException("No files beginning with '" + name + "' found in " + snapshotsDirectory.getAbsolutePath());
        }
        if (names.size() > 1) {
            throw new IllegalArgumentException("Ambiguous name '" + name + "' in " + snapshotsDirectory.getAbsolutePath() + ": " + names.toString());
        }

        new File(snapshotsDirectory, names.get(0)).delete();
    }

    private void copyFile(File file, File backup) throws IOException {
        final FileInputStream fis = new FileInputStream(file);
        try {
            final FileOutputStream fos = new FileOutputStream(backup);
            try {
                StreamUtils.copyStream(fis, fos);
                fos.close();
            } finally {
                StreamUtils.safeClose(fos);
            }
        } finally {
            StreamUtils.safeClose(fis);
        }
    }

    private void createHistoryDirectory() {
        if (currentHistory.exists()) {
            if (!currentHistory.isDirectory()) {
                throw new IllegalStateException(currentHistory.getAbsolutePath() + " is not a directory");
            }

            //Copy any existing history directory to a timestamped backup directory
            final Date date = new Date();
            final String backupName = getTimeStamp(date);
            final File old = new File(historyRoot, backupName);
            if (!new File(currentHistory.getAbsolutePath()).renameTo(old)) {
                throw new IllegalStateException("Could not rename " + currentHistory.getAbsolutePath() + " to " + old.getAbsolutePath());
            }

            //Delete any old history directories
            final String cutoffFileName = getTimeStamp(subtractDays(date, HISTORY_DAYS));
            for (String name : historyRoot.list()) {
                if (name.length() == cutoffFileName.length() && TIMESTAMP_PATTERN.matcher(name).matches() && name.compareTo(cutoffFileName) < 0) {
                    deleteRecursive(new File(historyRoot, name));
                }
            }
        }

        //Create the history directory
        currentHistory.mkdir();
        if (!currentHistory.exists()) {
            throw new IllegalStateException("Could not create " + currentHistory.getAbsolutePath());
        }
    }

    private void deleteRecursive(final File file) {
        if (file.isDirectory()) {
            for (String name : file.list()) {
                deleteRecursive(new File(file, name));
            }
        }
        if (!file.delete()) {
            throw new IllegalStateException("Could not delete " + file);
        }
    }

    private File getVersionedFile(final File file) {
        return getVersionedFile(file, sequence.incrementAndGet());
    }

    private File getVersionedFile(final File file, int i) {
        return addSuffixToFile(new File(currentHistory, file.getName()), ".v" + i);
    }

    private File addSuffixToFile(final File file, final String suffix) {
        final String path = file.getAbsolutePath();
        int index = path.lastIndexOf(".");
        if (index == -1) {
            return new File(file.getAbsolutePath() + ".suffix");
        }
        StringBuilder sb = new StringBuilder();
        sb.append(path.substring(0, index));
        sb.append(suffix);
        sb.append(path.substring(index));
        return new File(sb.toString());
    }

    private Date subtractDays(Date date, int days) {
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(date);
        int doy = calendar.get(Calendar.DAY_OF_YEAR);
        calendar.set(Calendar.DAY_OF_YEAR, doy - days);
        return calendar.getTime();
    }

    private static String getTimeStamp(Date date) {
        SimpleDateFormat sfd = new SimpleDateFormat("yyyyMMdd-HHmmssSSS");
        return sfd.format(date);
    }

    private File mkdir(File dir) {
        if (!dir.exists()) {
            if (!dir.mkdir()) {
                throw new IllegalStateException("Could not create " + historyRoot.getAbsolutePath());
            }
        } else if (!dir.isDirectory()) {
            throw new IllegalStateException(dir.getAbsolutePath() + " is not a directory");
        }
        return dir;
    }

    private class BackupSnapshotInfo implements SnapshotInfo {
        ArrayList<String> names = new ArrayList<String>();

        public BackupSnapshotInfo() {
            for (String name : snapshotsDirectory.list(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return SNAPSHOT_XML.matcher(name).matches();
                }
            })) {
                names.add(name);
            }
        }

        @Override
        public String getSnapshotDirectory() {
            return snapshotsDirectory.getAbsolutePath();
        }

        @Override
        public List<String> names() {
            return names;
        }

    }
}
