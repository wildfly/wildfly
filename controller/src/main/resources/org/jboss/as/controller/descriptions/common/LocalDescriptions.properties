# Common attributes
namespaces=Map of namespaces used in the configuration XML document, where keys are namespace prefixes and values are schema URIs.
namespaces.add=Adds a namespace prefix mapping to the namespaces attribute's map.
namespaces.add.prefix=The prefix of the namespace to add
namespaces.add.uri=The schema uri of the namespace to add.
namespaces.remove=Removes a namespace prefix mapping from the namespaces attribute's map.
namespaces.remove.namespace=The prefix of the namespace to remove.
schema-locations=Map of locations of XML schemas used in the configuration XML document, where keys are schema URIs and values are locations where the schema can be found.
schema-locations.add=Adds a schema location mapping to the schema-locations attribute's map.
schema-locations.add.uri=The uri of the schema location to add
schema-locations.add.schema-location=The location  where the added schema can be found.
schema-locations.remove=Removes a schema location mapping from the schema-locations attribute's map.
schema-locations.remove.schema-uri=The URI of the schema location to remove.

# Management
core.management=The management services used to control a standalone server or a host's host controller in a management domain.
core.management.security-realms=The security realms available for control access to the management services.
core.management.security-realm=A security realm that can be associated with a management interface and used to control access to the management services.
core.management.security-realm.add=Adds a security realm that can be associated with a management interface and used to control access to the management services.
core.management.security-realm.remove=Removes a security realm that can be associated with a management interface and used to control access to the management services.
core.management.security-realm.server-identity=Configuration of the identities that represent the server.
core.management.security-realm.server-identity.secret=Configuration of the secret/password-based identity of a server or host controller.
core.management.security-realm.server-identity.secret.add=Adds a secret/password-based identity for a server or host controller.
core.management.security-realm.server-identity.secret.remove=Removes a Adds a secret/password-based identity for a server or host controller.
core.management.security-realm.server-identity.secret.value=The secret / password - Base64 Encoded.
core.management.security-realm.server-identity.ssl=Configuration of the SSL identity of a server or host controller.
core.management.security-realm.server-identity.ssl.add=Adds the SSL identity of a server or host controller.
core.management.security-realm.server-identity.ssl.remove=Removes the SSL identity of a server or host controller.
core.management.security-realm.server-identity.ssl.protocol=The protocol to use when creating the SSLContext.
core.management.security-realm.server-identity.ssl.keystore-password=The password to open the keystore.
core.management.security-realm.server-identity.ssl.keystore-path=The path of the keystore.
core.management.security-realm.server-identity.ssl.keystore-relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
core.management.security-realm.authentication=Configuration of the server side authentication mechanisms. Optionally one truststore can be defined and one username/password based store can be defined. Authentication will first attempt to use the truststore and if this is not available will fall back to the username/password authentication. If none of these are specified the only available mechanism will be the local mechanism for the Native interface and the HTTP interface will not be accessible.
core.management.security-realm.authentication.truststore=Configuration of a keystore to use to create a trust manager to verify clients.
core.management.security-realm.authentication.truststore.add=Adds a keystore to use to create a trust manager to verify clients.
core.management.security-realm.authentication.truststore.remove=Removes a keystore to use to create a trust manager to verify clients.
core.management.security-realm.authentication.truststore.keystore-password=The password to open the keystore.
core.management.security-realm.authentication.truststore.keystore-path=The path of the keystore.
core.management.security-realm.authentication.truststore.keystore-relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
core.management.security-realm.authentication.jaas=Configuration to use a JAAS LoginContext to authenticate the users.
core.management.security-realm.authentication.jaas.add=Adds a configuration to use JAAS for authentication.
core.management.security-realm.authentication.jaas.remove=Removes a configuration to use JAAS for authentication.
core.management.security-realm.authentication.jaas.name=The name of the JAAS configuration to use.
core.management.security-realm.authentication.ldap=Configuration to use LDAP as the user repository.
core.management.security-realm.authentication.ldap.add=Adds a configuration to use LDAP as the user repository.
core.management.security-realm.authentication.ldap.remove=Removes a configuration to use LDAP as the user repository.
core.management.security-realm.authentication.ldap.connection=The name of the connection to use to connect to LDAP.
core.management.security-realm.authentication.ldap.base-dn=The base distinguished name to commence the search for the user.
core.management.security-realm.authentication.ldap.recursive=Whether the search should be recursive.
core.management.security-realm.authentication.ldap.user-dn=The name of the attribute which is the user's distinguished name.
core.management.security-realm.authentication.ldap.username-attribute=The name of the attribute to search for the user. This filter will then perform a simple search where the username entered by the user matches the attribute specified here.
core.management.security-realm.authentication.ldap.advanced-filter=The fully defined filter to be used to search for the user based on their entered user ID. The filter should contain a variable in the form {0} - this will be replaced with the username supplied by the user.
core.management.security-realm.authentication.properties=Configuration to use a list users stored within a properties file as the user repository. The entries within the properties file are username={credentials} with each user being specified on it's own line.
core.management.security-realm.authentication.properties.add=Adds a configuration to use a list users stored within a properties file as the user repository.
core.management.security-realm.authentication.properties.remove=Removes a configuration to use a list users stored within a properties file as the user repository.
core.management.security-realm.authentication.properties.path=The path of the properties file containing the users.
core.management.security-realm.authentication.properties.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
core.management.security-realm.authentication.properties.plain-text=Are the credentials within the properties file stored in plain text. If not the credential is expected to be the hex encoded Digest hash of 'username : realm : password'.
core.management.security-realm.authentication.xml=Configuration to use a list users stored directly within the standalone.xml or host.xml configuration file as the user repository.
core.management.security-realm.authentication.xml.add=Adds a configuration to use a list users stored directly within the standalone.xml or host.xml configuration file as the user repository.
core.management.security-realm.authentication.xml.remove=Removes a configuration to use a list users stored directly within the standalone.xml or host.xml configuration file as the user repository.
core.management.security-realm.authentication.xml.user=An authorized user.
core.management.security-realm.authentication.xml.user.add=Adds an authorized user.
core.management.security-realm.authentication.xml.user.remove=Removes an authorized user.
core.management.security-realm.authentication.xml.user.password=The user's password.
core.management.security-realm.authorization=Configuration server side for loading additional user information such as roles to be used for subsequent authorization checks.
core.management.security-realm.authorization.properties=Configuration to use properties file to load a users roles. The entries within the properties file are username={roles} where roles is a comma separated list of users roles.
core.management.security-realm.authorization.properties.add=Adds a configuration to use a properties file to load a users roles.
core.management.security-realm.authorization.properties.remove=Removes a configuration to use a properties file to load a users roles.
core.management.security-realm.authorization.properties.path=The path of the properties file containing the users roles.
core.management.security-realm.authorization.properties.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
core.management.ldap-connections=Configurations of connection factories that can be used by a security realm to access LDAP servers as a source of authentication and authorization information.
core.management.ldap-connection=A connection factory that can be used by a security realm to access an LDAP server as a source of authentication and authorization information.
core.management.ldap-connection.add=Adds a connection factory that can be used by a security realm to access an LDAP server as a source of authentication and authorization information.
core.management.ldap-connection.remove=Removes a connection factory that was usable by a security realm to access an LDAP server as a source of authentication and authorization information.
core.management.ldap-connection.url=The URL to use to connect to the LDAP server.
core.management.ldap-connection.search-dn=The distinguished name to use when connecting to the LDAP server to perform searches.
core.management.ldap-connection.search-credential=The credential to use when connecting to perform a search.
core.management.ldap-connection.initial-context-factory=The initial context factory to establish the LdapContext.
core.management.management-interfaces=Interfaces exposed by the management services to allow external callers to perform management tasks.
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.add=Adds the configuration of the server's native management interface
core.management.native-interface.interface=Network interface on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.port=Port on which the server's socket for native management communication should be opened. Must be 'undefined' if the 'socket-binding' attribute is set.
core.management.native-interface.security-realm=The security realm to use for the native management interface.
core.management.native-interface.socket-binding=The name of the socket binding configuration to use for the native management interface's socket.
core.management.native-remoting-interface=Configuration of the server's native management interface using a connector from the remoting subsystem.
core.management.native-remoting-interface.add=Adds the configuration of the server's native management interface using a connector from the remoting subsystem.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Network interface on which the server's socket for HTTP management communication should be opened.
core.management.http-interface.port=Port on which the server's socket for HTTP management communication should be opened.
core.service-container=The central container that manages all services in a running standalone server or in a host controller in a management domain.

# Extensions
extension=A module that extends the standard capabilities of a domain or a standalone server.
extension.module=The name of the module.
extension.add=Adds an extension.
extension.remove=Removes an extension.
extension.subsystem=A subsystem provided by the extension. What is provided here is information about the xml schema and management interface provided by the subsystem, not the configuration of the subsystem itself.
extension.subsystem.xml-namespaces=A list of URIs for the XML namespaces supported by the subsystem's XML parser. May be empty if the extension did not clearly associate an XML namespace with a particular subsystem.
extension.subsystem.management-major-version=Major version of the subsystem's management interface. May be undefined if the subsystem does not currently provide a versioned management interface.
extension.subsystem.management-minor-version=Minor version of the subsystem's management interface. May be undefined if the subsystem does not currently provide a versioned management interface.

# Paths
named_path=A named filesystem path, but without a requirement to specify the actual path. If no actual path is specified, acts as a placeholder in the model (e.g. at the domain level) until a fully specified path definition is applied at a lower level (e.g. at the host level, where available addresses are known.)
named_path.name=The name of the path. Cannot be one of the standard fixed paths provided by the system: <ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li></ul> Note that the system provides other standard paths that can be overridden by declaring them in the configuration file. See the 'relative-to' attribute documentation for a complete list of standard paths.
named_path.path=The actual filesystem path. Treated as an absolute path, unless the 'relative-to' attribute is specified, in which case the value is treated as relative to that path. <p>If treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: </p>If this value is already absolute, then the value is directly used.  Otherwise the runtime pathname is resolved in a system-dependent way.  On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
named_path.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>
named_path.read-only=True if added by the system, false if configured by user. If true, the path cannot be removed or modified.
named_path.add=Add a new path.
named_path.add.path=The value of the path's 'path' attribute
named_path.add.relative-to=The value of the path's 'relative-to' attribute
named_path.remove=Remove a path
specified_path=A named filesystem path.
specified_path.name=The name of the path. Cannot be one of the standard fixed paths provided by the system: <ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li></ul> Note that the system provides other standard paths that can be overridden by declaring them in the configuration file. See the 'relative-to' attribute documentation for a complete list of standard paths.
specified_path.path=The actual filesystem path. Treated as an absolute path, unless the 'relative-to' attribute is specified, in which case the value is treated as relative to that path. <p>If treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: </p>If this value is already absolute, then the value is directly used.  Otherwise the runtime pathname is resolved in a system-dependent way.  On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
specified_path.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>
specified_path.read-only=True if added by the system, false if configured by user. If true, the path cannot be removed or modified.
specified_path.add=Add a new path.
specified_path.add.path=The value of the path's 'path' attribute
specified_path.add.relative-to=The value of the path's 'relative-to' attribute
specified_path.remove=Remove a path

#Profiles
profile=A named set of subsystem configurations.
profile.name=The name of the profile
profile.add=Add a new 'profile'
profile.add.includes=The value of the new profile's 'includes' attribute
profile.describe=Outputs the profile's subsystems as a list of operations that can be executed to create the same model
profile.remove=Remove a 'profile'
profile.remove.name=The value of the profile's 'name' attribute
profile.includes=A list of other profiles to include in this profile
profile.include=Specifies that a contents of a named profile are to be included in the profile whose definition includes this item.
profile.include.profile=The name of the included profile
profile.includes.add=Add a profile to the list of included profiles
profile.includes.add.include=The name of the included profile
profile.includes.remove=Remove a profile from the list of included profiles
profile.includes.remove.include=The name of the included profile
profile.subsystem=The subsystems that make up the profile.

# Interfaces
named_interface=A named network interface, but without any required criteria for determining the IP address to associate with that interface. If no IP address selection criteria are defined, acts as a placeholder in the model (e.g. at the domain level) until a fully specified interface definition is applied at a lower level (e.g. at the host level, where available addresses are known.)
specified_interface=A named network interface, along with required criteria for determining the IP address to associate with that interface.
interface.name=The name of the interface.
interface.criteria=Deprecated. A set of criteria that can be used at runtime to determine what IP address to use for an interface.
interface.add=Add a new interface specification.
interface.add.criteria=Deprecated.
interface.remove=Remove an interface specification.
interface.any-address=Attribute indicating that sockets using this interface should be bound to a wildcard address. The IPv6 wildcard address (::) will be used unless the java.net.preferIpV4Stack system property is set to true, in which case the IPv4 wildcard address (0.0.0.0) will be used. If a socket is bound to an IPv6 anylocal address on a dual-stack machine, it can accept both IPv6 and IPv4 traffic; if it is bound to an IPv4 (IPv4-mapped) anylocal address, it can only accept IPv4 traffic.
interface.any-ipv4-address=Attribute indicating that sockets using this interface should be bound to the IPv4 wildcard address (0.0.0.0).
interface.any-ipv6-address=Attribute indicating that sockets using this interface should be bound to the IPv6 wildcard address (::).
interface.inet-address=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not the address matches the given value. Value is either a IP address in IPv6 or IPv4 dotted decimal notation, or a hostname that can be resolved to an IP address. An 'undefined' value means this attribute is not relevant to the IP address selection.
interface.link-local-address=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not the address is link-local. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection.
interface.loopback=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not it is a loopback address.  An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection.
interface.loopback-address=Attribute indicating that the IP address for this interface should be the given value, if a loopback interface exists on the machine. A 'loopback address' may not actually be configured on the machine's loopback interface. Differs from inet-address in that the given value will be used even if no NIC can be found that has the IP specified address associated with it. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection.
interface.multicast=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not its network interface supports multicast.  An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection.
interface.nic=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether its network interface has the given name. The name of a network interface (e.g. eth0, eth1, lo). An 'undefined' value means this attribute is not relevant to the IP address selection.
interface.nic-match=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether its network interface has a name that matches the given regular expression. Value is a regular expression against which the names of the network interfaces available on the machine can be matched to find an acceptable interface. An 'undefined' value means this attribute is not relevant to the IP address selection.
interface.point-to-point=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not its network interface is a point-to-point interface. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection
interface.public-address=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or not it is a publicly routable address. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection
interface.site-local-address=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or it is a site-local address. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection
interface.subnet-match=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether or it the address fits in the given subnet definition. Value is a network IP address and the number of bits in the address' network prefix, written in "slash notation"; e.g. "192.168.0.0/16". An 'undefined' value means this attribute is not relevant to the IP address selection.
interface.up=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether its network interface is currently up. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection
interface.virtual=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be whether its network interface is a virtual interface. An 'undefined' or 'false' value means this attribute is not relevant to the IP address selection
interface.not=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be that the IP address *does not* meet any of a nested set of criteria. The value of the attribute is a set of criteria (e.g. 'loopback') whose normal meaning is reversed. An 'undefined' value means this attribute is not relevant to the IP address selection.
interface.any=Attribute indicating that part of the selection criteria for choosing an IP address for this interface should be that the IP address meets at least one of a nested set of criteria, but not necessarily all of the nested criteria. The value of the attribute is a set of criteria. An 'undefined' value means this attribute is not relevant to the IP address selection.

# Sockets
socket-binding-group=Contains a list of socket configurations.
socket-binding-group.name=The name of the socket binding group.
socket-binding-group.default-interface=Name of an interface that should be used as the interface for any sockets that do not explicitly declare one.
socket-binding-group.socket-binding=The individual socket configurations.
socket-binding-group.port-offset=Increment to apply to the base port values defined in the socket bindings to derive the runtime values to use on this server.
socket-binding-group.includes=A list of socket binding group names whose bindings are to be included in this socket-binding-group. This binding group's default interface will be applied to any included  bindings that do not specify an interface.
socket-binding-group.add=Adds a socket binding group.
socket-binding-group.remove=Removes a socket binding group.
socket-binding-group.include.add=Adds a socket binding group to the socket binding group's 'includes' attribute.
socket-binding-group.include.add.include=The name of the socket binding group to include.
socket-binding-group.include.remove=Removes a socket binding group from the socket binding group's 'includes' attribute.
socket-binding-group.include.remove.include=The name of the socket binding group to no longer include.

socket-binding=Configuration information for a socket.
socket-binding.name=The name of the socket. Services which need to access the socket configuration information will find it using this name.
socket-binding.interface=Name of the interface to which the socket should be bound, or, for multicast sockets, the interface on which it should listen. This should be one of the declared interfaces.
socket-binding.port=Number of the port to which the socket should be bound.
socket-binding.fixed-port=Whether the port value should remain fixed even if numeric offsets are applied to the other sockets in the socket group.
socket-binding.multicast-address=Multicast address on which the socket should receive multicast traffic. If unspecified, the socket will not be configured to receive multicast.
socket-binding.multicast-port=Port on which the socket should receive multicast traffic. Must be configured if 'multicast-address' is configured.
socket-binding.add=Adds a socket binding configuration to the group.
socket-binding.remove=Removes a socket binding configuration from the group.
socket-binding.bound=Whether an actual socket using this socket binding configuration has been bound.
socket-binding.bound-address=The address to which the actual socket using this socket binding configuration has been bound, or undefined if no socket has been bound.
socket-binding.bound-port=The port to which the actual socket using this socket binding configuration has been bound, or undefined if no socket has been bound.
socket-binding.client-mappings=Specifies zero or more client mappings for this socket binding. A client connecting to this socket should use the destination address specified in the mapping that matches its desired outbound interface. This allows for advanced network topologies that use either network address translation, or have bindings on multiple network interfaces to function. Each mapping should be evaluated in declared order, with the first successful match used to determine the destination.
socket-binding.client-mappings.source-network=Source network the client connection binds on. This value is in the form of ip/netmask. A client should match this value against the desired client host network interface, and if matched the client should connect to the corresponding destination values. If omitted this mapping should match any interface.
socket-binding.client-mappings.destination-address=The destination address that a client should connect to if the source-network matches. This value can either be a hostname or an ip address.
socket-binding.client-mappings.destination-port=The destination port that a client should connect to if the source-network matches. If omitted this mapping will reuse the effective socket binding port.
remote-destination-outbound-socket-binding=Configuration information for a, remote destination, outbound socket binding.
remote-destination-outbound-socket-binding.name=Name of the outbound socket binding. Services which need to access the socket configuration information will find it using this name.
remote-destination-outbound-socket-binding.source-interface=The name of the interface which will be used for the source address of the outbound socket.
remote-destination-outbound-socket-binding.source-port=The port number which will be used as the source port of the outbound socket.
remote-destination-outbound-socket-binding.host=The host name or the IP address of the remote destination to which this outbound socket will connect.
remote-destination-outbound-socket-binding.port=The port number of the remote destination to which the outbound socket should connect.
remote-destination-outbound-socket-binding.add=Adds a remote destination outbound socket binding, to a socket binding group
remote-destination-outbound-socket-binding.remove=Removes a remote destination outbound socket binding, from a socket binding group
remote-destination-outbound-socket-binding.fixed-source-port=Whether the port value should remain fixed even if numeric offsets are applied to the other outbound sockets in the socket group.

local-destination-outbound-socket-binding=Configuration information for a, local destination, outbound socket binding.
local-destination-outbound-socket-binding.name=Name of the outbound socket binding. Services which need to access the socket configuration information will find it using this name.
local-destination-outbound-socket-binding.source-interface=The name of the interface which will be used for the source address of the outbound socket.
local-destination-outbound-socket-binding.source-port=The port number which will be used as the source port of the outbound socket.
local-destination-outbound-socket-binding.socket-binding-ref=The name of the local socket-binding which will be used to determine the port to which this outbound socket connects.
local-destination-outbound-socket-binding.add=Adds a local destination outbound socket binding, to a socket binding group
local-destination-outbound-socket-binding.remove=Removes a local destination outbound socket binding, from a socket binding group
local-destination-outbound-socket-binding.fixed-source-port=Whether the port value should remain fixed even if numeric offsets are applied to the other outbound sockets in the socket group.


# Subsystem
subsystem.describe=Outputs the subsystem as a list of operations that can be executed to create the original model

# System Properties
system-property.add=Adds a system property or updates an existing one.
system-property.remove=Removes a system property.
system-property.value=The value of the system property.
system-property.boottime=If true the system property is passed on the command-line to the started server jvm. If false, it will be pushed to the server as part of the startup sequence.

# Deployments
deployment=A deployment represents anything that can be deployed (e.g. an application such as EJB-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.
deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.content=List of pieces of content that comprise the deployment.
deployment.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.inputstream=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.enabled=Boolean indicating whether the deployment content is currently deployed in the runtime (or should be deployed in the runtime the next time the server starts.)
deployment.persistent=Boolean indicating whether the existence of the deployment should be recorded in the persistent server configuration. Only relevant to a standalone mode server. Default is 'true'. A deployment managed by a deployment scanner would have this set to 'false' to ensure the deployment is only deployed at server start if the scanner again detects the deployment.
deployment.upload-bytes=Indicates that the deployment content in the included byte array should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository..
deployment.upload-url=Indicates that the deployment content available at the included URL should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-stream=Indicates that the deployment content available at the included input stream index should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.path=Path (relative or absolute) to unmanaged content that is part of the deployment.
deployment.relative-to=Name of a system path to which the value of the 'path' is relative. If not set, the 'path' is considered to be absolute.
deployment.archive=Flag indicating whether unmanaged content is a zip archive (true) or exploded (false).
deployment.add=Adds previously uploaded content to the list of content available for use. Does not actually deploy the content unless the 'enabled' parameter is 'true'.
deployment.deploy=Deploy the specified deployment content into the runtime, optionally replacing existing content.
deployment.deploy.name=The name of the new content.
deployment.deploy.to-replace=The name of the content that is to be replaced.
deployment.replace=Replace existing content in the runtime with new content. The new content must have been previously uploaded to the deployment content repository.
deployment.replace.name=The name of the new content.
deployment.replace.to-replace=The name of the content that is to be replaced.
deployment.full-replace=Add previously uploaded deployment content to the list of content available for use, replace existing content of the same name in the runtime, and remove the replaced content from the list of content available for use. This is equivalent to an 'add', 'undeploy', 'deploy', 'remove' sequence where the new content has the same name as the content being replaced. Precisely one of 'runtime-name', 'hash', 'input-stream-index', 'bytes' or 'url' must be specified.
deployment.undeploy=Undeploy content from the runtime. The content remains in the list of content available for use.
deployment.redeploy=Undeploy existing content from the runtime and deploy it again.
deployment.status=The current runtime status of a deployment. Possible status modes are OK, FAILED, and STOPPED. FAILED indicates a dependency is missing or a service could not start. STOPPED indicates that the deployment was not enabled or was manually stopped.
deployment.subsystem=Runtime resources created when the deployment is deployed, organized by the subsystem responsible for the runtime resource.
deployment.subdeployment=Runtime resources associated with a child deployment packaged inside another deployment; for example a war packaged inside an ear.

# Global operations
global.read-attribute=Gets the value of an attribute for the selected resource
global.read-attribute.name=The name of the attribute to get the value for under the selected resource
global.read-attribute.include-defaults=Boolean to enable/disable default reading. In case it is set to false only attribute set by user are returned ignoring undefined.
global.read-attribute.reply=The value of the attribute. The type will be that of the attribute found
global.read-children-names=Gets the names of all children under the selected resource with the given type
global.read-children-names.child-type=The name of the node under which to get the children names
global.read-children-names.reply=The children names
global.read-children-types=Gets the type names of all the children under the selected resource
global.read-children-types.reply=The children types
global.read-children-resources=Reads information about all of a resource's children that are of a given type
global.read-children-resources.child-type=The name of the resource under which to get the child resources
global.read-children-resources.recursive=Whether to get the children recursively. If absent, false is the default
global.read-children-resources.recursive-depth=The depth to which information about child resources should be included.
global.read-children-resources.proxies=Whether to include remote resources in a recursive query (i.e. host level resources in a query of the domain root; running server resources in a query of a host). If absent, false is the default
global.read-children-resources.include-runtime=Whether to include runtime attributes (i.e. those whose value does not come from the persistent configuration) in the response. If absent, false is the default. Ignored if the 'recursive' parameter is set to 'true'; i.e. runtime attributes can only be read in non-recursive queries.
global.read-children-resources.include-defaults=Boolean to enable/disable default reading. In case it is set to false only attribute set by user are returned ignoring undefined.
global.read-children-resources.reply=The children resources
global.read-operation=Gets the details of an operation on the given resource
global.read-operation.locale=The locale to get the operation description in. If null, the default locale will be used
global.read-operation.reply=The name of the operation to get details for
global.read-operation.type=The description of the operation. Undefined if not found
global.read-operation-names=Gets the names of all the operations for the given resource
global.read-operation-names.reply=The operation names
global.read-resource=Reads a model resource's attribute values along with either basic or complete information about any child resources
global.read-resource.recursive=Whether to include complete information about child resources, recursively. If absent, false is the default
global.read-resource.recursive-depth=The depth to which information about child resources should be included.
global.read-resource.proxies=Whether to include remote resources in a recursive query (i.e. host level resources in a query of the domain root; running server resources in a query of a host). If absent, false is the default.
global.read-resource.include-runtime=Whether to include runtime attributes (i.e. those whose value does not come from the persistent configuration) in the response. If absent, false is the default.
global.read-resource.include-defaults=Boolean to enable/disable default reading. In case it is set to false only attribute set by user are returned ignoring undefined.
global.read-resource.reply=The resource's attribute values along with information about any child resources
global.read-resource-description=Gets the description of a resource's attributes, types of children and, optionally, operations
global.read-resource-description.locale=The locale to get the resource description in. If null, the default locale will be used
global.read-resource-description.operations=Whether to include descriptions of the resource's operations. Default is false
global.read-resource-description.inherited=If 'operations' is true, whether to include descriptions of the resource's inherited operations. Default is true.
global.read-resource-description.recursive=Whether to include recursively descriptions of child resources. Default is false.
global.read-resource-description.proxies=Whether to include remote resources in a recursive query (i.e. host level resources in a query of the domain root; running server resources in a query of a host). If absent, false is the default
global.read-resource-description.recursive-depth=The depth to which information about child resources should be included.
global.read-resource-description.reply=The description of the resource
global.undefine-attribute=Sets the value of an attribute of the selected resource to 'undefined'
global.undefine-attribute.name=The name of the attribute which should be set to 'undefined'
global.write-attribute=Sets the value of an attribute for the selected resource
global.write-attribute.name=The name of the attribute to set the value for under the selected resource
global.write-attribute.value=The value of the attribute to set the value for under the selected resource. May be null if the underlying model supports null values.
global.validate-address=Checks whether a resource with the address passed in as the argument exists.
global.validate-address.value=The address to check.
global.validate-address.reply=Report of checking the address.
global.validate-address.reply.valid=Indicates whether a resource with the address passed in as the argument exists.
global.validate-address.reply.problem=Is included only if the address is not valid and describes what's wrong with the address.
global.validate-operation=Validates that an operation is valid according to its description. Any errors present will be shown in the operation's failure-description.
global.validate-operation.value=The operation to validate.

# Root Operations
root.composite=An operation that groups multiple operation requests into a single operation request.
root.composite.steps=A list of the operation requests that constitute the composite request.
root.composite.reply=A composite operation response that consists of all the step results.

# Common Operations
read-config-as-xml=Reads the current configuration and returns it in XML format.
read-config-as-xml.response=The XML form of the persistent configuration.

# JVMs
jvm=The JVM configuration for managed processes / servers.
jvm.add=Add a new JVM configuration.
jvm.remove=Remove an existing JVM configuration.
jvm.name=The name of the JVM configuration.
jvm.heap=The initial heap size allocated by the JVM.
jvm.heap.max=The maximum heap size that can be allocated by the JVM.
jvm.permgen=The initial permanent generation size.
jvm.permgen.max=The maximum size of the permanent generation.
jvm.stack=The JVM stack size settings.
jvm.agent.lib=The JVM agent lib.
jvm.agent.path=The JVM agent path.
jvm.javaagent=The java agent.
jvm.option=A JVM option.
jvm.options=The JVM options.
jvm.option.add=Add a jvm option.
jvm.option.remove=Remove a jvm option.
jvm.env.variables=The JVM environment variables.
jvm.system.properties=The JVM system properties.
jvm.java.home=The java home
jvm.type=The JVM type can be either SUN or IBM
jvm.debug.enabled=Boolean value indicating whether debug is enabled.
jvm.debug.options=The debug options.
jvm.env.classpath.ignored=Ignore the environment classpath.

#Snapshots
snapshot.delete.description=Deletes a snapshot from the snapshots directory
snapshot.delete.name=The name of the snapshot to delete. The whole name is not needed, as long as what is passed in uniquely identifies a snapshot within the snapshots directory. If 'all' is used, all snapshots in the snapshot directory will be deleted.
snapshot.list.description=Lists the snapshots
snapshot.list.reply.dir=The directory where the snapshots are stored
snapshot.list.reply.names=The names of the snapshots within the snapshots directory
snapshot.take.description=Takes a snapshot of the current configuration
snapshot.take.reply.name=The location of the file on the machine the configuration belongs

#vault
vault=Security Vault for attributes.
vault.code=Fully Qualified Name of the Security Vault Implementation.
vault.option=Security Vault option.
vault.options=Security Vault options.
vault.add=Add the Security Vault.
vault.remove=Remove the Security Vault.

# Misc
core.resolve-expression=Operation that accepts an expression as input (or a string that can be parsed into an expression) and resolves it against the local system properties and environment variables.
core.resolve-expression.expression=The expression to resolve.
core.resolve-expression.reply=The resolved expression, or the string form of the original input value if it did not represent an expression.
