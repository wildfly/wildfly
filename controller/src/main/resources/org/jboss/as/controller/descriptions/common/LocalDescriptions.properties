# Common attributes
namespaces=Map of namespaces used in the configuration XML document, where keys are namespace prefixes and values are schema URIs.
namespaces.add=Adds a namespace prefix mapping to the namespaces attribute's map.
namespaces.add.namespace=The namespace to add; a key/value pair where the key is the namespace prefix and the value is the schema URI.
namespaces.remove=Removes a namespace prefix mapping from the namespaces attribute's map.
namespaces.remove.namespace=The prefix of the namespace to remove.
schema-locations=Map of locations of XML schemas used in the configuration XML document, where keys are schema URIs and values are locations where the schema can be found.
schema-locations.add=Adds a schema location mapping to the schema-locations attribute's map.
schema-locations.add.schema-location=The schema location to add; a key/value pair where the key is the schema URI and the value is the location where the schema can be found.
schema-locations.remove=Removes a schema location mapping from the schema-locations attribute's map.
schema-locations.remove.schema-location=The URI of the schema location to add.

# Management
core.management=The management services used to control a standalone server or a host's host controller in a management domain.
core.management.security-realms=The security realms available for control access to the management services.
core.management.security-realm=A security realm that can be associated with a management interface and used to control access to the management services.
core.management.outbound-connections=Configurations of connection factories that can be used by a security realm to access external source of authentication and authorization information (e.g. an LDAP server).
core.management.outbound-connection=A connection factory that can be used by a security realm to access external source of authentication and authorization information (e.g. an LDAP server).
core.management.management-interfaces=Interfaces exposed by the management services to allow external callers to perform management tasks.
core.management.native-interface=Configuration of the server's native management interface
core.management.native-interface.add=Adds the configuration of the server's native management interface
core.management.native-interface.interface=Network interface on which the server's socket for native management communication should be opened.
core.management.native-interface.port=Port on which the server's socket for native management communication should be opened.
core.management.http-interface=Configuration of the server's HTTP management interface
core.management.http-interface.add=Adds the configuration of the server's HTTP management interface
core.management.http-interface.interface=Network interface on which the server's socket for HTTP management communication should be opened.
core.management.http-interface.port=Port on which the server's socket for HTTP management communication should be opened.
core.service-container=The central container that manages all services in a running standalone server or in a host controller in a management domain.

# Extensions
extension=A module that extends the standard capabilities of a domain or a standalone server.
extension.module=The name of the module.
extension.add=Adds an extension.
extension.remove=Removes an extension.

# Paths
named_path=A named filesystem path, but without a requirement to specify the actual path. If no actual path is specified, acts as a placeholder in the model (e.g. at the domain level) until a fully specified path definition is applied at a lower level (e.g. at the host level, where available addresses are known.)
specified_path=A named filesystem path.
path.name=The name of the path. Cannot be one of the standard fixed paths provided by the system: <ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li></ul> Note that the system provides other standard paths that can be overridden by declaring them in the configuration file. See the 'relative-to' attribute documentation for a complete list of standard paths.
path.path=The actual filesystem path. Treated as an absolute path, unless the 'relative-to' attribute is specified, in which case the value is treated as relative to that path. <p>If treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: </p>If this value is already absolute, then the value is directly used.  Otherwise the runtime pathname is resolved in a system-dependent way.  On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
path.relative-to=The name of another previously named path, or of one of the standard paths provided by the system. If 'relative-to' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. The standard paths provided by the system include:<ul><li>jboss.home - the root directory of the JBoss AS distribution</li><li>user.home - user's home directory</li><li>user.dir - user's current working directory</li><li>java.home - java installation directory</li><li>jboss.server.base.dir - root directory for an individual server instance</li><li>jboss.server.data.dir - directory the server will use for persistent data file storage</li><li>jboss.server.log.dir - directory the server will use for log file storage</li><li>jboss.server.tmp.dir - directory the server will use for temporary file storage</li><li>jboss.domain.servers.dir - directory under which a host controller will create the working area for individual server instances</li></ul>
path.add=Add a new path.
path.add.path=The value of the path's 'path' attribute
path.add.relative-to=The value of the path's 'relative-to' attribute
path.remove=Remove a path

#Profiles
profile=A named set of subsystem configurations.
profile.name=The name of the profile
profile.add=Add a new 'profile'
profile.add.includes=The value of the new profile's 'includes' attribute
profile.describe=Outputs the profile's subsystems as a list of operations that can be executed to create the same model
profile.remove=Remove a 'profile'
profile.remove.name=The value of the profile's 'name' attribute
profile.includes=A list of other profiles to include in this profile
profile.include=Specifies that a contents of a named profile are to be included in the profile whose definition includes this item.
profile.include.profile=The name of the included profile
profile.includes.add=Add a profile to the list of included profiles
profile.includes.add.include=The name of the included profile
profile.includes.remove=Remove a profile from the list of included profiles
profile.includes.remove.include=The name of the included profile
profile.subsystem=The subsystems that make up the profile.

# Interfaces
named_interface=A named network interface, but without any criteria for determining the IP address to associate with that interface. Acts as a placeholder in the model (e.g. at the domain level) until a fully specified interface definition is applied at a lower level (e.g. at the server level, where available addresses are known.)
specified_interface=A named network interface, along with required criteria for determining the IP address to associate with that interface.
interface.name=The name of the interface.
interface.criteria=A set of criteria that can be used at runtime to determine what IP address to use for an interface.
interface.add=Add a new interface specification.
interface.add.criteria=The value of the interface's 'criteria' attribute
interface.remove=Remove an interface specification.

# Sockets
socket_binding_group=Contains a list of socket configurations.
socket_binding_group.name=The name of the socket binding group.
socket_binding_group.default-interface=Name of an interface that should be used as the interface for any sockets that do not explicitly declare one.
socket_binding_group.socket-binding=The individual socket configurtions.
server_socket_binding_group.port-offset=Increment to apply to the base port values defined in the socket bindings to derive the runtime values to use on this server.
domain_socket_binding_group.includes=A list of socket binding group names whose bindings are to be included in this socket-binding-group. This binding group's default interface will be applied to any included  bindings that do not specify an interface.
server_socket_binding_group.add=Adds the socket binding group to this server.
server-socket_binding_group.add.port-offset=The value of the socket binding group's 'port-offset' attribute.
domain_socket_binding_group.add=Add a new socket binding group.
domain-socket_binding_group.add.includes=The value of the socket binding group's 'includes' attribute.
socket_binding_group.add.default-interface=The value of the socket binding group's 'default-interface' attribute.
socket_binding_group.remove=Removes a socket binding group.
socket_binding=Configuration information for a socket.
socket_binding.name=The name of the socket. Services which need to access the socket configuration information will find it using this name.
socket_binding.interface=Name of the interface to which the socket should be bound, or, for multicast sockets, the interface on which it should listen. This should be one of the declared interfaces.
socket_binding.port=Number of the port to which the socket should be bound.
socket_binding.fixed-port=Whether the port value should remain fixed even if numeric offsets are applied to the other sockets in the socket group.
socket_binding.multicast-address=Multicast address on which the socket should receive multicast traffic. If unspecified, the socket will not be configured to receive multicast.
socket_binding.multicast-port=Port on which the socket should receive multicast traffic. Must be configured if 'multicast-address' is configured.
socket-binding.add=Adds a socket binding configuration to the group.
socket_binding.add.interface=The value of the socket binding's 'interface' attribute.
socket_binding.add.port=The value of the socket binding's 'port' attribute.
socket_binding.add.fixed-port=The value of the socket binding's 'fixed-port' attribute.
socket_binding.add.multicast-address=The value of the socket binding's 'multicast-address' attribute.
socket_binding.add.multicast-port=The value of the socket binding's 'multicast-port' attribute.
socket_binding.remove=Removes a socket binding configuration from the group.
domain_socket_binding_group.include.add=Adds a socket binding group to the socket binding group's 'includes' attribute.
domain_socket_binding_group.include.add.include=The name of the socket binding group to include.
domain_socket_binding_group.include.remove=Removes a socket binding group from the socket binding group's 'includes' attribute.
domain_socket_binding_group.include.remove.include=The name of the socket binding group to no longer include.

# Subsystem
subsystem.describe=Outputs the subsystem as a list of operations that can be executed to create the original model

# System Properties
system-property.add=Adds a system property or updates an existing one.
system-property.remove=Removes a system property.
system-property.value=The value of the system property.
system-property.boottime=If true the system property is passed on the command-line to the started server jvm. If false, it will be pushed to the server as part of the startup sequence.

# Deployments
deployment=A deployment represents anything that can be deployed (e.g. an application such as EJB-JAR, WAR, EAR, any kind of standard archive such as RAR or JBoss-specific deployment) into a server.
deployment.name=Unique identifier of the deployment. Must be unique across all deployments.
deployment.runtime-name=Name by which the deployment should be known within a server's runtime. This would be equivalent to the file name of a deployment file, and would form the basis for such things as default Java Enterprise Edition application and module names. This would typically be the same as 'name', but in some cases users may wish to have two deployments with the same 'runtime-name' (e.g. two versions of "foo.war") both available in the deployment content repository, in which case the deployments would need to have distinct 'name' values but would have the same 'runtime-name'.
deployment.content=List of pieces of content that comprise the deployment.
deployment.hash=The hash of managed deployment content that has been uploaded to the domain's or standalone server's deployment content repository.
deployment.inputstream=The index into the operation's attached input streams of the input stream that contains deployment content that should be uploaded to the domain's or standalone server's deployment content repository.
deployment.enabled=Boolean indicating whether the deployment content is currently deployed in the runtime (or should be deployed in the runtime the next time the server starts.)
deployment.persistent=Boolean indicating whether the existence of the deployment should be recorded in the persistent server configuration. Only relevant to a standalone mode server. Default is 'true'. A deployment managed by a deployment scanner would have this set to 'false' to ensure the deployment is only deployed at server start if the scanner again detects the deployment.
deployment.upload-bytes=Indicates that the deployment content in the included byte array should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.bytes=Byte array containing the deployment content that should uploaded to the domain's or standalone server's deployment content repository..
deployment.upload-url=Indicates that the deployment content available at the included URL should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.url=The URL at which the deployment content is available for upload to the domain's or standalone server's deployment content repository.. Note that the URL must be accessible from the target of the operation (i.e. the Domain Controller or standalone server).
deployment.upload-stream=Indicates that the deployment content available at the included input stream index should be added to the deployment content repository. Note that this operation does not indicate the content should be deployed into the runtime.
deployment.path=Path (relative or absolute) to unmanaged content that is part of the deployment.
deployment.relative-to=Name of a system path to which the value of the 'path' is relative. If not set, the 'path' is considered to be absolute.
deployment.archive=Flag indicating whether unmanaged content is a zip archive (true) or exploded (false).
deployment.add=Adds previously uploaded content to the list of content available for use. Does not actually deploy the content unless the 'enabled' parameter is 'true'.
deployment.deploy=Deploy the specified deployment content into the runtime, optionally replacing existing content.
deployment.deploy.name=The name of the new content.
deployment.deploy.to-replace=The name of the content that is to be replaced.
deployment.replace=Replace existing content in the runtime with new content. The new content must have been previously uploaded to the deployment content repository.
deployment.replace.name=The name of the new content.
deployment.replace.to-replace=The name of the content that is to be replaced.
deployment.full-replace=Add previously uploaded deployment content to the list of content available for use, replace existing content of the same name in the runtime, and remove the replaced content from the list of content available for use. This is equivalent to an 'add', 'undeploy', 'deploy', 'remove' sequence where the new content has the same name as the content being replaced. Precisely one of 'runtime-name', 'hash', 'input-stream-index', 'bytes' or 'url' must be specified.
deployment.undeploy=Undeploy content from the runtime. The content remains in the list of content available for use.
deployment.redeploy=Undeploy existing content from the runtime and deploy it again.
deployment.status=The current runtime status of a deployment. Possible status modes are OK, FAILED, and STOPPED. FAILED indicates a dependency is missing or a service could not start. STOPPED indicates that the deployment was manually stopped.
# Global operations
global.read-attribute=Gets the value of an attribute for the selected resource
global.read-attribute.name=The name of the attribute to get the value for under the selected resource
global.read-attribute.reply=The value of the attribute
global.read-attribute.reply.type=The type will be that of the attribute found
global.read-children-names=Gets the names of all children under the selected resource with the given type
global.read-children-names.child-type=The name of the node under which to get the children names
global.read-children-names.reply=The children names
global.read-children-types=Gets the type names of all the children under the selected resource
global.read-children-types.reply=The children types
global.read-children-resources=Reads information about all of a resource's children that are of a given type
global.read-children-resources.child-type=The name of the resource under which to get the child resources
global.read-children-resources.recursive=Whether to get the children recursively. If absent, false is the default
global.read-children-resources.proxies=Whether to include remote resources in a recursive query (i.e. host level resources in a query of the domain root; running server resources in a query of a host). If absent, false is the default
global.read-children-resources.include-runtime=Whether to include runtime attributes (i.e. those whose value does not come from the persistent configuration) in the response. If absent, false is the default. Ignored if the 'recursive' parameter is set to 'true'; i.e. runtime attributes can only be read in non-recursive queries.
global.read-children-resources.reply=The children resources
global.read-operation=Gets the details of an operation on the given resource
global.read-operation.locale=The locale to get the operation description in. If null, the default locale will be used
global.read-operation.reply=The name of the operation to get details for
global.read-operation.type=The description of the operation. Undefined if not found
global.read-operation-names=Gets the names of all the operations for the given resource
global.read-operation-names.reply=The operation names
global.read-resource=Reads a model resource's attribute values along with either basic or complete information about any child resources
global.read-resource.recursive=Whether to include complete information about child resources, recursively. If absent, false is the default
global.read-resource.proxies=Whether to include remote resources in a recursive query (i.e. host level resources in a query of the domain root; running server resources in a query of a host). If absent, false is the default
global.read-resource.include-runtime=Whether to include runtime attributes (i.e. those whose value does not come from the persistent configuration) in the response. If absent, false is the default. Ignored if the 'recursive' parameter is set to true; i.e. runtime attributes can only be read in non-recursive queries.
global.read-resource.reply=The resource's attribute values along with information about any child resources
global.read-resource-description=Gets the description of a resource's attributes, types of children and, optionally, operations
global.read-resource-description.locale=The locale to get the resource description in. If null, the default locale will be used
global.read-resource-description.operations=Whether to include descriptions of the resource's operations. Default is false
global.read-resource-description.inherited=If 'operations' is true, whether to include descriptions of the resource's inherited operations. Default is true.
global.read-resource-description.recursive=Whether to include recursively descriptions of child resources. Default is false.
global.read-resource-description.reply=The description of the resource
global.write-attribute=Sets the value of an attribute for the selected resource
global.write-attribute.name=The name of the attribute to set the value for under the selected resource
global.write-attribute.value=The value of the attribute to set the value for under the selcted resource. May be null if the underlying model supports null values.

# Common Operations
read-config-as-xml=Reads the current configuration and returns it in XML format.
read-config-as-xml.response=The XML form of the persistent configuration.

# JVMs
jvm=The JVM configuration for managed processes / servers.
jvm.add=Add a new JVM configuration.
jvm.remove=Remove an existing JVM configuration.
jvm.name=The name of the JVM configuration.
jvm.heap=The Heap size settings allocated by the JVM.
jvm.permgen=The JVM PermGen settings.
jvm.stack=The JVM stack size settings.
jvm.agent.lib=The JVM agent lib.
jvm.agent.path=The JVM agent path.
jvm.javaagent=The java agent.
jvm.option=A JVM option.
jvm.options=The JVM options.
jvm.option.add=Add a jvm option.
jvm.option.remove=Remove a jvm option.
jvm.env.variables=The JVM environment variables.
jvm.system.properties=The JVM system properties.
jvm.java.home=The java home
jvm.type=The JVM type can be either SUN or IBM
jvm.debug.enabled=Boolean value indicating whether debug is enabled.
jvm.debug.options=The debug options.
jvm.env.classpath.ignored=Ignore the environment classpath.

#Snapshots
snapshot.delete.description=Deletes a snapshot from the snapshots directory
snapshot.delete.name=The name of the snapshot to delete. The whole name is not needed, as long as what is passed in uniquely identifies a snapshot within the snapshots directory. If 'all' is used, all snapshots in the snapshot directory will be deleted.
snapshot.list.description=Lists the snapshots
snapshot.list.reply.dir=The directory where the snapshots are stored
snapshot.list.reply.names=The names of the snapshots within the snapshots directory
snapshot.take.description=Takes a snapshot of the current configuration
snapshot.take.reply.name=The location of the file on the machine the configuration belongs
