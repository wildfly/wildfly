/*
* JBoss, Home of Professional Open Source.
* Copyright 2006, Red Hat Middleware LLC, and individual contributors
* as indicated by the @author tags. See the copyright.txt file in the
* distribution for a full listing of individual contributors.
*
* This is free software; you can redistribute it and/or modify it
* under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation; either version 2.1 of
* the License, or (at your option) any later version.
*
* This software is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this software; if not, write to the Free
* Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
* 02110-1301 USA, or see the FSF site: http://www.fsf.org.
*/
package org.jboss.as.remoting;

import java.net.InetSocketAddress;
import java.util.concurrent.Executors;

import org.jboss.msc.service.Service;
import org.jboss.msc.service.StartContext;
import org.jboss.msc.service.StartException;
import org.jboss.msc.service.StopContext;
import org.jboss.msc.value.InjectedValue;
import org.xnio.ChannelListener;
import org.xnio.ConnectionChannelThread;
import org.xnio.OptionMap;
import org.xnio.Xnio;
import org.xnio.channels.AcceptingChannel;
import org.xnio.channels.ConnectedStreamChannel;

/**
 * Contains the remoting strem server
 *
 * @author <a href="kabir.khan@jboss.com">Kabir Khan</a>
 * @version $Revision: 1.1 $
 */
public abstract class AbstractStreamServerService implements Service<AcceptingChannel<? extends ConnectedStreamChannel>>{

    //private final InjectedValue<ChannelListener<AcceptingChannel<ConnectedStreamChannel>>> connectorValue = new InjectedValue<ChannelListener<AcceptingChannel<ConnectedStreamChannel>>>();
    @SuppressWarnings("rawtypes")
    private final InjectedValue<ChannelListener> connectorValue = new InjectedValue<ChannelListener>();

    private AcceptingChannel<? extends ConnectedStreamChannel> streamServer;

    @Override
    public AcceptingChannel<? extends ConnectedStreamChannel> getValue() throws IllegalStateException, IllegalArgumentException {
        return streamServer;
    }

    @SuppressWarnings("rawtypes")
    public InjectedValue<ChannelListener> getConnectorInjector() {
        return connectorValue;
    }

    @Override
    public void start(final StartContext context) throws StartException {
        try {
            final Xnio xnio = XnioUtil.getXnio();
            final ConnectionChannelThread connectionChannelThread = xnio.createReadChannelThread(Executors.defaultThreadFactory());
            streamServer = xnio.createStreamServer(getSocketAddress(), connectionChannelThread, connectorValue.getValue(), OptionMap.EMPTY);
        } catch (Exception e) {
            // AutoGenerated
            throw new StartException(e);
        }
    }

    @Override
    public void stop(StopContext context) {
    }

    abstract InetSocketAddress getSocketAddress();
}
